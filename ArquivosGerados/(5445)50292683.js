    function simpler(whole, x, y) {&#xD;&#xA;      if (x == 0) {&#xD;&#xA;        return whole;&#xD;&#xA;      } else if (x == 1 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 1 + '</sup>/<sub>' + 10 + '</sub>'&#xD;&#xA;      } else if (x == 2 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 1 + '</sup>/<sub>' + 5 + '</sub>'&#xD;&#xA;      } else if (x == 3 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 3 + '</sup>/<sub>' + 10 + '</sub>'&#xD;&#xA;      } else if (x == 4 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 2 + '</sup>/<sub>' + 5 + '</sub>'&#xD;&#xA;      } else if (x == 5 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 1 + '</sup>/<sub>' + 2 + '</sub>'&#xD;&#xA;      } else if (x == 6 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 3 + '</sup>/<sub>' + 5 + '</sub>'&#xD;&#xA;      } else if (x == 7 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 7 + '</sup>/<sub>' + 10 + '</sub>'&#xD;&#xA;      } else if (x == 8 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 4 + '</sup>/<sub>' + 5 + '</sub>'&#xD;&#xA;      } else if (x == 9 && y == 10) {&#xD;&#xA;        return whole + '<sup>' + 9 + '</sup>/<sub>' + 10 + '</sub>'&#xD;&#xA;      } else {&#xD;&#xA;        return whole + '<sup>' + x + '</sup>/<sub>' + y + '</sub>';&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    function Fraction() {}&#xD;&#xA;    Fraction.prototype.convert = function(x, improper) {&#xD;&#xA;      improper = improper || false;&#xD;&#xA;      var abs = Math.abs(x);&#xD;&#xA;      this.sign = x / abs;&#xD;&#xA;      x = abs;&#xD;&#xA;      var stack = 0;&#xD;&#xA;      this.whole = !improper ? Math.floor(x) : 0;&#xD;&#xA;      var fractional = !improper ? x - this.whole : abs;&#xD;&#xA;      function recurs(x) {&#xD;&#xA;        stack++;&#xD;&#xA;        var intgr = Math.floor(x);&#xD;&#xA;        var dec = (x - intgr);&#xD;&#xA;        if (dec < 0.0019 || stack > 20) return [intgr, 1];&#xD;&#xA;        var num = recurs(1 / dec);&#xD;&#xA;        return [intgr * num[0] + num[1], num[0]]&#xD;&#xA;      }&#xD;&#xA;      var t = recurs(fractional);&#xD;&#xA;      this.numerator = t[0];&#xD;&#xA;      this.denominator = t[1];&#xD;&#xA;    }&#xD;&#xA;    Fraction.prototype.toString = function() {&#xD;&#xA;      var l = this.sign.toString().length;&#xD;&#xA;      var sign = l === 2 ? '-' : '';&#xD;&#xA;      var whole = this.whole !== 0 ? this.sign * this.whole + ' ' : sign;&#xD;&#xA;      return simpler(whole, this.numerator, this.denominator);&#xD;&#xA;    }&#xD;&#xA;    function f() {&#xD;&#xA;      var text = $('#text').val();&#xD;&#xA;      var roundUp = 0.4;&#xD;&#xA;      var digit = (text * 1).toFixed(1);&#xD;&#xA;      var frac = new Fraction()&#xD;&#xA;      frac.convert(digit, false)&#xD;&#xA;      $('#result').html(frac.toString());&#xD;&#xA;    }&#xD;&#xA;    $('#text').on('change', function() {&#xD;&#xA;      f();&#xD;&#xA;    });&#xD;&#xA;    f();