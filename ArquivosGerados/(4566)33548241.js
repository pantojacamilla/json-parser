     takeStockLocationWithStatusRequestPath = @"/stocktake/stocktake/1/usr/1/locwithstatus";&#xD;&#xA;    RKObjectManager *objectManager = [RKObjectManager sharedManager];&#xD;&#xA;    [[NSURLCache sharedURLCache] removeAllCachedResponses];&#xD;&#xA;    // Initialize managed object model from bundle&#xD;&#xA;    NSManagedObjectModel *managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];&#xD;&#xA;    // Initialize managed object store&#xD;&#xA;    RKManagedObjectStore *managedObjectStore = [[RKManagedObjectStore alloc] initWithManagedObjectModel:managedObjectModel];&#xD;&#xA;    objectManager.managedObjectStore = managedObjectStore;&#xD;&#xA;    // Complete Core Data stack initialization&#xD;&#xA;    [managedObjectStore createPersistentStoreCoordinator];&#xD;&#xA;    NSString *storePath = [RKApplicationDataDirectory() stringByAppendingPathComponent:@"StockTakeDB.sqlite"];&#xD;&#xA;    NSString *seedPath = [[NSBundle mainBundle] pathForResource:@"StoreItemsDB" ofType:@"sqlite"];&#xD;&#xA;    NSError *error;&#xD;&#xA;    NSPersistentStore *persistentStore = [managedObjectStore addSQLitePersistentStoreAtPath:storePath fromSeedDatabaseAtPath:seedPath withConfiguration:nil options:nil error:&error];&#xD;&#xA;    NSAssert(persistentStore, @"Failed to add persistent store with error: %@", error);&#xD;&#xA;    // Create the managed object contexts&#xD;&#xA;    [managedObjectStore createManagedObjectContexts];&#xD;&#xA;    // Configure a managed object cache to ensure we do not create duplicate objects&#xD;&#xA;    managedObjectStore.managedObjectCache = [[RKInMemoryManagedObjectCache alloc] initWithManagedObjectContext:managedObjectStore.persistentStoreManagedObjectContext];&#xD;&#xA;    [objectManager addFetchRequestBlock:^NSFetchRequest *(NSURL *URL) {&#xD;&#xA;    RKPathMatcher *pathMatcher = [RKPathMatcher pathMatcherWithPattern:takeStockLocationWithStatusRequestPath];&#xD;&#xA;    NSDictionary *argsDict = nil;&#xD;&#xA;    BOOL match = [pathMatcher matchesPath:[URL relativePath] tokenizeQueryStrings:NO parsedArguments:&argsDict];&#xD;&#xA;    if (match) {&#xD;&#xA;    NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"RackStockTakeStatus"];&#xD;&#xA;    return fetchRequest;&#xD;&#xA;    }&#xD;&#xA;    return nil;&#xD;&#xA;    }];&#xD;&#xA;    RKEntityMapping *rackStockTakeStatusListMapping = [RKEntityMapping mappingForEntityForName:@"RackStockTakeStatus" inManagedObjectStore:managedObjectStore];&#xD;&#xA;    rackStockTakeStatusListMapping.identificationAttributes = @[@"stockTakeLocId"];&#xD;&#xA;    [rackStockTakeStatusListMapping addAttributeMappingsFromDictionary:&#xD;&#xA;    @{&#xD;&#xA;    @"stockTakeLocId" : @"stockTakeLocId",&#xD;&#xA;    @"stockTakeUuid" : @"stockTakeUuid",&#xD;&#xA;    @"locId" : @"locId",&#xD;&#xA;    @"locName" : @"locName",&#xD;&#xA;    @"status" : @"status",&#xD;&#xA;    @"stockTakeByUser" : @"stockTakeByUser",&#xD;&#xA;    @"stockTakeByUserId" : @"stockTakeByUserId",&#xD;&#xA;    @"beginTime" : @"beginTime",&#xD;&#xA;    @"percentCompleted" : @"percentCompleted"&#xD;&#xA;    }&#xD;&#xA;    ];&#xD;&#xA;    RKResponseDescriptor *rackStockTakeStatusListResponseDescriptor =&#xD;&#xA;    [RKResponseDescriptor responseDescriptorWithMapping:rackStockTakeStatusListMapping&#xD;&#xA;    method:RKRequestMethodGET&#xD;&#xA;    pathPattern:nil&#xD;&#xA;    keyPath:nil&#xD;&#xA;    statusCodes:RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful)&#xD;&#xA;    ];&#xD;&#xA;    [objectManager addResponseDescriptor:rackStockTakeStatusListResponseDescriptor];&#xD;&#xA;    then getting the objects:&#xD;&#xA;    NSString *requestPath = [NSString stringWithFormat:@"/stocktake/stocktake/%@/usr/1/locwithstatus",[defaults objectForKey:@"loggedInUserSelectedStoreId"]];&#xD;&#xA;    [[RKObjectManager sharedManager]&#xD;&#xA;    getObjectsAtPath:requestPath&#xD;&#xA;    parameters:nil&#xD;&#xA;    success: ^(RKObjectRequestOperation *operation, RKMappingResult *mappingResult) {&#xD;&#xA;    NSFetchRequest *request = [[NSFetchRequest alloc] init];&#xD;&#xA;    NSEntityDescription *entity = [NSEntityDescription entityForName:@"RackStockTakeStatus" inManagedObjectContext:[appDelegate takeStockRestKitManagedObjectContext]];&#xD;&#xA;    [request setEntity:entity];&#xD;&#xA;    NSError *error;&#xD;&#xA;    [[appDelegate takeStockRestKitManagedObjectContext] executeFetchRequest:request error:&error];&#xD;&#xA;    NSError *error;&#xD;&#xA;    if (![[self fetchedResultsController] performFetch:&error]) {&#xD;&#xA;    NSLog(@"Unresolved error %@, %@", error, [error userInfo]);&#xD;&#xA;    }&#xD;&#xA;    [self.tableView reloadData];&#xD;&#xA;    NSLog(@"requestDataItemsForStore - Mapping Success");&#xD;&#xA;    }&#xD;&#xA;    failure: ^(RKObjectRequestOperation *operation, NSError *error) {&#xD;&#xA;    RKLogError(@"Load failed with error: %@", error);&#xD;&#xA;    NSLog(@"requestDataItemsForStore - Loading Failed");&#xD;&#xA;    }&#xD;&#xA;    ];