    const chain = g => f => k => g(x => f(x) (k));&#xD;&#xA;    const of = x => k => k(x);&#xD;&#xA;    const id = x => x;&#xD;&#xA;    const Loop = x =>&#xD;&#xA;      ({value: x, done: false});&#xD;&#xA;    const Done = x =>&#xD;&#xA;      ({value: x, done: true});&#xD;&#xA;    const chainRec = f => x => {&#xD;&#xA;      let step = f(Loop, Done, x);&#xD;&#xA;      while (!step.done) {&#xD;&#xA;        step = f(Loop, Done, step.value);&#xD;&#xA;      }&#xD;&#xA;      return of(step.value);&#xD;&#xA;    };&#xD;&#xA;    const repeat_ = n => f => x => &#xD;&#xA;      chainRec((Loop, Done, [n, x]) => n === 0 ? Done(x) : Loop([n - 1, f(x)])) ([n, x]);&#xD;&#xA;    console.log(&#xD;&#xA;      repeat_(1e6) (n => n + 1) (0) (id) // 1000000&#xD;&#xA;    );