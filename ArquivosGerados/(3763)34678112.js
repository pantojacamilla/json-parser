    var treeData = [&#xD;&#xA;      {&#xD;&#xA;        "name": "Top Level",&#xD;&#xA;        "parent": "null",&#xD;&#xA;        "children": [&#xD;&#xA;          {&#xD;&#xA;            "name": "Level 2: A",&#xD;&#xA;            "parent": "Top Level",&#xD;&#xA;            "children": [&#xD;&#xA;              {&#xD;&#xA;                "name": "Son of A",&#xD;&#xA;                "parent": "Level 2: A"&#xD;&#xA;              },&#xD;&#xA;              {&#xD;&#xA;                "name": "Daughter of A",&#xD;&#xA;                "parent": "Level 2: A"&#xD;&#xA;              }&#xD;&#xA;            ]&#xD;&#xA;          },&#xD;&#xA;          {&#xD;&#xA;            "name": "Level 2: B",&#xD;&#xA;            "parent": "Top Level"&#xD;&#xA;          }&#xD;&#xA;        ]&#xD;&#xA;      }&#xD;&#xA;    ];&#xD;&#xA;    // ************** Generate the tree diagram	 *****************&#xD;&#xA;    var margin = {top: 20, right: 120, bottom: 20, left: 120},&#xD;&#xA;    	width = 960 - margin.right - margin.left,&#xD;&#xA;    	height = 500 - margin.top - margin.bottom;&#xD;&#xA;    	&#xD;&#xA;    var i = 0,&#xD;&#xA;    	duration = 750,&#xD;&#xA;    	root;&#xD;&#xA;    var tree = d3.layout.tree()&#xD;&#xA;    	.size([height, width]);&#xD;&#xA;    var diagonal = d3.svg.diagonal()&#xD;&#xA;    	.projection(function(d) { return [d.y, d.x]; });&#xD;&#xA;    var svg = d3.select("body").append("svg")&#xD;&#xA;    	.attr("width", width + margin.right + margin.left)&#xD;&#xA;    	.attr("height", height + margin.top + margin.bottom)&#xD;&#xA;      .append("g")&#xD;&#xA;    	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;    root = treeData[0];&#xD;&#xA;    root.x0 = height / 2;&#xD;&#xA;    root.y0 = 0;&#xD;&#xA;      &#xD;&#xA;    update(root);&#xD;&#xA;    d3.select(self.frameElement).style("height", "500px");&#xD;&#xA;    function update(source) {&#xD;&#xA;      // Compute the new tree layout.&#xD;&#xA;      var nodes = tree.nodes(root).reverse(),&#xD;&#xA;    	  links = tree.links(nodes);&#xD;&#xA;      // Normalize for fixed-depth.&#xD;&#xA;      nodes.forEach(function(d) { d.y = d.depth * 180; });&#xD;&#xA;      // Update the nodes…&#xD;&#xA;      var node = svg.selectAll("g.node")&#xD;&#xA;    	  .data(nodes, function(d) { return d.id || (d.id = ++i); });&#xD;&#xA;      // Enter any new nodes at the parent's previous position.&#xD;&#xA;      var nodeEnter = node.enter().append("g")&#xD;&#xA;    	  .attr("class", "node")&#xD;&#xA;    	  .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })&#xD;&#xA;    	  .on("click", click);&#xD;&#xA;      nodeEnter.append("circle")&#xD;&#xA;    	  .attr("r", 1e-6)&#xD;&#xA;    	  .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });&#xD;&#xA;      nodeEnter.append("text")&#xD;&#xA;    	  .attr("x", function(d) { return d.children || d._children ? -13 : 13; })&#xD;&#xA;    	  .attr("dy", ".35em")&#xD;&#xA;    	  .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })&#xD;&#xA;    	  .text(function(d) { return d.name; })&#xD;&#xA;    	  .style("fill-opacity", 1e-6);&#xD;&#xA;      // Transition nodes to their new position.&#xD;&#xA;      var nodeUpdate = node.transition()&#xD;&#xA;    	  .duration(duration)&#xD;&#xA;    	  .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });&#xD;&#xA;      nodeUpdate.select("circle")&#xD;&#xA;    	  .attr("r", 10)&#xD;&#xA;    	  .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });&#xD;&#xA;      nodeUpdate.select("text")&#xD;&#xA;    	  .style("fill-opacity", 1);&#xD;&#xA;      // Transition exiting nodes to the parent's new position.&#xD;&#xA;      var nodeExit = node.exit().transition()&#xD;&#xA;    	  .duration(duration)&#xD;&#xA;    	  .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })&#xD;&#xA;    	  .remove();&#xD;&#xA;      nodeExit.select("circle")&#xD;&#xA;    	  .attr("r", 1e-6);&#xD;&#xA;      nodeExit.select("text")&#xD;&#xA;    	  .style("fill-opacity", 1e-6);&#xD;&#xA;      // Update the links…&#xD;&#xA;      var link = svg.selectAll("path.link")&#xD;&#xA;    	  .data(links, function(d) { return d.target.id; });&#xD;&#xA;      // Enter any new links at the parent's previous position.&#xD;&#xA;      link.enter().insert("path", "g")&#xD;&#xA;    	  .attr("class", "link")&#xD;&#xA;    	  .attr("d", function(d) {&#xD;&#xA;    		var o = {x: source.x0, y: source.y0};&#xD;&#xA;    		return diagonal({source: o, target: o});&#xD;&#xA;    	  })&#xD;&#xA;          .on("click",removeNode); //remove node on click&#xD;&#xA;      &#xD;&#xA;      //function to remove node &#xD;&#xA;      &#xD;&#xA;      function removeNode()&#xD;&#xA;      {&#xD;&#xA;         this.remove();&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      // Transition links to their new position.&#xD;&#xA;      link.transition()&#xD;&#xA;    	  .duration(duration)&#xD;&#xA;    	  .attr("d", diagonal);&#xD;&#xA;      // Transition exiting nodes to the parent's new position.&#xD;&#xA;      link.exit().transition()&#xD;&#xA;    	  .duration(duration)&#xD;&#xA;    	  .attr("d", function(d) {&#xD;&#xA;    		var o = {x: source.x, y: source.y};&#xD;&#xA;    		return diagonal({source: o, target: o});&#xD;&#xA;    	  })&#xD;&#xA;    	  .remove();&#xD;&#xA;      // Stash the old positions for transition.&#xD;&#xA;      nodes.forEach(function(d) {&#xD;&#xA;    	d.x0 = d.x;&#xD;&#xA;    	d.y0 = d.y;&#xD;&#xA;      });&#xD;&#xA;    }&#xD;&#xA;    // Toggle children on click.&#xD;&#xA;    function click(d) {&#xD;&#xA;      if (d.children) {&#xD;&#xA;    	d._children = d.children;&#xD;&#xA;    	d.children = null;&#xD;&#xA;      } else {&#xD;&#xA;    	d.children = d._children;&#xD;&#xA;    	d._children = null;&#xD;&#xA;      }&#xD;&#xA;      update(d);&#xD;&#xA;    }