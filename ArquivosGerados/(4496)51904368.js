    function TaskRunner(concurrency) {&#xD;&#xA;        this.count = concurrency;&#xD;&#xA;        this.queue = [];&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      TaskRunner.prototype.push = function(task) {&#xD;&#xA;        if (this.count === 0) {&#xD;&#xA;          this.queue.push(task);&#xD;&#xA;        } else {&#xD;&#xA;          this.invoke(task);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      TaskRunner.prototype.invoke = function(task) {&#xD;&#xA;        task.call(null, this.done.bind(this));&#xD;&#xA;        this.count--;&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      TaskRunner.prototype.done = function(num) {&#xD;&#xA;        console.log(`After Executing done: ${num}`)&#xD;&#xA;        this.count++;&#xD;&#xA;        this.execute();&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      TaskRunner.prototype.execute = function() {&#xD;&#xA;        if (this.queue.length > 0) {&#xD;&#xA;          var task = this.queue.shift();&#xD;&#xA;          this.invoke(task);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      function factory(num) {&#xD;&#xA;        return function exampleSimpleTask(done) {&#xD;&#xA;          this.num = num;&#xD;&#xA;          console.log("task", "Before " + new Date().getTime());&#xD;&#xA;          setTimeout(done(num), 2000);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      var r = new TaskRunner(2);&#xD;&#xA;    r.push(factory(1));&#xD;&#xA;    r.push(factory(2));&#xD;&#xA;    r.push(factory(3));