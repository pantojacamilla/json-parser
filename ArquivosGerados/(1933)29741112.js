    angular.module('MyApp')&#xD;&#xA;      .controller('InboxCtrl', function($scope, InboxFactory) {&#xD;&#xA;        var counter = 0;&#xD;&#xA;        $scope.loadData = function() {&#xD;&#xA;          var promise = InboxFactory.getEvents(counter);&#xD;&#xA;          promise.then(function(result) {&#xD;&#xA;            $scope.events = result;&#xD;&#xA;          });&#xD;&#xA;          counter += 25;&#xD;&#xA;        };&#xD;&#xA;      });&#xD;&#xA;    angular.module('MyApp')&#xD;&#xA;      .factory('InboxFactory', function($http, $q) {&#xD;&#xA;        // Service logic&#xD;&#xA;        var defered = $q.defer();&#xD;&#xA;        function getUrl(count) {&#xD;&#xA;          return "api/inbox/get?request={'what':'Search','criteria':'inbox','criteriaId':null,'startTime':null,'endTime':null,'offset':" + count + ",'limit':25,'order':'event_time','direction':'DESC','source':''}";&#xD;&#xA;        }&#xD;&#xA;        function extract(result) {&#xD;&#xA;          return result.data.data;&#xD;&#xA;        }&#xD;&#xA;        // Public API here&#xD;&#xA;        return {&#xD;&#xA;          getEvents: function(count) {&#xD;&#xA;            $http.get(getUrl(count)).then(&#xD;&#xA;              function(result) {&#xD;&#xA;                defered.resolve(extract(result))&#xD;&#xA;              }, function(err) {&#xD;&#xA;                defered.reject(err);&#xD;&#xA;              }&#xD;&#xA;            );&#xD;&#xA;            return defered.promise;&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;      });&#xD;&#xA;    angular.module('MyApp')&#xD;&#xA;      .directive('infiniteScroll', ['$timeout',&#xD;&#xA;        function(timeout) {&#xD;&#xA;          return {&#xD;&#xA;            link: function(scope, element, attr) {&#xD;&#xA;              var&#xD;&#xA;                lengthThreshold = attr.scrollThreshold || 50,&#xD;&#xA;                timeThreshold = attr.timeThreshold || 400,&#xD;&#xA;                handler = scope.$eval(attr.infiniteScroll),&#xD;&#xA;                promise = null,&#xD;&#xA;                lastRemaining = 9999;&#xD;&#xA;              lengthThreshold = parseInt(lengthThreshold, 10);&#xD;&#xA;              timeThreshold = parseInt(timeThreshold, 10);&#xD;&#xA;              if (!handler || !components.isFunction(handler)) {&#xD;&#xA;                handler = components.noop;&#xD;&#xA;              }&#xD;&#xA;              element.bind('scroll', function() {&#xD;&#xA;                var&#xD;&#xA;                  remaining = element[0].scrollHeight - (element[0].clientHeight + element[0].scrollTop);&#xD;&#xA;                //if we have reached the threshold and we scroll down&#xD;&#xA;                if (remaining < lengthThreshold && (remaining - lastRemaining) < 0) {&#xD;&#xA;                  //if there is already a timer running which has no expired yet we have to cancel it and restart the timer&#xD;&#xA;                  if (promise !== null) {&#xD;&#xA;                    timeout.cancel(promise);&#xD;&#xA;                  }&#xD;&#xA;                  promise = timeout(function() {&#xD;&#xA;                    handler();&#xD;&#xA;                    promise = null;&#xD;&#xA;                  }, timeThreshold);&#xD;&#xA;                }&#xD;&#xA;                lastRemaining = remaining;&#xD;&#xA;              });&#xD;&#xA;            }&#xD;&#xA;          };&#xD;&#xA;        }&#xD;&#xA;      ]);