    //import liraries&#xD;&#xA;    import React, {Component} from 'react';&#xD;&#xA;    import {View, StyleSheet, Alert, ScrollView, RefreshControl, ListView, ActivityIndicator} from 'react-native';&#xD;&#xA;    import PropTypes from 'prop-types';&#xD;&#xA;    import ViewPropTypes from 'react-native';&#xD;&#xA;    import StatusBar from '../components/common/StatusBar';&#xD;&#xA;    import Header from '../components/common/Header';&#xD;&#xA;    import Subtitle from '../components/common/Subtitle';&#xD;&#xA;    import ProjectThumbnail from '../components/project/ProjectThumbnail';&#xD;&#xA;    import FilterButton from '../components/common/BottomButton';&#xD;&#xA;    import mockData from "../data/mockData";&#xD;&#xA;    import * as globalStyles from '../styles/global';&#xD;&#xA;    // create a component&#xD;&#xA;    export default class ProjectList extends Component {&#xD;&#xA;      constructor(props) {&#xD;&#xA;        super(props);&#xD;&#xA;        this.ds = new ListView.DataSource({&#xD;&#xA;          rowHasChanged: (row1, row2) => row1.title !== row2.title &#xD;&#xA;        });&#xD;&#xA;        this.state = {&#xD;&#xA;          dataSource: this.ds.cloneWithRows(props.projects), &#xD;&#xA;          initialLoading: false, &#xD;&#xA;          refreshing: false&#xD;&#xA;        };&#xD;&#xA;        console.log(this.state.dataSource);&#xD;&#xA;        this.renderRow = this.renderRow.bind(this);&#xD;&#xA;        this.refresh = this.refresh.bind(this); &#xD;&#xA;      }&#xD;&#xA;      componentWillMount() { &#xD;&#xA;        this.refresh();&#xD;&#xA;      }&#xD;&#xA;      componentWillReceiveProps(nextProps) { &#xD;&#xA;        this.setState({&#xD;&#xA;          dataSource: this.state.dataSource.cloneWithRows(nextProps.projects),&#xD;&#xA;          initialLoading: false&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      refresh() { &#xD;&#xA;        if (this.props.loadProjects) {&#xD;&#xA;          this.props.loadProjects();&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      renderRow(rowData, ...rest) { &#xD;&#xA;        const index = parseInt(rest[1], 10);&#xD;&#xA;        return (&#xD;&#xA;          <ProjectThumbnail&#xD;&#xA;            style={styles.ProjectThumbnail}&#xD;&#xA;            index={index}&#xD;&#xA;            {...rowData} &#xD;&#xA;          />&#xD;&#xA;        );&#xD;&#xA;      }&#xD;&#xA;      render() {&#xD;&#xA;        const {&#xD;&#xA;          listStyles = globalStyles.COMMON_STYLES.pageContainer,&#xD;&#xA;          showLoadingSpinner&#xD;&#xA;        } = this.props;&#xD;&#xA;        const { initialLoading, refreshing, dataSource } = this.state;&#xD;&#xA;        return (&#xD;&#xA;          (initialLoading && showLoadingSpinner&#xD;&#xA;            ? (&#xD;&#xA;              <View style={[listStyles, styles.loadingContainer]}>&#xD;&#xA;                <ActivityIndicator&#xD;&#xA;                  animating&#xD;&#xA;                  size="small"&#xD;&#xA;                  {...this.props}&#xD;&#xA;                />&#xD;&#xA;              </View>&#xD;&#xA;            ) : (&#xD;&#xA;              <View style={styles.container}>&#xD;&#xA;                <StatusBar />&#xD;&#xA;                <Header navigation={this.props.navigation} />&#xD;&#xA;                <Subtitle subtitle="프로젝트" />&#xD;&#xA;                <ListView&#xD;&#xA;                  refreshControl={&#xD;&#xA;                    <RefreshControl&#xD;&#xA;                      refreshing={refreshing}&#xD;&#xA;                      onRefresh={this.refresh}&#xD;&#xA;                    />&#xD;&#xA;                  }&#xD;&#xA;                  enableEmptySections &#xD;&#xA;                  dataSource={dataSource} &#xD;&#xA;                  renderRow={this.renderRow}&#xD;&#xA;                  style={listStyles}&#xD;&#xA;                />&#xD;&#xA;                &#xD;&#xA;                <FilterButton&#xD;&#xA;                  title="필터 적용"&#xD;&#xA;                  IconName="ios-options"&#xD;&#xA;                  onPress={() => alert ('button Pressed')}&#xD;&#xA;                />&#xD;&#xA;              </View>&#xD;&#xA;            )&#xD;&#xA;          )&#xD;&#xA;        );&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    ProjectList.propTypes = {&#xD;&#xA;      projects: PropTypes.arrayOf(PropTypes.object),&#xD;&#xA;      listStyles: ViewPropTypes.style,&#xD;&#xA;      loadProjects: PropTypes.func,&#xD;&#xA;      showLoadingSpinner: PropTypes.bool &#xD;&#xA;    };&#xD;&#xA;    ProjectList.defaultProps = {&#xD;&#xA;      showLoadingSpinner: true &#xD;&#xA;    };&#xD;&#xA;    const styles = StyleSheet.create ({&#xD;&#xA;      ProjectThumbnail: {&#xD;&#xA;        marginBottom: 20&#xD;&#xA;      },&#xD;&#xA;      container: {&#xD;&#xA;        flex: 1,&#xD;&#xA;      },&#xD;&#xA;      loadingContainer: {&#xD;&#xA;        alignItems: 'center',&#xD;&#xA;        justifyContent: 'center'&#xD;&#xA;      },&#xD;&#xA;    });