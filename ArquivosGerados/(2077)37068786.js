    #!/usr/bin/python&#xD;&#xA;    import sys&#xD;&#xA;    from time import time&#xD;&#xA;    import logging&#xD;&#xA;    # Display progress logs on stdout&#xD;&#xA;    logging.basicConfig(level = logging.DEBUG, format = '%(asctime)s %(message)s')&#xD;&#xA;    sys.path.append("../DatasetProcessing/")&#xD;&#xA;    from vectorize_split_dataset import preprocess&#xD;&#xA;    ### features_train and features_test are the features&#xD;&#xA;    for the training and testing datasets, respectively### labels_train and labels_test are the corresponding item labels&#xD;&#xA;    features_train, features_test, labels_train, labels_test = preprocess()&#xD;&#xA;    #########################################################&#xD;&#xA;    from sklearn.naive_bayes import GaussianNB&#xD;&#xA;    clf = GaussianNB()&#xD;&#xA;    t0 = time()&#xD;&#xA;    clf.fit(features_train, labels_train)&#xD;&#xA;    pred = clf.predict(features_test)&#xD;&#xA;    print("training time:", round(time() - t0, 3), "s")&#xD;&#xA;    print(clf.score(features_test, labels_test))&#xD;&#xA;    ## Printing Metrics&#xD;&#xA;    for Training and Testing&#xD;&#xA;    print("No. of Testing Features:" + str(len(features_test)))&#xD;&#xA;    print("No. of Testing Features Label:" + str(len(labels_test)))&#xD;&#xA;    print("No. of Training Features:" + str(len(features_train)))&#xD;&#xA;    print("No. of Training Features Label:" + str(len(labels_train)))&#xD;&#xA;    print("No. of Predicted Features:" + str(len(pred)))&#xD;&#xA;    ## Calculating Classifier Performance&#xD;&#xA;    from sklearn.metrics import classification_report&#xD;&#xA;    y_true = labels_test&#xD;&#xA;    y_pred = pred&#xD;&#xA;    labels = ['0', '1']&#xD;&#xA;    target_names = ['class 0', 'class 1']&#xD;&#xA;    print(classification_report(y_true, y_pred, target_names = target_names, labels = labels))&#xD;&#xA;    # How to predict label of a new text&#xD;&#xA;    new_text = "You won a lottery at UK lottery commission. Reply to claim it"