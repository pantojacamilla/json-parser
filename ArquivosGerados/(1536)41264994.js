    var scene, renderer, camera;&#xD;&#xA;    var redBox, blueBox, redBbox, blueBbox;&#xD;&#xA;    var controls;&#xD;&#xA;    init();&#xD;&#xA;    animate();&#xD;&#xA;    function init()&#xD;&#xA;    {&#xD;&#xA;    	renderer = new THREE.WebGLRenderer( {antialias:true} );&#xD;&#xA;    	var width = window.innerWidth;&#xD;&#xA;    	var height = window.innerHeight;&#xD;&#xA;    	renderer.setSize (width, height);&#xD;&#xA;    	document.body.appendChild (renderer.domElement);&#xD;&#xA;    	scene = new THREE.Scene();&#xD;&#xA;    	&#xD;&#xA;    	camera = new THREE.PerspectiveCamera (45, width/height, 1, 10000);&#xD;&#xA;    	camera.position.y = 50;&#xD;&#xA;    	camera.position.z = 50;&#xD;&#xA;    	camera.position.x = 50;&#xD;&#xA;    	camera.lookAt (new THREE.Vector3(0,0,0));&#xD;&#xA;      controls = new THREE.OrbitControls (camera, renderer.domElement);&#xD;&#xA;      &#xD;&#xA;      redBox = new THREE.Mesh(&#xD;&#xA;        new THREE.BoxGeometry(3, 3, 3),&#xD;&#xA;        new THREE.MeshBasicMaterial({color: 0xff00000})//RED box&#xD;&#xA;      );&#xD;&#xA;      redBox.position.set(3, 3, 3);&#xD;&#xA;      redBbox = new THREE.Box3(new THREE.Vector3(), new THREE.Vector3());&#xD;&#xA;      redBbox.setFromObject(redBox);&#xD;&#xA;      const redBoxHelper = new THREE.BoxHelper(redBox, 0xFFFFFF);&#xD;&#xA;      scene.add(redBox, redBoxHelper);&#xD;&#xA;      blueBox = new THREE.Mesh(&#xD;&#xA;        new THREE.BoxGeometry(3, 2, 5),&#xD;&#xA;        new THREE.MeshBasicMaterial({color: 0x00000ff})//BLUE box&#xD;&#xA;      );&#xD;&#xA;      blueBox.position.set(3, 3, 3);&#xD;&#xA;      blueBbox = new THREE.Box3(new THREE.Vector3(), new THREE.Vector3());&#xD;&#xA;      blueBbox.setFromObject(blueBox);&#xD;&#xA;      const blueBoxHelper = new THREE.BoxHelper(blueBox, 0xFFFFFF);&#xD;&#xA;      scene.add(blueBox, blueBoxHelper);&#xD;&#xA;    	&#xD;&#xA;    	window.addEventListener ('resize', onWindowResize, false);&#xD;&#xA;    }&#xD;&#xA;    function onWindowResize ()&#xD;&#xA;    {&#xD;&#xA;    	camera.aspect = window.innerWidth / window.innerHeight;&#xD;&#xA;    	camera.updateProjectionMatrix();&#xD;&#xA;    	renderer.setSize (window.innerWidth, window.innerHeight);&#xD;&#xA;    }&#xD;&#xA;    function animate()&#xD;&#xA;    {&#xD;&#xA;    	//controls.update();&#xD;&#xA;      requestAnimationFrame ( animate );&#xD;&#xA;      &#xD;&#xA;      if(redBbox.intersectsBox(blueBbox)){&#xD;&#xA;      	console.log('intersection');&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;    	renderer.render (scene, camera);&#xD;&#xA;    }