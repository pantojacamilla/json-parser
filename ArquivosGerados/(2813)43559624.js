    function split(input) {&#xD;&#xA;        return ((((input.split(")(")).toString()).replace(/\)/g, "")).replace(/\(/g, "")).split(','); }&#xD;&#xA;    function strVali(str) {&#xD;&#xA;        str = str.replace(/\s+/g, "");&#xD;&#xA;        var parts = str.match(/[+\-]?[^+\-]+/g);&#xD;&#xA;        // accumulate the results&#xD;&#xA;        return parts.reduce(function(res, part) {&#xD;&#xA;            var coef = parseFloat(part) || +(part[0] + "1") || 1;&#xD;&#xA;            var x = part.indexOf('x');&#xD;&#xA;            var power = x === -1 ?&#xD;&#xA;                0:&#xD;&#xA;                part[x + 1] === "^" ?&#xD;&#xA;                    +part.slice(x + 2) :&#xD;&#xA;                    1;&#xD;&#xA;            res[power] = (res[power] || 0) + coef;&#xD;&#xA;            return res;&#xD;&#xA;        }, {});&#xD;&#xA;    }&#xD;&#xA;    function getCoeff(coeff) {&#xD;&#xA;        var powers = Object.keys(strVali(coeff));&#xD;&#xA;        var max = Math.max.apply(null, powers);&#xD;&#xA;        var result = [];&#xD;&#xA;        for(var i = max; i >= 0; i--)&#xD;&#xA;            result.push(strVali(coeff)[i] || 0);&#xD;&#xA;        return result; } &#xD;&#xA;    function evaluate(expression) {&#xD;&#xA;        var term1 = getCoeff(expression[0]);&#xD;&#xA;        var term2 = getCoeff(expression[1]);&#xD;&#xA;        var expand = "";&#xD;&#xA;        for ( var j = 0; j < term1.length; j++ ) {&#xD;&#xA;            for ( var i = 0; i < term2.length; i++ ) {&#xD;&#xA;                expand += Number(term1[j] * term2[i]) + 'x^' + (Number(term1.length) - 1 - j + Number(term2.length) - 1 - i) + '+';&#xD;&#xA;            }}&#xD;&#xA;        expand = expand.replace(/[^\d]+0x\^[\d+]/g,'');&#xD;&#xA;        var result = getCoeff(expand);&#xD;&#xA;        var final = "";&#xD;&#xA;        for ( var z = 0; z < result.length; z++ ) {&#xD;&#xA;            final += result[z] + 'x^ {' + Number(result.length - 1 - z) + "} +";&#xD;&#xA;        }&#xD;&#xA;        final = ((((((((final.replace(/[\+|\-+]0x\^\{[\d+]\}/g,'')).replace(/\+-/g,'-')).replace(/\+/g,' + ')).replace(/\^1/g,'')).replace(/1x/g,'x')).replace(/-/g,' - ')).replace(/[^\d+]x\^\{0\}/g,' 1')).replace(/x\^0/g,'')).slice(0,-3);&#xD;&#xA;        final = "$$" + final + "$$";&#xD;&#xA;        document.getElementById('result').innerHTML = final;&#xD;&#xA;        MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.getElementById('result')]);&#xD;&#xA;    }&#xD;&#xA;    function caller() {&#xD;&#xA;        var input = document.getElementById('input').value;&#xD;&#xA;        evaluate(split(input)); }