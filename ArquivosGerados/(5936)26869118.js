    public class LinkedListIntro {&#xD;&#xA;    //print method &#xD;&#xA;    	public static void print(Node temp)&#xD;&#xA;    {&#xD;&#xA;    System.out.print("[");&#xD;&#xA;    while(temp.getNext() != null)&#xD;&#xA;    {&#xD;&#xA;    System.out.print(temp.getData()+", ");&#xD;&#xA;    temp = temp.getNext();&#xD;&#xA;    }&#xD;&#xA;    System.out.println(temp.getData()+"]");&#xD;&#xA;    }&#xD;&#xA;    	public static void main(String[] args) {&#xD;&#xA;      &#xD;&#xA;    Node start = null;&#xD;&#xA;    Node temp = null;&#xD;&#xA;      &#xD;&#xA;    for(int i=1; i<=5; i++)&#xD;&#xA;    {&#xD;&#xA;    if(start == null)&#xD;&#xA;    {&#xD;&#xA;    start = new Node(i);&#xD;&#xA;    temp = start;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;    temp.setNext(new Node(i));&#xD;&#xA;    temp = temp.getNext();&#xD;&#xA;    }&#xD;&#xA;    }&#xD;&#xA;    //3. printing data&#xD;&#xA;    print(start); &#xD;&#xA;      &#xD;&#xA;    //4. removing 4  &#xD;&#xA;    temp = start;&#xD;&#xA;    Node n = temp.getNext();&#xD;&#xA;      &#xD;&#xA;    while(n.getNext() != null)&#xD;&#xA;    {&#xD;&#xA;    if((int)n.getData() == 4)&#xD;&#xA;    {&#xD;&#xA;    temp.setNext(n.getNext());&#xD;&#xA;    n=null;&#xD;&#xA;    break;&#xD;&#xA;    }&#xD;&#xA;    temp = temp.getNext();&#xD;&#xA;    n=n.getNext();&#xD;&#xA;    }&#xD;&#xA;    //5. printing data again after removing 4&#xD;&#xA;    print(start); &#xD;&#xA;      &#xD;&#xA;    //6. adding 100 between 1 and 2  &#xD;&#xA;    temp = start;&#xD;&#xA;    Node n1 = temp.getNext();&#xD;&#xA;      &#xD;&#xA;    while(n1.getNext() != null)&#xD;&#xA;    {&#xD;&#xA;    if((int)temp.getData() == 1)&#xD;&#xA;    {&#xD;&#xA;    temp.setNext(new Node(100));&#xD;&#xA;    temp = temp.getNext();&#xD;&#xA;    temp.setNext(n1);&#xD;&#xA;    }&#xD;&#xA;    temp = temp.getNext();&#xD;&#xA;    n1=n1.getNext();&#xD;&#xA;    }&#xD;&#xA;      &#xD;&#xA;    //7. printing data again after adding 100&#xD;&#xA;    print(start); &#xD;&#xA;      &#xD;&#xA;    //8. removing first node&#xD;&#xA;    temp = start;&#xD;&#xA;    start = start.getNext();&#xD;&#xA;    temp = null;&#xD;&#xA;    //printing data after removing 1st node&#xD;&#xA;    print(start); &#xD;&#xA;      &#xD;&#xA;    //9. add 0 to beginning&#xD;&#xA;    temp = start;&#xD;&#xA;    start = new Node(0);&#xD;&#xA;    start.setNext(temp);&#xD;&#xA;    //printing the final data&#xD;&#xA;    print(start); &#xD;&#xA;      &#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;---&#xD;&#xA;    public class Node<E>&#xD;&#xA;    {&#xD;&#xA;            private E data;&#xD;&#xA;            private Node next;&#xD;&#xA;            public Node(E data)&#xD;&#xA;            {&#xD;&#xA;                    this.data = data;&#xD;&#xA;                    this.next = null;&#xD;&#xA;            }&#xD;&#xA;            public E getData()&#xD;&#xA;            {&#xD;&#xA;                    return data;&#xD;&#xA;            }&#xD;&#xA;            public Node getNext()&#xD;&#xA;            {&#xD;&#xA;                    return next;&#xD;&#xA;            }&#xD;&#xA;            public void setNext(Node next)&#xD;&#xA;            {&#xD;&#xA;                    this.next = next;&#xD;&#xA;            }&#xD;&#xA;            public String toString()&#xD;&#xA;            {&#xD;&#xA;                    return data.toString();&#xD;&#xA;            }&#xD;&#xA;    }