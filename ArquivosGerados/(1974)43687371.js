    /**&#xD;&#xA;    * Very basic means of dispatching messages from event generators to interested subscribers&#xD;&#xA;    */&#xD;&#xA;    class GlobalBroadcaster {&#xD;&#xA;      constructor() {&#xD;&#xA;        this.events = {};&#xD;&#xA;      }&#xD;&#xA;      /**&#xD;&#xA;       * Called by event generators to inform subscribers.&#xD;&#xA;       *&#xD;&#xA;       * @param string event: a string identifying the event name&#xD;&#xA;       * @param mix data: message to communicate to subsribers&#xD;&#xA;       */&#xD;&#xA;      dispatch(event, data) {&#xD;&#xA;        if (!this.events[event]) return; // no subscribers&#xD;&#xA;        this.events[event].forEach(subscriber => subscriber(data));&#xD;&#xA;      }&#xD;&#xA;      /**&#xD;&#xA;       * Means to subscribe a callback function to a given event.&#xD;&#xA;       * @param string event: a string identifying the event name&#xD;&#xA;       * @param function subscriber: a function to call back when the given event takes place&#xD;&#xA;       */&#xD;&#xA;      subscribe(event, subscriber) {&#xD;&#xA;        if (!this.events[event]) this.events[event] = []; // new event&#xD;&#xA;        this.events[event].push(subscriber);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    var globalBroadcaster = new GlobalBroadcaster();