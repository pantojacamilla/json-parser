    import { Component } from '@angular/core';&#xD;&#xA;    import { async, inject, TestBed } from '@angular/core/testing';&#xD;&#xA;    import { BaseRequestOptions, ConnectionBackend, Http } from '@angular/http';&#xD;&#xA;    import { MockBackend } from '@angular/http/testing';&#xD;&#xA;    import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';&#xD;&#xA;    import { RouterTestingModule } from '@angular/router/testing';&#xD;&#xA;    import { Observable } from 'rxjs/Rx';&#xD;&#xA;    import { RegistrationService } from '../shared/services/registration';&#xD;&#xA;    import { Login } from './login';&#xD;&#xA;    @Component({&#xD;&#xA;      template: ''&#xD;&#xA;    })&#xD;&#xA;    class Register { }&#xD;&#xA;    @Component({&#xD;&#xA;      template: ''&#xD;&#xA;    })&#xD;&#xA;    class UserList { }&#xD;&#xA;    class MockRegistrationService {&#xD;&#xA;      loginUser(user) {&#xD;&#xA;        return Observable.of({&#xD;&#xA;          username: 'TestUser1',&#xD;&#xA;          password: 'TestPassword1'&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    describe('Login', () => {&#xD;&#xA;      let mockRegistrationService = new MockRegistrationService();&#xD;&#xA;      beforeEach(() => TestBed.configureTestingModule({&#xD;&#xA;        declarations: [&#xD;&#xA;          Login,&#xD;&#xA;          Register,&#xD;&#xA;          UserList&#xD;&#xA;        ],&#xD;&#xA;        providers: [&#xD;&#xA;          Login,&#xD;&#xA;          { provide: RegistrationService, useValue: mockRegistrationService }&#xD;&#xA;        ],&#xD;&#xA;        imports: [&#xD;&#xA;          ReactiveFormsModule,&#xD;&#xA;          RouterTestingModule.withRoutes([&#xD;&#xA;            { path: 'register', component: Register },&#xD;&#xA;            { path: 'admin/userlist', component: UserList }&#xD;&#xA;          ])&#xD;&#xA;        ]&#xD;&#xA;      }));&#xD;&#xA;      it('should successfully login', async(() => {&#xD;&#xA;        let fixture = TestBed.createComponent(Login);&#xD;&#xA;        let loginComponent = fixture.componentInstance;&#xD;&#xA;        fixture.detectChanges();&#xD;&#xA;        loginComponent.login({&#xD;&#xA;          username: 'TestUser1',&#xD;&#xA;          password: 'TestPassword1'&#xD;&#xA;        });&#xD;&#xA;        expect(loginComponent.successMessage).toEqual('Login successful');&#xD;&#xA;        expect(loginComponent.errorMessage).toEqual('');&#xD;&#xA;      }));&#xD;&#xA;    });