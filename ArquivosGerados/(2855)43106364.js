    'use strict';&#xD;&#xA;    angular.module( "ngAutocomplete", [])&#xD;&#xA;      .directive('ngAutocomplete', function() {&#xD;&#xA;        return {&#xD;&#xA;          require: 'ngModel',&#xD;&#xA;          scope: {&#xD;&#xA;            ngModel: '=',&#xD;&#xA;            options: '=?',&#xD;&#xA;            details: '=?',&#xD;&#xA;            setFn: '&'&#xD;&#xA;          },&#xD;&#xA;          link: function(scope, element, attrs, controller) {&#xD;&#xA;            //options for autocomplete&#xD;&#xA;            var opts&#xD;&#xA;            var watchEnter = false&#xD;&#xA;            //convert options provided to opts&#xD;&#xA;            var initOpts = function() {&#xD;&#xA;              opts = {}&#xD;&#xA;              if (scope.options) {&#xD;&#xA;                if (scope.options.watchEnter !== true) {&#xD;&#xA;                  watchEnter = false&#xD;&#xA;                } else {&#xD;&#xA;                  watchEnter = true&#xD;&#xA;                }&#xD;&#xA;                if (scope.options.types) {&#xD;&#xA;                  opts.types = []&#xD;&#xA;                  opts.types.push(scope.options.types)&#xD;&#xA;                  scope.gPlace.setTypes(opts.types)&#xD;&#xA;                } else {&#xD;&#xA;                  scope.gPlace.setTypes([])&#xD;&#xA;                }&#xD;&#xA;                if (scope.options.bounds) {&#xD;&#xA;                  opts.bounds = scope.options.bounds&#xD;&#xA;                  scope.gPlace.setBounds(opts.bounds)&#xD;&#xA;                } else {&#xD;&#xA;                  scope.gPlace.setBounds(null)&#xD;&#xA;                }&#xD;&#xA;                if (scope.options.country) {&#xD;&#xA;                  opts.componentRestrictions = {&#xD;&#xA;                    country: scope.options.country&#xD;&#xA;                  }&#xD;&#xA;                  scope.gPlace.setComponentRestrictions(opts.componentRestrictions)&#xD;&#xA;                } else {&#xD;&#xA;                  scope.gPlace.setComponentRestrictions(null)&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;            if (scope.gPlace == undefined) {&#xD;&#xA;              scope.gPlace = new google.maps.places.Autocomplete(element[0], {});&#xD;&#xA;            }&#xD;&#xA;            google.maps.event.addListener(scope.gPlace, 'place_changed', function() {&#xD;&#xA;              var result = scope.gPlace.getPlace();&#xD;&#xA;              //hack to make sure we have an object to pass to ensure we can get results from the called function activateGetPlace&#xD;&#xA;              if( result === undefined ) {&#xD;&#xA;                result = { name: element.val() }&#xD;&#xA;              }&#xD;&#xA;              console.log("the result", result);&#xD;&#xA;              if (result !== undefined) {&#xD;&#xA;                if (result.address_components !== undefined) {&#xD;&#xA;                  scope.$apply(function() {&#xD;&#xA;                    scope.details = result;&#xD;&#xA;                    controller.$setViewValue(element.val());&#xD;&#xA;                  });&#xD;&#xA;                }&#xD;&#xA;                else {&#xD;&#xA;                  if (watchEnter) {&#xD;&#xA;                    getPlace(result)&#xD;&#xA;                  }&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            })&#xD;&#xA;            //function to get retrieve the autocompletes first result using the AutocompleteService&#xD;&#xA;            var getPlace = function(result) {&#xD;&#xA;              var autocompleteService = new google.maps.places.AutocompleteService();&#xD;&#xA;              if (result.name.length > 0){&#xD;&#xA;                autocompleteService.getPlacePredictions(&#xD;&#xA;                  {&#xD;&#xA;                    input: result.name,&#xD;&#xA;                    offset: result.name.length,&#xD;&#xA;                    types: opts.types,&#xD;&#xA;                		componentRestrictions: opts.componentRestrictions&#xD;&#xA;                  },&#xD;&#xA;                  function listentoresult(list, status) {&#xD;&#xA;                    if(list == null || list.length == 0) {&#xD;&#xA;                      scope.$apply(function() {&#xD;&#xA;                        scope.details = null;&#xD;&#xA;                      });&#xD;&#xA;                    } else {&#xD;&#xA;                      var placesService = new google.maps.places.PlacesService(element[0]);&#xD;&#xA;                      placesService.getDetails(&#xD;&#xA;                        {'reference': list[0].reference},&#xD;&#xA;                        function detailsresult(detailsResult, placesServiceStatus) {&#xD;&#xA;                          if (placesServiceStatus == google.maps.GeocoderStatus.OK) {&#xD;&#xA;                            scope.$apply(function() {&#xD;&#xA;                              controller.$setViewValue(detailsResult.formatted_address);&#xD;&#xA;                              element.val(detailsResult.formatted_address);&#xD;&#xA;                              scope.details = detailsResult;&#xD;&#xA;                              //on focusout the value reverts, need to set it again.&#xD;&#xA;                              var watchFocusOut = element.on('focusout', function(event) {&#xD;&#xA;                                element.val(detailsResult.formatted_address);&#xD;&#xA;                                element.unbind('focusout')&#xD;&#xA;                              })&#xD;&#xA;                            });&#xD;&#xA;                          }&#xD;&#xA;                        }&#xD;&#xA;                      );&#xD;&#xA;                    }&#xD;&#xA;                  });&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;            controller.$render = function () {&#xD;&#xA;              var location = controller.$viewValue;&#xD;&#xA;              element.val(location);&#xD;&#xA;            };&#xD;&#xA;            //watch options provided to directive&#xD;&#xA;            scope.watchOptions = function () {&#xD;&#xA;              return scope.options&#xD;&#xA;            };&#xD;&#xA;            scope.$watch(scope.watchOptions, function () {&#xD;&#xA;              initOpts()&#xD;&#xA;            }, true);&#xD;&#xA;            scope.activateGetPlace = function() {&#xD;&#xA;              google.maps.event.trigger(scope.gPlace, 'place_changed');&#xD;&#xA;            }&#xD;&#xA;            scope.setFn({theDirFn: scope.activateGetPlace});&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;      });&#xD;&#xA;      &#xD;&#xA;      var mechanicsearch = angular.module('mechanicsearch', ['ngRoute','ngResource','ngAutocomplete']),&#xD;&#xA;        radiusOptions = [];&#xD;&#xA;    mechanicsearch.run(function($rootScope) {&#xD;&#xA;      $rootScope.$on('handleActiveJobsPanel', function(event, args) {&#xD;&#xA;          $rootScope.$broadcast('activateJobsPanel', args);&#xD;&#xA;      });&#xD;&#xA;      $rootScope.$on('handleActiveFinalise', function(event, args) {&#xD;&#xA;          $rootScope.$broadcast('activateFinalisePanel', args);&#xD;&#xA;      });&#xD;&#xA;      $rootScope.$on('handleActiveSearch', function(event, args) {&#xD;&#xA;          $rootScope.$broadcast('activateSearchPanel', args);&#xD;&#xA;      });&#xD;&#xA;    });&#xD;&#xA;    mechanicsearch.filter('htmlToPlaintext', function() {&#xD;&#xA;      return function(text) {&#xD;&#xA;        return  text ? String(text).replace(/<[^>]+>/gm, '') : '';&#xD;&#xA;      };&#xD;&#xA;    });&#xD;&#xA;    // mechFactory service&#xD;&#xA;    mechanicsearch.factory('mechFactory', function($resource,$window) {&#xD;&#xA;        var mechanics = [];&#xD;&#xA;        var jobs = [];&#xD;&#xA;        var addMechanic = function(mechanic){&#xD;&#xA;          mechanics.push(mechanic);&#xD;&#xA;        };&#xD;&#xA;        var getAllMechanics = function(){&#xD;&#xA;          return mechanics;&#xD;&#xA;        };&#xD;&#xA;        var removeAllMechanics = function() {&#xD;&#xA;          mechanics = [];&#xD;&#xA;        }&#xD;&#xA;        var addJob = function(job) {&#xD;&#xA;          jobs.push(job);&#xD;&#xA;        }&#xD;&#xA;        var getAllJobs = function() {&#xD;&#xA;          return jobs;&#xD;&#xA;        }&#xD;&#xA;        var removeAllJobs = function() {&#xD;&#xA;          jobs = [];&#xD;&#xA;        }&#xD;&#xA;        return {&#xD;&#xA;          getMechanics: function(location,radius) {&#xD;&#xA;            return $resource('/ajax/api.cfm?api=mechanic&function=getMechanicByLocation&lat=:lat&lng=:lng&radius=:radius' ).get({lat:location.lat,lng:location.lng,radius:radius});&#xD;&#xA;          },&#xD;&#xA;          getJobs: function() {&#xD;&#xA;            return $resource('/ajax/api.cfm?api=job&function=getJobsAssignedtoWorkshop' ).get();&#xD;&#xA;          },&#xD;&#xA;          sendMechanicsJobNotifications: function(mechanics, jobs) {&#xD;&#xA;            return $resource('/ajax/api.cfm?api=job&function=sendMechanicsJobNotifications&mechanics=:mechanics&jobs=:jobs' ).get({mechanics:mechanics.toString(),jobs:jobs.toString()});&#xD;&#xA;          },&#xD;&#xA;          addMechanic: addMechanic,&#xD;&#xA;          removeAllMechanics: removeAllMechanics,&#xD;&#xA;          getAllMechanics: getAllMechanics,&#xD;&#xA;          addJob: addJob,&#xD;&#xA;          removeAllJobs: removeAllJobs,&#xD;&#xA;          getAllJobs: getAllJobs&#xD;&#xA;        }&#xD;&#xA;    });&#xD;&#xA;    mechanicsearch.controller('SearchCtrl', ['$timeout', '$scope', '$window', '$location', '$routeParams', 'filterFilter', 'mechFactory', '$resource', '$element',&#xD;&#xA;        function ($timeout, $scope, $window, $location, $routeParams, filterFilter, mechFactory, $resource, $element) {&#xD;&#xA;            $scope.place = {};&#xD;&#xA;            $scope.place.address = null;&#xD;&#xA;            $scope.place.lat = null;&#xD;&#xA;            $scope.place.lng = null;&#xD;&#xA;            $scope.radius = 25;&#xD;&#xA;            $scope.mechanics = [];&#xD;&#xA;            $scope.selection = [];&#xD;&#xA;            $scope.alert = null;&#xD;&#xA;            $scope.showSearchPanel = true;&#xD;&#xA;            //Helper method to get selected mechanics&#xD;&#xA;            $scope.selectedMechanics = function selectedMechanics() {&#xD;&#xA;              filterFilter($scope.mechanics, { selected: true })&#xD;&#xA;            };&#xD;&#xA;            //allow mechanic checkbox to select/deselect on click&#xD;&#xA;            $scope.toggleMechanicSelect = function(mechanic) {&#xD;&#xA;              mechanic.selected = !mechanic.selected;&#xD;&#xA;            }&#xD;&#xA;            $scope.goToJobListing = function() {&#xD;&#xA;              $scope.showSearchPanel = false;&#xD;&#xA;              mechFactory.removeAllMechanics();&#xD;&#xA;              for( var i in $scope.selection ) {&#xD;&#xA;                mechFactory.addMechanic($scope.selection[i]);&#xD;&#xA;              }&#xD;&#xA;              $scope.$emit('handleActiveJobsPanel');&#xD;&#xA;            }&#xD;&#xA;            // watch mechanics for changes&#xD;&#xA;            $scope.$watch('mechanics|filter:{selected:true}', function (nv) {&#xD;&#xA;             $scope.selection = nv.map(function (mechanic) {&#xD;&#xA;               return mechanic.objectid;&#xD;&#xA;             });&#xD;&#xA;            }, true);&#xD;&#xA;            //watch the returning google autocomplete details object&#xD;&#xA;            $scope.$watch('details', function() {&#xD;&#xA;              if( $scope.details !== undefined && $scope.details !== null ) {&#xD;&#xA;                $scope.place.address = $scope.details.formatted_address;&#xD;&#xA;                $scope.place.lat = $scope.details.geometry.location.lat();&#xD;&#xA;                $scope.place.lng = $scope.details.geometry.location.lng();&#xD;&#xA;              }&#xD;&#xA;            });&#xD;&#xA;            // watch the $scope.place data for changes&#xD;&#xA;            $scope.$watchCollection('place', function() {&#xD;&#xA;              if( $scope.place.lat !== null || $scope.place.lng !== null ) {&#xD;&#xA;                $scope.getMechanics();&#xD;&#xA;              }&#xD;&#xA;            });&#xD;&#xA;            $scope.$watch('radius', function() {&#xD;&#xA;              if( Number.isInteger(parseInt($scope.radius))  ){&#xD;&#xA;                $scope.getMechanics();&#xD;&#xA;              }&#xD;&#xA;            });&#xD;&#xA;            $scope.setDirectiveFn = function(directiveFn) {&#xD;&#xA;              $scope.directiveFn = directiveFn;&#xD;&#xA;            };&#xD;&#xA;            $scope.getMechanics = function() {&#xD;&#xA;              mechFactory.getMechanics($scope.place, $scope.radius).$promise.then(&#xD;&#xA;                function successfulResult (mechanicsData) {&#xD;&#xA;                  if (!mechanicsData || !mechanicsData.data.length){&#xD;&#xA;                    $scope.alert = 'Sorry, no mechanic found in "' + $scope.place.address + '" with radius of ' + $scope.radius + '.';&#xD;&#xA;                    $scope.mechanics = [];&#xD;&#xA;                    $scope.selection = [];&#xD;&#xA;                  } else {&#xD;&#xA;                    $scope.alert = mechanicsData.data.length + ' mechanic(s) found in "' + $scope.place.address + '" with radius of ' + $scope.radius + ' km.';&#xD;&#xA;                    $scope.mechanics = mechanicsData.data;&#xD;&#xA;                    $scope.selection = [];&#xD;&#xA;                  }&#xD;&#xA;                }, function failedResult (err) {&#xD;&#xA;                  $scope.alert = err.message;&#xD;&#xA;                });&#xD;&#xA;            };&#xD;&#xA;            //display panel once we have recieved the event&#xD;&#xA;            $scope.$on('activateSearchPanel', function(event, args) {&#xD;&#xA;              $scope.mechanics = [];&#xD;&#xA;              $scope.selection = [];&#xD;&#xA;              $scope.alert = null;&#xD;&#xA;              $scope.showSearchPanel = true;&#xD;&#xA;              $scope.place = {};&#xD;&#xA;              $scope.radius = 25;&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    ]);