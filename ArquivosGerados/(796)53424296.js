    buildscript {&#xD;&#xA;        repositories {&#xD;&#xA;            maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal &#xD;&#xA;        }&#xD;&#xA;        dependencies {&#xD;&#xA;            classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.1, 0.99.99]'&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'&#xD;&#xA;    apply plugin: "com.android.application"&#xD;&#xA;    import com.android.build.OutputFile&#xD;&#xA;    /**&#xD;&#xA;     * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets&#xD;&#xA;     * and bundleReleaseJsAndAssets).&#xD;&#xA;     * These basically call `react-native bundle` with the correct arguments during the Android build&#xD;&#xA;     * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the&#xD;&#xA;     * bundle directly from the development server. Below you can see all the possible configurations&#xD;&#xA;     * and their defaults. If you decide to add a configuration block, make sure to add it before the&#xD;&#xA;     * `apply from: "../../node_modules/react-native/react.gradle"` line.&#xD;&#xA;     *&#xD;&#xA;     * project.ext.react = [&#xD;&#xA;     *   // the name of the generated asset file containing your JS bundle&#xD;&#xA;     *   bundleAssetName: "index.android.bundle",&#xD;&#xA;     *&#xD;&#xA;     *   // the entry file for bundle generation&#xD;&#xA;     *   entryFile: "index.android.js",&#xD;&#xA;     *&#xD;&#xA;     *   // whether to bundle JS and assets in debug mode&#xD;&#xA;     *   bundleInDebug: false,&#xD;&#xA;     *&#xD;&#xA;     *   // whether to bundle JS and assets in release mode&#xD;&#xA;     *   bundleInRelease: true,&#xD;&#xA;     *&#xD;&#xA;     *   // whether to bundle JS and assets in another build variant (if configured).&#xD;&#xA;     *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants&#xD;&#xA;     *   // The configuration property can be in the following formats&#xD;&#xA;     *   //         'bundleIn${productFlavor}${buildType}'&#xD;&#xA;     *   //         'bundleIn${buildType}'&#xD;&#xA;     *   // bundleInFreeDebug: true,&#xD;&#xA;     *   // bundleInPaidRelease: true,&#xD;&#xA;     *   // bundleInBeta: true,&#xD;&#xA;     *&#xD;&#xA;     *   // whether to disable dev mode in custom build variants (by default only disabled in release)&#xD;&#xA;     *   // for example: to disable dev mode in the staging build type (if configured)&#xD;&#xA;     *   devDisabledInStaging: true,&#xD;&#xA;     *   // The configuration property can be in the following formats&#xD;&#xA;     *   //         'devDisabledIn${productFlavor}${buildType}'&#xD;&#xA;     *   //         'devDisabledIn${buildType}'&#xD;&#xA;     *&#xD;&#xA;     *   // the root of your project, i.e. where "package.json" lives&#xD;&#xA;     *   root: "../../",&#xD;&#xA;     *&#xD;&#xA;     *   // where to put the JS bundle asset in debug mode&#xD;&#xA;     *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",&#xD;&#xA;     *&#xD;&#xA;     *   // where to put the JS bundle asset in release mode&#xD;&#xA;     *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",&#xD;&#xA;     *&#xD;&#xA;     *   // where to put drawable resources / React Native assets, e.g. the ones you use via&#xD;&#xA;     *   // require('./image.png')), in debug mode&#xD;&#xA;     *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",&#xD;&#xA;     *&#xD;&#xA;     *   // where to put drawable resources / React Native assets, e.g. the ones you use via&#xD;&#xA;     *   // require('./image.png')), in release mode&#xD;&#xA;     *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",&#xD;&#xA;     *&#xD;&#xA;     *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means&#xD;&#xA;     *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to&#xD;&#xA;     *   // date; if you have any other folders that you want to ignore for performance reasons (gradle&#xD;&#xA;     *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/&#xD;&#xA;     *   // for example, you might want to remove it from here.&#xD;&#xA;     *   inputExcludes: ["android/**", "ios/**"],&#xD;&#xA;     *&#xD;&#xA;     *   // override which node gets called and with what additional arguments&#xD;&#xA;     *   nodeExecutableAndArgs: ["node"],&#xD;&#xA;     *&#xD;&#xA;     *   // supply additional arguments to the packager&#xD;&#xA;     *   extraPackagerArgs: []&#xD;&#xA;     * ]&#xD;&#xA;     */&#xD;&#xA;    project.ext.react = [&#xD;&#xA;        entryFile: "index.js"&#xD;&#xA;    ]&#xD;&#xA;    apply from: "../../node_modules/react-native/react.gradle"&#xD;&#xA;    /**&#xD;&#xA;     * Set this to true to create two separate APKs instead of one:&#xD;&#xA;     *   - An APK that only works on ARM devices&#xD;&#xA;     *   - An APK that only works on x86 devices&#xD;&#xA;     * The advantage is the size of the APK is reduced by about 4MB.&#xD;&#xA;     * Upload all the APKs to the Play Store and people will download&#xD;&#xA;     * the correct one based on the CPU architecture of their device.&#xD;&#xA;     */&#xD;&#xA;    def enableSeparateBuildPerCPUArchitecture = false&#xD;&#xA;    /**&#xD;&#xA;     * Run Proguard to shrink the Java bytecode in release builds.&#xD;&#xA;     */&#xD;&#xA;    def enableProguardInReleaseBuilds = false&#xD;&#xA;    android {&#xD;&#xA;        compileSdkVersion rootProject.ext.compileSdkVersion&#xD;&#xA;        buildToolsVersion rootProject.ext.buildToolsVersion&#xD;&#xA;        defaultConfig {&#xD;&#xA;            applicationId "com.qualpros"&#xD;&#xA;            minSdkVersion rootProject.ext.minSdkVersion&#xD;&#xA;            targetSdkVersion rootProject.ext.targetSdkVersion&#xD;&#xA;            versionCode 1&#xD;&#xA;            versionName "1.0"&#xD;&#xA;            ndk {&#xD;&#xA;                abiFilters "armeabi-v7a", "x86"&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        splits {&#xD;&#xA;            abi {&#xD;&#xA;                reset()&#xD;&#xA;                enable enableSeparateBuildPerCPUArchitecture&#xD;&#xA;                universalApk false  // If true, also generate a universal APK&#xD;&#xA;                include "armeabi-v7a", "x86"&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        buildTypes {&#xD;&#xA;            release {&#xD;&#xA;                minifyEnabled enableProguardInReleaseBuilds&#xD;&#xA;                proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        // applicationVariants are e.g. debug, release&#xD;&#xA;        applicationVariants.all { variant ->&#xD;&#xA;            variant.outputs.each { output ->&#xD;&#xA;                // For each separate APK per architecture, set a unique version code as described here:&#xD;&#xA;                // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits&#xD;&#xA;                def versionCodes = ["armeabi-v7a":1, "x86":2]&#xD;&#xA;                def abi = output.getFilter(OutputFile.ABI)&#xD;&#xA;                if (abi != null) {  // null for the universal-debug, universal-release variants&#xD;&#xA;                    output.versionCodeOverride =&#xD;&#xA;                            versionCodes.get(abi) * 1048576 + defaultConfig.versionCode&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    dependencies {&#xD;&#xA;        compile project(':react-native-onesignal')&#xD;&#xA;        compile project(':tipsi-stripe')&#xD;&#xA;        compile project(':react-native-paypal')&#xD;&#xA;        compile project(':react-native-linear-gradient')&#xD;&#xA;        compile project(':react-native-orientation')&#xD;&#xA;        compile project(':react-native-keep-awake')&#xD;&#xA;        compile project(':react-native-video')&#xD;&#xA;        compile project(':react-native-fs')&#xD;&#xA;        compile project(':react-native-image-resizer')&#xD;&#xA;        compile project(':react-native-image-picker')&#xD;&#xA;        compile project(':react-native-vector-icons')&#xD;&#xA;        implementation fileTree(dir: "libs", include: ["*.jar"])&#xD;&#xA;        implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"&#xD;&#xA;        implementation "com.facebook.react:react-native:+"  // From node_modules&#xD;&#xA;        implementation "com.braintreepayments.api:braintree:2.17.0"&#xD;&#xA;    }&#xD;&#xA;    // Run this once to be able to run the application with BUCK&#xD;&#xA;    // puts all compile dependencies into folder libs for BUCK to use&#xD;&#xA;    task copyDownloadableDepsToLibs(type: Copy) {&#xD;&#xA;        from configurations.compile&#xD;&#xA;        into 'libs'&#xD;&#xA;    }