    const windowW = window.innerWidth;&#xD;&#xA;    const windowH = window.innerHeight;&#xD;&#xA;    const maxLength = Math.max(windowW, windowH);&#xD;&#xA;    const cursorWidth = 100;&#xD;&#xA;    const cursorR = cursorWidth >> 1;&#xD;&#xA;    const cursorDelay = 10;&#xD;&#xA;    const buttons = Array.from(document.querySelectorAll('.border-button'));&#xD;&#xA;    const cursor = {&#xD;&#xA;    	el: document.querySelector('.border-cursor'),&#xD;&#xA;    	x: windowW >> 1,&#xD;&#xA;    	y: windowH >> 1,&#xD;&#xA;    	scaleX: 1,&#xD;&#xA;    	scaleY: 1,&#xD;&#xA;    };&#xD;&#xA;    const target = {&#xD;&#xA;    	x: windowW >> 1,&#xD;&#xA;    	y: windowH >> 1,&#xD;&#xA;    	width: cursorWidth,&#xD;&#xA;    	followMouse: true,&#xD;&#xA;    };&#xD;&#xA;    const norm = (val, max, min) => (val - min) / (max - min);&#xD;&#xA;    const toDegrees = r => r * (180 / Math.PI);&#xD;&#xA;    const distanceBetween = (v1, v2) => Math.sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y +- v2.y));&#xD;&#xA;    const loop = () => {&#xD;&#xA;    	const destX = target.x - cursorR;&#xD;&#xA;    	const destY = target.y - cursorR;&#xD;&#xA;    	const newX = cursor.x + ((destX - cursor.x) / cursorDelay);&#xD;&#xA;    	const newY = cursor.y + ((destY - cursor.y) / cursorDelay);&#xD;&#xA;    	const angle = angleBetween(cursor.x, cursor.y, newX, newY);&#xD;&#xA;    	if (target.followMouse) {&#xD;&#xA;    		const distance = Math.abs(distanceBetween(target, cursor));&#xD;&#xA;    		const scale = norm(distance, maxLength, cursorR);&#xD;&#xA;    		cursor.scaleX = 1 + scale;&#xD;&#xA;    		cursor.scaleY = 1 - scale;&#xD;&#xA;    	} else {&#xD;&#xA;    		const targetScale = target.width / cursorWidth;&#xD;&#xA;    		cursor.scaleX += (targetScale - cursor.scaleX) / (cursorDelay / 2);&#xD;&#xA;    		cursor.scaleY = cursor.scaleX;&#xD;&#xA;    	}&#xD;&#xA;    	cursor.x = newX;&#xD;&#xA;    	cursor.y = newY;&#xD;&#xA;    	cursor.el.style.transform = `translate(${cursor.x}px, ${cursor.y}px) rotate(${toDegrees(angle)}deg) scale(${cursor.scaleX}, ${cursor.scaleY})`;&#xD;&#xA;    	requestAnimationFrame(loop);&#xD;&#xA;    };&#xD;&#xA;    const angleBetween = (x1, y1, x2, y2) => Math.atan2(y2 - y1, x2 - x1);&#xD;&#xA;    const onPointerMove = (e) => {&#xD;&#xA;    	if (!target.followMouse) {&#xD;&#xA;    		return;&#xD;&#xA;    	}&#xD;&#xA;    	const pointer = (e.touches && e.touches.length) ? e.touches[0] : e;&#xD;&#xA;    	const { clientX: x, clientY: y } = pointer;&#xD;&#xA;    	target.x = x;&#xD;&#xA;    	target.y = y;&#xD;&#xA;    };&#xD;&#xA;    const onPointerOver = (e) => {&#xD;&#xA;    	const btn = e.target;&#xD;&#xA;    	const rect = btn.getBoundingClientRect();&#xD;&#xA;    	target.followMouse = false;&#xD;&#xA;    	target.x = rect.left + (rect.width >> 1);&#xD;&#xA;    	target.y = rect.top + (rect.height >> 1);&#xD;&#xA;    	target.width = Math.max(rect.width, rect.height) + 50;&#xD;&#xA;    };&#xD;&#xA;    const onPointerOut = () => {&#xD;&#xA;    	target.followMouse = true;&#xD;&#xA;    	target.width = cursorWidth;&#xD;&#xA;    };&#xD;&#xA;    document.body.addEventListener('mousemove', onPointerMove);&#xD;&#xA;    document.body.addEventListener('touchmove', onPointerMove);&#xD;&#xA;    buttons.forEach((btn) => {&#xD;&#xA;    	btn.addEventListener('touchstart', onPointerOver);&#xD;&#xA;    	btn.addEventListener('mouseover', onPointerOver);&#xD;&#xA;    	btn.addEventListener('touchend', onPointerOut);&#xD;&#xA;    	btn.addEventListener('mouseout', onPointerOut);&#xD;&#xA;    });&#xD;&#xA;    loop();