    const Interpret = (strings, ...expressions) => {&#xD;&#xA;      &#xD;&#xA;      const raw = strings&#xD;&#xA;      .map( (s, i) => s + (expressions[i] || '') )&#xD;&#xA;      .map(s => s.trim())&#xD;&#xA;      &#xD;&#xA;      const plusPosition = raw.findIndex(s => s.match(/[+]/))&#xD;&#xA;      &#xD;&#xA;      return raw.slice(0, plusPosition).reduce((t, c) => t + parseInt(c), 0)&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    const a = 1&#xD;&#xA;    const b = 2&#xD;&#xA;    const c = 3&#xD;&#xA;    const d = 4&#xD;&#xA;    const result = Interpret`${a} ${b} ${c} ${d} +`&#xD;&#xA;    console.log(result)