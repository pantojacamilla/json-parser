    window.onload = function() {&#xD;&#xA;      var dataPoints = [];&#xD;&#xA;      // fetching the json data from api via AJAX call.&#xD;&#xA;      var X = [];&#xD;&#xA;      var Y = [];&#xD;&#xA;      var data = [];&#xD;&#xA;      function loadJSON(callback) {&#xD;&#xA;        var xobj = new XMLHttpRequest();&#xD;&#xA;        xobj.overrideMimeType("application/json");&#xD;&#xA;        xobj.open('GET', ' https://api.myjson.com/bins/cixax', true);&#xD;&#xA;        xobj.onreadystatechange = function() {&#xD;&#xA;          if (xobj.readyState == 4 && xobj.status == "200") {&#xD;&#xA;            callback(xobj.responseText);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        xobj.send(null);&#xD;&#xA;      }&#xD;&#xA;      loadJSON(function(response) {&#xD;&#xA;        var response;&#xD;&#xA;        var field = JSON.parse(response);&#xD;&#xA;        var values = [];&#xD;&#xA;        //Iterating and storing leads & visits in a variable.&#xD;&#xA;        var $this = field;&#xD;&#xA;        for (var key in $this) {&#xD;&#xA;          if ($this.hasOwnProperty(key)) {&#xD;&#xA;            var data = $this[key].dates;&#xD;&#xA;            for (var val in data) {&#xD;&#xA;              values.push({&#xD;&#xA;                "X": data[val].visits,&#xD;&#xA;                "Y": data[val].leads&#xD;&#xA;              });&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        dataPoints = ({&#xD;&#xA;          "values": values&#xD;&#xA;        });&#xD;&#xA;      }&#xD;&#xA;      var chart = new CanvasJS.Chart("chartContainer", {&#xD;&#xA;        title: {&#xD;&#xA;          text: "Log Scale on Axis Y - Workaround using Linear Axis"&#xD;&#xA;        },&#xD;&#xA;        axisY: {&#xD;&#xA;          //valueFormatString: "0.## E0",&#xD;&#xA;          title: "In log scale",&#xD;&#xA;          labelFormatter: function(e) {&#xD;&#xA;            var lable = Math.pow(10, e.value);&#xD;&#xA;            if (lable >= 1000)&#xD;&#xA;              lable = CanvasJS.formatNumber(lable / 1000) + "k";&#xD;&#xA;            else&#xD;&#xA;              lable = CanvasJS.formatNumber(lable);&#xD;&#xA;            return lable;&#xD;&#xA;          },&#xD;&#xA;          interval: 1,&#xD;&#xA;          includeZero: false&#xD;&#xA;        },&#xD;&#xA;        toolTip: {&#xD;&#xA;          contentFormatter: function(e) {&#xD;&#xA;            var content = "Data Values";&#xD;&#xA;            for (var i = 0; i < e.entries.length; i++) {&#xD;&#xA;              content += "</br>" + e.entries[i].dataPoint.x + " : ";&#xD;&#xA;              content += CanvasJS.formatNumber(Math.round(Math.pow(10, e.entries[i].dataPoint.y)));&#xD;&#xA;            }&#xD;&#xA;            return content;&#xD;&#xA;          }&#xD;&#xA;        },&#xD;&#xA;        data: [{&#xD;&#xA;          type: "line",&#xD;&#xA;          dataPoints: []&#xD;&#xA;        }]&#xD;&#xA;      }); convertToLog(chart.options.data); chart.render();&#xD;&#xA;      function convertToLog(data) {&#xD;&#xA;        var dataPoints;&#xD;&#xA;        for (var j = 0; j < data.length; j++) {&#xD;&#xA;          dataPoints = data[j].dataPoints;&#xD;&#xA;          for (var i = 0; i < dataPoints.length; i++) {&#xD;&#xA;            dataPoints[i].y = Math.log10(dataPoints[i].y);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;      }