    var greatApp = greatApp || {};&#xD;&#xA;    &#xD;&#xA;    (function(){&#xD;&#xA;      greatApp.tools = {&#xD;&#xA;    &#xD;&#xA;       insertHTMLString:  function(){&#xD;&#xA;        /*****&#xD;&#xA;            if elements have a native insertAdjacentHTML : use it in four html insertion functions with more sensible names&#xD;&#xA;        *****/&#xD;&#xA;    &#xD;&#xA;            if(document.createElement('div').insertAdjacentHTML){&#xD;&#xA;              return {&#xD;&#xA;                  beforeOpeningTag: function(element,htmlString){&#xD;&#xA;                    element.insertAdjacentHTML('beforebegin',htmlString);&#xD;&#xA;                  },&#xD;&#xA;                  afterOpeningTag:  function(element,htmlString){&#xD;&#xA;                    element.insertAdjacentHTML('afterbegin',htmlString);&#xD;&#xA;                  },&#xD;&#xA;                  beforeClosingTag:  function(element,htmlString){&#xD;&#xA;                    element.insertAdjacentHTML('beforeend',htmlString);&#xD;&#xA;                  },&#xD;&#xA;                  afterClosingTag:  function(element,htmlString){&#xD;&#xA;                    element.insertAdjacentHTML('afterend',htmlString);&#xD;&#xA;                  }&#xD;&#xA;              }&#xD;&#xA;            }//end if &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        /********&#xD;&#xA;            otherwise, we have no native insertAdjacentHTML : implement the same four insertion functions and then use them to define insertAdjacentHTML&#xD;&#xA;        ******/&#xD;&#xA;    &#xD;&#xA;               function fragment(htmlString){&#xD;&#xA;                    var ele = document.createElement('div');&#xD;&#xA;                    var frag = document.createDocumentFragment();&#xD;&#xA;                    ele.innerHTML = htmlString;&#xD;&#xA;    &#xD;&#xA;                    //move all nodes from ele to frag&#xD;&#xA;                    while(ele.firstChild)&#xD;&#xA;                       frag.appendChild(ele.firstChild);&#xD;&#xA;    &#xD;&#xA;                    return frag;&#xD;&#xA;               }        &#xD;&#xA;               var insertHTMLString = {&#xD;&#xA;                  beforeOpeningTag: function(element,htmlString){&#xD;&#xA;                    element.parentNode.insertBefore(fragment(htmlString),element);&#xD;&#xA;                  },&#xD;&#xA;                  afterOpeningTag:  function(element,htmlString){&#xD;&#xA;                    element.parentNode.insertBefore(fragment(htmlString),element.firstChild);&#xD;&#xA;                  },&#xD;&#xA;                  beforeClosingTag:  function(element,htmlString){&#xD;&#xA;                    element.parentNode.appendChild(fragment(htmlString));&#xD;&#xA;                  },&#xD;&#xA;                  afterClosingTag:  function(element,htmlString){&#xD;&#xA;                    element.parentNode.insertBefore(fragment(htmlString),element.nextSibling);&#xD;&#xA;                  }                &#xD;&#xA;               };&#xD;&#xA;    &#xD;&#xA;               /**&#xD;&#xA;                  now implement insertAdjacentHMTL based on the functions above&#xD;&#xA;              **/&#xD;&#xA;    &#xD;&#xA;              Element.prototype.insertAdjacentHMTL = function(pos, htmlString){&#xD;&#xA;                switch(pos.toLowerCase()){&#xD;&#xA;                  case "beforebegin": return insertHTMLString.beforeOpeningTag(this, htmlString);&#xD;&#xA;                  case "afterbegin": return insertHTMLString.afterOpeningTag(this, htmlString);&#xD;&#xA;                  case "beforeend": return insertHTMLString.beforeClosingTag(this, htmlString);&#xD;&#xA;                  case "afterend": return insertHTMLString.beforeClosingTag(this, htmlString);&#xD;&#xA;    &#xD;&#xA;                }&#xD;&#xA;              };&#xD;&#xA;              return insertHTMLString;&#xD;&#xA;        },&#xD;&#xA;    &#xD;&#xA;    }}());