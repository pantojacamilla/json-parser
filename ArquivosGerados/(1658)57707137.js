javascript&#xD;&#xA;const contentMsgElement = document.querySelector("#contentMsg");&#xD;&#xA;contentMsgElement.scrollTop = contentMsgElement.scrollHeight;&#xD;&#xA;react&#xD;&#xA;import React from 'react';&#xD;&#xA;import ReactDOM from 'react-dom';&#xD;&#xA;import MessageChat from './message/messageChat';&#xD;&#xA;import moment from 'moment';&#xD;&#xA;import MessageDateHeader from './message/messageDateHeader';&#xD;&#xA;class BodyChat extends React.Component&#xD;&#xA;{&#xD;&#xA;    constructor(props)&#xD;&#xA;    {&#xD;&#xA;        super(props);&#xD;&#xA;        this.state = {&#xD;&#xA;            socket:null,&#xD;&#xA;            allMessages:[],&#xD;&#xA;            dateNow:""&#xD;&#xA;        };&#xD;&#xA;        this.messageList = React.createRef();&#xD;&#xA;    }&#xD;&#xA;    componentDidMount()&#xD;&#xA;    {&#xD;&#xA;        const {socket,user} = this.props;&#xD;&#xA;        this.setState({&#xD;&#xA;            socket:socket,&#xD;&#xA;            user:user&#xD;&#xA;        },this.getLast10Msg);&#xD;&#xA;        this.setState({&#xD;&#xA;            dateNow:moment.utc().local().format("DD/MM/YY")&#xD;&#xA;        });&#xD;&#xA;        this.getNewMsg(socket);&#xD;&#xA;    }&#xD;&#xA;    componentDidUpdate(prevProps,prevState)&#xD;&#xA;    {&#xD;&#xA;        const prevAll = prevState.allMessages;&#xD;&#xA;        const all = this.state.allMessages&#xD;&#xA;        if(prevAll.length !== all.length)&#xD;&#xA;        {&#xD;&#xA;            if(this.messageList.current)&#xD;&#xA;            {   &#xD;&#xA;                const messageList = this.messageList.current;&#xD;&#xA;                ReactDOM.findDOMNode(messageList).scrollTop = messageList.scrollHeight;&#xD;&#xA;                console.dir(ReactDOM.findDOMNode(messageList));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    getLast10Msg = () =>&#xD;&#xA;    {&#xD;&#xA;        const {socket} = this.state;&#xD;&#xA;        socket.on("respGet10Msg",data => &#xD;&#xA;        {&#xD;&#xA;            this.setState({&#xD;&#xA;                allMessages:data&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    getNewMsg = socket =>&#xD;&#xA;    {&#xD;&#xA;        socket.on("respMsg",data => &#xD;&#xA;        {&#xD;&#xA;            const newMsg = {&#xD;&#xA;                userName:data.userName,&#xD;&#xA;                MESSAGE:data.message,&#xD;&#xA;                CODE_UTILISATEUR:data.userId,&#xD;&#xA;                TIME:data.TIME,&#xD;&#xA;                ID:(data.idMessage) ? "msg_" + data.idMessage : "tpm_" + data.idTpm&#xD;&#xA;            };&#xD;&#xA;            console.log(newMsg);&#xD;&#xA;            this.setState(prevState => ({&#xD;&#xA;                allMessages:{...prevState.allMessages,newMsg}&#xD;&#xA;            }));&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    msgDate = (time,displayDate) =>&#xD;&#xA;    {&#xD;&#xA;        const {dateNow} = this.state;&#xD;&#xA;        const date = moment.utc(time).local().format("DD/MM/YY");&#xD;&#xA;        const yesterday = moment.utc().local().subtract(1, 'days').format("DD/MM/YY");&#xD;&#xA;        const currentDate = displayDate.date;&#xD;&#xA;        const respDate = {...displayDate};&#xD;&#xA;        if(date !== currentDate)&#xD;&#xA;        {&#xD;&#xA;            if(dateNow === date)&#xD;&#xA;            {&#xD;&#xA;                respDate.date = "Aujourd'hui";&#xD;&#xA;            }&#xD;&#xA;            else if(yesterday === date)&#xD;&#xA;            {&#xD;&#xA;                respDate.date = "Hier";&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                respDate.date = date;&#xD;&#xA;            }&#xD;&#xA;            respDate.display = true;&#xD;&#xA;        }        &#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            respDate.display = false;&#xD;&#xA;        }&#xD;&#xA;        return respDate;&#xD;&#xA;    }&#xD;&#xA;    render()&#xD;&#xA;    {&#xD;&#xA;        const {allMessages,user} = this.state;&#xD;&#xA;        let displayDate = {date:"",display:false};&#xD;&#xA;        if(allMessages.length > 0)&#xD;&#xA;        {&#xD;&#xA;            const messages = allMessages.map(msg =>&#xD;&#xA;            {&#xD;&#xA;                const msgChat = <MessageChat &#xD;&#xA;                idMessage={msg.ID}&#xD;&#xA;                userName={msg.userName}&#xD;&#xA;                message={msg.MESSAGE}&#xD;&#xA;                userId={msg.CODE_UTILISATEUR}&#xD;&#xA;                time={msg.TIME}&#xD;&#xA;                currentUser={user.CODE_UTILISATEUR}&#xD;&#xA;                key={msg.ID}&#xD;&#xA;                />;&#xD;&#xA;                &#xD;&#xA;                displayDate = this.msgDate(msg.TIME,displayDate);&#xD;&#xA;                const msgDate = (displayDate.display) ? <MessageDateHeader date={displayDate.date}/> : "";&#xD;&#xA;                return <React.Fragment>&#xD;&#xA;                    {msgDate}&#xD;&#xA;                    {msgChat}&#xD;&#xA;                </React.Fragment>;&#xD;&#xA;            }&#xD;&#xA;            );&#xD;&#xA;            return <div className="contentMsg" ref={this.messageList}>&#xD;&#xA;                    {messages}&#xD;&#xA;                    {("Aujourd'hui" !== displayDate.date) ? <MessageDateHeader date="Aujourd'hui"/> : ""}&#xD;&#xA;                </div>;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            return <div className="contentMsg">&#xD;&#xA;                </div>;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;export default BodyChat;&#xD;&#xA;css&#xD;&#xA;.contentMsg&#xD;&#xA;    {&#xD;&#xA;        display: grid;&#xD;&#xA;        grid-gap: 0.2rem;&#xD;&#xA;        overflow-y: auto;&#xD;&#xA;        overflow-x: hidden;&#xD;&#xA;    }&#xD;&#xA;I except scroll when chat mount or update at the bottom but nothing append!&#xD;&#xA;@anik islam Shojib&#xD;&#xA;i try and don't work