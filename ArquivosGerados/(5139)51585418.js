    const canvas = document.createElement("canvas");&#xD;&#xA;    const gl = canvas.getContext("webgl");&#xD;&#xA;    console.log(TEST(false, false));&#xD;&#xA;    console.log(TEST(false, true));&#xD;&#xA;    console.log(TEST(true, false));&#xD;&#xA;    console.log(TEST(true, true));&#xD;&#xA;    function TEST(useCubemap, useBuffer) {&#xD;&#xA;      const size = 512;&#xD;&#xA;      const textureType = useCubemap ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;&#xD;&#xA;      // SETUP THE PROGRAM&#xD;&#xA;      {&#xD;&#xA;        const program = gl.createProgram();&#xD;&#xA;        const vertShader = gl.createShader(gl.VERTEX_SHADER);&#xD;&#xA;        const fragShader = gl.createShader(gl.FRAGMENT_SHADER);&#xD;&#xA;        gl.shaderSource(vertShader, `&#xD;&#xA;                attribute vec2 a_position;&#xD;&#xA;                &#xD;&#xA;                void main() {           &#xD;&#xA;                    gl_Position = vec4(a_position, 0.2, 1.0);&#xD;&#xA;                }&#xD;&#xA;            `);&#xD;&#xA;        gl.compileShader(vertShader);&#xD;&#xA;        gl.attachShader(program, vertShader);&#xD;&#xA;        gl.shaderSource(fragShader, `&#xD;&#xA;                void main() {&#xD;&#xA;                    gl_FragColor = vec4(0.1, 0.2, 0.3, 0.4);&#xD;&#xA;                }&#xD;&#xA;            `);&#xD;&#xA;        gl.compileShader(fragShader);&#xD;&#xA;        gl.attachShader(program, fragShader);&#xD;&#xA;        gl.linkProgram(program);&#xD;&#xA;        gl.useProgram(program);&#xD;&#xA;      }&#xD;&#xA;      // SETUP THE QUAD&#xD;&#xA;      {&#xD;&#xA;        const posBuffer = gl.createBuffer();&#xD;&#xA;        gl.bindBuffer(gl.ARRAY_BUFFER, posBuffer);&#xD;&#xA;        gl.enableVertexAttribArray(0);&#xD;&#xA;        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);&#xD;&#xA;        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, +1, -1, -1, +1, +1, +1, -1]), gl.STATIC_DRAW);&#xD;&#xA;      }&#xD;&#xA;      // SETUP THE FRAMEBUFFER&#xD;&#xA;      {&#xD;&#xA;        const fb = gl.createFramebuffer();&#xD;&#xA;        const targetTexture = gl.createTexture();&#xD;&#xA;        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);&#xD;&#xA;        gl.bindTexture(textureType, targetTexture);&#xD;&#xA;        gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);&#xD;&#xA;        gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);&#xD;&#xA;        gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);&#xD;&#xA;        gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);&#xD;&#xA;        // SWITCH TEXTURE TYPE&#xD;&#xA;        if (textureType === gl.TEXTURE_2D) {&#xD;&#xA;          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);&#xD;&#xA;          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, targetTexture, 0);&#xD;&#xA;        } else {&#xD;&#xA;          for (let i = 0; i < 6; i++) gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, size, size, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);&#xD;&#xA;          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X, targetTexture, 0);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      // SETUP THE RENDER BUFFER&#xD;&#xA;      {&#xD;&#xA;        const rb = gl.createRenderbuffer();&#xD;&#xA;        gl.bindRenderbuffer(gl.RENDERBUFFER, rb);&#xD;&#xA;        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, size, size);&#xD;&#xA;        // TAKING THIS OUT MAKES IT WORK&#xD;&#xA;        if (useBuffer) gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rb);&#xD;&#xA;      }&#xD;&#xA;      // DISABLE THE OBVIOUS CULPRITS&#xD;&#xA;      gl.disable(gl.DEPTH_TEST);&#xD;&#xA;      gl.disable(gl.STENCIL_TEST);&#xD;&#xA;      gl.disable(gl.SCISSOR_TEST);&#xD;&#xA;      // DO A RENDERYFUCK&#xD;&#xA;      gl.viewport(0, 0, size, size);&#xD;&#xA;      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);&#xD;&#xA;      // GET THE OUTFUCK&#xD;&#xA;      const pixels = new Uint8Array(4);&#xD;&#xA;      gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);&#xD;&#xA;      return pixels;&#xD;&#xA;    }