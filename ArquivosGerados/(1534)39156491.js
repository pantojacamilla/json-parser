    using System;&#xD;&#xA;    using System.Collections.Generic;&#xD;&#xA;    using System.Data;&#xD;&#xA;    using System.Data.Entity;&#xD;&#xA;    using System.Data.Entity.Infrastructure;&#xD;&#xA;    using System.Linq;&#xD;&#xA;    using System.Net;&#xD;&#xA;    using System.Net.Http;&#xD;&#xA;    using System.Threading.Tasks;&#xD;&#xA;    using System.Web.Http;&#xD;&#xA;    using System.Web.Http.Description;&#xD;&#xA;    using ReviewApp.Models;&#xD;&#xA;    namespace ReviewApp.Controllers&#xD;&#xA;    {&#xD;&#xA;        public class ReviewsController : ApiController&#xD;&#xA;        {&#xD;&#xA;            private CheetahEntities db = new CheetahEntities();&#xD;&#xA;            // GET: api/Reviews&#xD;&#xA;            public IQueryable<Review> GetReviews()&#xD;&#xA;            {&#xD;&#xA;                return db.Reviews;&#xD;&#xA;            }&#xD;&#xA;            // GET: api/Reviews/5&#xD;&#xA;            [ResponseType(typeof(Review))]&#xD;&#xA;            public async Task<IHttpActionResult> GetReview(string id)&#xD;&#xA;            {&#xD;&#xA;                Review review = await db.Reviews.FindAsync(id);&#xD;&#xA;                if (review == null)&#xD;&#xA;                {&#xD;&#xA;                    return NotFound();&#xD;&#xA;                }&#xD;&#xA;                return Ok(review);&#xD;&#xA;            }&#xD;&#xA;            // PUT: api/Reviews/5&#xD;&#xA;            [ResponseType(typeof(void))]&#xD;&#xA;            public async Task<IHttpActionResult> PutReview(string id, Review review)&#xD;&#xA;            {&#xD;&#xA;                if (!ModelState.IsValid)&#xD;&#xA;                {&#xD;&#xA;                    return BadRequest(ModelState);&#xD;&#xA;                }&#xD;&#xA;                if (id != review.ReviewID)&#xD;&#xA;                {&#xD;&#xA;                    return BadRequest();&#xD;&#xA;                }&#xD;&#xA;                db.Entry(review).State = EntityState.Modified;&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    await db.SaveChangesAsync();&#xD;&#xA;                }&#xD;&#xA;                catch (DbUpdateConcurrencyException)&#xD;&#xA;                {&#xD;&#xA;                    if (!ReviewExists(id))&#xD;&#xA;                    {&#xD;&#xA;                        return NotFound();&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        throw;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return StatusCode(HttpStatusCode.NoContent);&#xD;&#xA;            }&#xD;&#xA;            // POST: api/Reviews&#xD;&#xA;            [ResponseType(typeof(Review))]&#xD;&#xA;            public async Task<IHttpActionResult> PostReview(Review review)&#xD;&#xA;            {&#xD;&#xA;                /*&#xD;&#xA;                if (!ModelState.IsValid)&#xD;&#xA;                {&#xD;&#xA;                    return BadRequest(ModelState);&#xD;&#xA;                }&#xD;&#xA;                */&#xD;&#xA;                db.Reviews.Add(review);&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    await db.SaveChangesAsync();&#xD;&#xA;                }&#xD;&#xA;                catch (DbUpdateException)&#xD;&#xA;                {&#xD;&#xA;                    if (ReviewExists(review.ReviewID))&#xD;&#xA;                    {&#xD;&#xA;                        return Conflict();&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        throw;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                return CreatedAtRoute("DefaultApi", new { id = review.ReviewID }, review);&#xD;&#xA;            }&#xD;&#xA;            // DELETE: api/Reviews/5&#xD;&#xA;            [ResponseType(typeof(Review))]&#xD;&#xA;            public async Task<IHttpActionResult> DeleteReview(string id)&#xD;&#xA;            {&#xD;&#xA;                Review review = await db.Reviews.FindAsync(id);&#xD;&#xA;                if (review == null)&#xD;&#xA;                {&#xD;&#xA;                    return NotFound();&#xD;&#xA;                }&#xD;&#xA;                db.Reviews.Remove(review);&#xD;&#xA;                await db.SaveChangesAsync();&#xD;&#xA;                return Ok(review);&#xD;&#xA;            }&#xD;&#xA;            protected override void Dispose(bool disposing)&#xD;&#xA;            {&#xD;&#xA;                if (disposing)&#xD;&#xA;                {&#xD;&#xA;                    db.Dispose();&#xD;&#xA;                }&#xD;&#xA;                base.Dispose(disposing);&#xD;&#xA;            }&#xD;&#xA;            private bool ReviewExists(string id)&#xD;&#xA;            {&#xD;&#xA;                return db.Reviews.Count(e => e.ReviewID == id) > 0;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }