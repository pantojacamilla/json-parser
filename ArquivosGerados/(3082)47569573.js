    var gameState = {&#xD;&#xA;    	create: function(){&#xD;&#xA;    		sensX = 30&#xD;&#xA;    		sensY = 0;&#xD;&#xA;    		dec = 0;&#xD;&#xA;    		boat = 0;&#xD;&#xA;    		sc = 0;&#xD;&#xA;    		speedOther = 2;&#xD;&#xA;    		inGame = 0;&#xD;&#xA;    		levelTime = 60;&#xD;&#xA;    		levelUp = levelTime;&#xD;&#xA;    		speed = 2;&#xD;&#xA;    		levelID = 1;&#xD;&#xA;    		stopCount = 0;&#xD;&#xA;    		timerSpeed = 0;&#xD;&#xA;    		dogPos = []&#xD;&#xA;    		this.safetile = 0;&#xD;&#xA;    		ifPlay = 0;&#xD;&#xA;    		nightTime = 7500;&#xD;&#xA;    		this.dogNum = "";&#xD;&#xA;    		crash = 0;&#xD;&#xA;    		s = []&#xD;&#xA;    		cursors = game.input.keyboard.createCursorKeys();&#xD;&#xA;    		&#xD;&#xA;    		this.game.onPause.add(this.stopM, this);&#xD;&#xA;    		this.game.onResume.add(this.startM, this);&#xD;&#xA;    		&#xD;&#xA;    		this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);&#xD;&#xA;    		&#xD;&#xA;    		loadingLabel = game.add.text(game.world.centerX, game.world.centerY, "You Lose", { font: "bold 16px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" });&#xD;&#xA;    		loadingLabel.anchor.setTo(0.5, 0);&#xD;&#xA;    		loadingLabel.alpha = 0;&#xD;&#xA;    		loadingLabel.fixedToCamera = true&#xD;&#xA;    		&#xD;&#xA;    		LoadLevel = game.add.text(game.world.centerX, game.world.centerY, "", { font: "bold 32px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" });&#xD;&#xA;    		LoadLevel.anchor.setTo(0.5, 0);&#xD;&#xA;    		LoadLevel.alpha = 0;&#xD;&#xA;    		&#xD;&#xA;    		&#xD;&#xA;    		LevelCountdown = game.add.text(300, 330, "", { font: "bold 32px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" });&#xD;&#xA;    		LevelCountdown.anchor.setTo(0.5, 0);&#xD;&#xA;    		LevelCountdown.alpha = 0;&#xD;&#xA;    		&#xD;&#xA;    		LevelTimer = game.add.text(300, 0, levelTime, { font: "bold 16px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" });&#xD;&#xA;    		LevelTimer.anchor.setTo(0.5, 0);&#xD;&#xA;    		LevelTimer.alpha = 0;&#xD;&#xA;    		LevelTimer.fixedToCamera = true&#xD;&#xA;    		&#xD;&#xA;    		Points = game.add.text(340, 0, "0", { font: "bold 16px Arial", fill: "#fff", boundsAlignH: "center", boundsAlignV: "middle" });&#xD;&#xA;    		Points.anchor.setTo(0.5, 0);&#xD;&#xA;    		Points.alpha = 0;&#xD;&#xA;    		Points.fixedToCamera = true&#xD;&#xA;    		&#xD;&#xA;    		this.car = game.add.sprite(game.world.centerX,500, 'car');&#xD;&#xA;    		this.car.animations.add('mover',[0,1,2,3],1000, true);&#xD;&#xA;    		this.car.fixedToCamera = true;&#xD;&#xA;    		this.car.alpha = 0&#xD;&#xA;    		&#xD;&#xA;    		_this = this;&#xD;&#xA;    		this.levelShow()&#xD;&#xA;    		&#xD;&#xA;    		$(".game-left").on("touchstart", function(){&#xD;&#xA;    			_this.direction("left")&#xD;&#xA;    		})&#xD;&#xA;    		$(".game-right").on("touchstart",function(){&#xD;&#xA;    			_this.direction("right")&#xD;&#xA;    		})&#xD;&#xA;    		$(".game-up").on("touchstart",function(){&#xD;&#xA;    			_this.direction("up")&#xD;&#xA;    		})&#xD;&#xA;    		$(".game-down").on("touchstart",function(){&#xD;&#xA;    			_this.direction("down")&#xD;&#xA;    		})&#xD;&#xA;    		&#xD;&#xA;    	},level: function(){&#xD;&#xA;    		&#xD;&#xA;    		this.map = game.add.tilemap('map');&#xD;&#xA;    		this.map.addTilesetImage('tileset');&#xD;&#xA;    		&#xD;&#xA;    		this.layer = this.map.createLayer('Tile Layer 1');&#xD;&#xA;    		&#xD;&#xA;    		this.borders = this.add.physicsGroup();&#xD;&#xA;            this.map.createFromTiles(6,3, 'borders', this.layer, this.borders);&#xD;&#xA;    		&#xD;&#xA;    		this.cars = this.add.physicsGroup();&#xD;&#xA;            this.map.createFromTiles(4, 1, 'cars', this.layer, this.cars);&#xD;&#xA;    		&#xD;&#xA;    		this.dog = this.add.physicsGroup();	&#xD;&#xA;            this.map.createFromTiles(5, 3, 'dog', this.layer, this.dog);&#xD;&#xA;    		this.map.setCollisionByExclusion([this.safetile], true, this.layer);&#xD;&#xA;    		&#xD;&#xA;    		this.others = game.add.group();&#xD;&#xA;    		&#xD;&#xA;    		this.phare = game.add.sprite(-585,-446, 'phare');&#xD;&#xA;    		this.phare.fixedToCamera = true;&#xD;&#xA;    		this.phare.alpha = 0;&#xD;&#xA;    		&#xD;&#xA;    		var tb = ["camion","cars","oil"]&#xD;&#xA;    		&#xD;&#xA;    		for(t=0;t<this.cars.length;t++){&#xD;&#xA;    			this.cars.children[t].kill()&#xD;&#xA;    			var rd = Math.floor(Math.random() * tb.length)&#xD;&#xA;    			var c = this.others.create(this.cars.children[t].x,this.cars.children[t].y, tb[rd]);&#xD;&#xA;    			c.name = tb[rd];&#xD;&#xA;    			c.speed = 2;&#xD;&#xA;    			c.ids = t&#xD;&#xA;    		}&#xD;&#xA;    		game.physics.enable([this.car, this.phare, this.others], Phaser.Physics.ARCADE);&#xD;&#xA;    		&#xD;&#xA;    		this.layer.resizeWorld();&#xD;&#xA;    		this.dogNum = this.dog.length&#xD;&#xA;    		for(t=0;t<this.dogNum;t++){&#xD;&#xA;    			dogPos.push(this.dog.children[t].position.y)&#xD;&#xA;    		}&#xD;&#xA;    		&#xD;&#xA;    		game.camera.y = 18000&#xD;&#xA;    		&#xD;&#xA;    		timerAccelerate = game.time.create(false);&#xD;&#xA;    		timerAccelerate.loop(1, this.levelAccelerate, this);&#xD;&#xA;    		timerAccelerate.start();&#xD;&#xA;    		&#xD;&#xA;    		LevelTimer.alpha = 1;&#xD;&#xA;    		Points.alpha = 1;&#xD;&#xA;    		&#xD;&#xA;    		timerLevel = game.time.create(false);&#xD;&#xA;    		timerLevel.loop(1000, this.levelTimer, this);&#xD;&#xA;    		timerLevel.start();&#xD;&#xA;    		&#xD;&#xA;    		timer = game.time.create(false);&#xD;&#xA;    		timer.loop(speed, this.move, this);&#xD;&#xA;    		timer.start();&#xD;&#xA;    		//game.world.bringToTop(this.borders);&#xD;&#xA;    		game.world.bringToTop(this.phare);&#xD;&#xA;    		game.world.bringToTop(LevelTimer);&#xD;&#xA;    		game.world.bringToTop(Points);&#xD;&#xA;    		game.world.bringToTop(loadingLabel);&#xD;&#xA;    		this.car.alpha = 1&#xD;&#xA;    		game.world.bringToTop(this.car);&#xD;&#xA;    		&#xD;&#xA;    		for(t=0;t<this.others.length;t++){&#xD;&#xA;    			var rdm = Math.random() * 1&#xD;&#xA;    			if(rdm < 0.2) this.voi(this.others.children[t])&#xD;&#xA;    		}&#xD;&#xA;    		&#xD;&#xA;    		inGame = 1;&#xD;&#xA;    		&#xD;&#xA;    		&#xD;&#xA;    	},startM:function(){&#xD;&#xA;    		stopCount = 0&#xD;&#xA;    	},stopM:function(){&#xD;&#xA;    		if(inGame == 1){&#xD;&#xA;    			&#xD;&#xA;    		}&#xD;&#xA;    		stopCount = 1&#xD;&#xA;    	},levelAccelerate: function(){&#xD;&#xA;    		game.camera.y -= 2;&#xD;&#xA;    		&#xD;&#xA;    	},voi:function(t){&#xD;&#xA;    		if(t.name != "oil"){&#xD;&#xA;    			if(t.speed < 2){&#xD;&#xA;    				t.x += 10&#xD;&#xA;    				t.speed = 2&#xD;&#xA;    			}else{&#xD;&#xA;    				t.x -= 10&#xD;&#xA;    				t.speed = -2&#xD;&#xA;    			}&#xD;&#xA;    			s[t.ids] = setInterval(function(){&#xD;&#xA;    				t.x += t.speed&#xD;&#xA;    			},20)&#xD;&#xA;    		}&#xD;&#xA;    	},levelTimer: function(){&#xD;&#xA;    		levelUp--;&#xD;&#xA;    		LevelTimer.setText(levelUp)&#xD;&#xA;    		&#xD;&#xA;    		if(levelUp == 0){&#xD;&#xA;    			if(levelID == 2){&#xD;&#xA;    				levelID++;&#xD;&#xA;    			}else if(levelID == 3){&#xD;&#xA;    				levelID = 1;&#xD;&#xA;    			}else{&#xD;&#xA;    				levelID++;&#xD;&#xA;    			}&#xD;&#xA;    			this.phare.alpha = 0&#xD;&#xA;    			LevelTimer.alpha = 0&#xD;&#xA;    			levelUp = levelTime;&#xD;&#xA;    			inGame = 0;&#xD;&#xA;    			timer.stop()&#xD;&#xA;    			timerLevel.stop()&#xD;&#xA;    			timerAccelerate.stop()&#xD;&#xA;    			this.levelShow()&#xD;&#xA;    		}else{&#xD;&#xA;    			chanceNight =  Math.random() * 1&#xD;&#xA;    			if(chanceNight < 0.05 && this.phare.alpha == 0){&#xD;&#xA;    				var tt = game.add.tween(this.phare).to( { alpha: 1 }, 1000, Phaser.Easing.Bounce.In, true);&#xD;&#xA;    				setTimeout(function(){&#xD;&#xA;    					var tt = game.add.tween(_this.phare).to( { alpha: 0 }, 1000, Phaser.Easing.Bounce.Out, true);&#xD;&#xA;    				},nightTime)&#xD;&#xA;    			}&#xD;&#xA;    		}&#xD;&#xA;    		&#xD;&#xA;    	},levelShow: function(){&#xD;&#xA;    		LoadLevel.setText("Level "+levelID)&#xD;&#xA;    		var tt = game.add.tween(LoadLevel).to( { alpha: 1 }, 500, "Linear", true);&#xD;&#xA;    		tt.onComplete.add(this.countdown, this);&#xD;&#xA;    	},countdown: function(){&#xD;&#xA;    		var count = 3;&#xD;&#xA;    		_this = this;&#xD;&#xA;    		timeToGo = setInterval(function(){&#xD;&#xA;    			if(stopCount == 0){&#xD;&#xA;    				LevelCountdown.setText(count)&#xD;&#xA;    				LevelCountdown.alpha = 1&#xD;&#xA;    				&#xD;&#xA;    				if(count<0){&#xD;&#xA;    					LevelCountdown.alpha = 0&#xD;&#xA;    					//LoadLevel.alpha = 0;&#xD;&#xA;    					_this.level()&#xD;&#xA;    					clearInterval(timeToGo)&#xD;&#xA;    				}&#xD;&#xA;    				count--;&#xD;&#xA;    			}&#xD;&#xA;    		},1000)&#xD;&#xA;    	},move: function(){	&#xD;&#xA;    		&#xD;&#xA;    	},removeCase: function(removeItem){&#xD;&#xA;    	},creatApple: function(){&#xD;&#xA;    	},canMove: function(car, objet){&#xD;&#xA;    		if(objet.name == "oil" && crash == 0){&#xD;&#xA;    			crash = 1;&#xD;&#xA;    			this.car.animations.play("mover");&#xD;&#xA;    			setTimeout(function(){&#xD;&#xA;    				_this.car.animations.stop();&#xD;&#xA;    				_this.car.frame = 0;&#xD;&#xA;    				crash = 0;&#xD;&#xA;    			},1000)&#xD;&#xA;    		}else if(crash == 0){&#xD;&#xA;    			for(t=0;t<s.length;t++){&#xD;&#xA;    				clearInterval(s[t])&#xD;&#xA;    			}&#xD;&#xA;    			loadingLabel.alpha = 1;&#xD;&#xA;    			LevelTimer.alpha = 0&#xD;&#xA;    			levelUp = levelTime;&#xD;&#xA;    			inGame = 0;&#xD;&#xA;    			timer.stop()&#xD;&#xA;    			timerLevel.stop()&#xD;&#xA;    			timerAccelerate.stop()&#xD;&#xA;    		}&#xD;&#xA;    	},heat: function(d1,d2){&#xD;&#xA;    	&#xD;&#xA;    	},direction: function(direct){&#xD;&#xA;    		if(crash == 0){&#xD;&#xA;    			switch (direct){&#xD;&#xA;    				case "up":&#xD;&#xA;    					if(this.car.cameraOffset.y>0){&#xD;&#xA;    						this.car.cameraOffset.y -= speed&#xD;&#xA;    						this.phare.cameraOffset.y -=speed&#xD;&#xA;    					}&#xD;&#xA;    					break;&#xD;&#xA;    				&#xD;&#xA;    				case "down":&#xD;&#xA;    					if(this.car.cameraOffset.y<570){&#xD;&#xA;    						this.car.cameraOffset.y += speed + 1&#xD;&#xA;    						this.phare.cameraOffset.y +=speed +1&#xD;&#xA;    					}&#xD;&#xA;    					break;&#xD;&#xA;    				&#xD;&#xA;    				case "left":&#xD;&#xA;    					if(this.car.cameraOffset.x>0){&#xD;&#xA;    						this.car.cameraOffset.x -= speed&#xD;&#xA;    						this.phare.cameraOffset.x -=speed&#xD;&#xA;    					}&#xD;&#xA;    					break;&#xD;&#xA;    				&#xD;&#xA;    				case "right":&#xD;&#xA;    					if(this.car.cameraOffset.x<570){&#xD;&#xA;    						this.car.cameraOffset.x += speed&#xD;&#xA;    						this.phare.cameraOffset.x +=speed&#xD;&#xA;    					}&#xD;&#xA;    					break;&#xD;&#xA;    			}&#xD;&#xA;    		}&#xD;&#xA;    	},col:function(id1,id2){&#xD;&#xA;    		clearInterval(s[id1.ids])&#xD;&#xA;    		this.voi(id1)&#xD;&#xA;    	},update: function() {&#xD;&#xA;    		if(inGame == 1){&#xD;&#xA;    			&#xD;&#xA;    			game.physics.arcade.overlap(this.car, this.borders, this.canMove, null, this);&#xD;&#xA;    			game.physics.arcade.overlap(this.car, this.cars, this.canMove, null, this);&#xD;&#xA;    			game.physics.arcade.overlap(this.car, this.dog, this.canMove, null, this);&#xD;&#xA;    			game.physics.arcade.overlap(this.car, this.others, this.canMove, null, this);&#xD;&#xA;    			game.physics.arcade.overlap(this.others, this.borders, this.col, null, this);&#xD;&#xA;    			// game.physics.arcade.overlap(heads.children[0], heads, this.canMove, null, this);&#xD;&#xA;    			// if(heads.children[0].x <= 0){&#xD;&#xA;    				// this.canMove()&#xD;&#xA;    			// }&#xD;&#xA;    			&#xD;&#xA;    			$.each(dogPos,function(i,e){	&#xD;&#xA;    				&#xD;&#xA;    				if(Math.abs(game.world.y) != 0 && Math.abs(game.world.y) <= dogPos[i]){&#xD;&#xA;    					dogPos[i] = 0&#xD;&#xA;    					var cc = 0&#xD;&#xA;    					var rmd = Math.floor((Math.random() * 5000)+1000)&#xD;&#xA;    					setTimeout(function(){&#xD;&#xA;    						var dd = setInterval(function(){&#xD;&#xA;    							_this.dog.children[i].position.x +=2&#xD;&#xA;    							cc++&#xD;&#xA;    							if(cc==300){&#xD;&#xA;    								clearInterval(dd)&#xD;&#xA;    							}&#xD;&#xA;    						},10)&#xD;&#xA;    					},rmd)&#xD;&#xA;    				}&#xD;&#xA;    				&#xD;&#xA;    			})&#xD;&#xA;    			&#xD;&#xA;    			if (cursors.up.isDown)&#xD;&#xA;    			{&#xD;&#xA;    				this.direction("up")&#xD;&#xA;    			}&#xD;&#xA;    			if (cursors.down.isDown)&#xD;&#xA;    			{&#xD;&#xA;    				this.direction("down")&#xD;&#xA;    			}&#xD;&#xA;    			&#xD;&#xA;    			if (cursors.left.isDown)&#xD;&#xA;    			{&#xD;&#xA;    				this.direction("left")&#xD;&#xA;    			}&#xD;&#xA;    			&#xD;&#xA;    			else if (cursors.right.isDown)&#xD;&#xA;    			{&#xD;&#xA;    				this.direction("right")&#xD;&#xA;    			}&#xD;&#xA;    			&#xD;&#xA;    			&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    }