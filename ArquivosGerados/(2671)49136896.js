    var BASE32_CODES = "0123456789bcdefghjkmnpqrstuvwxyz";&#xD;&#xA;    var BASE32_CODES_DICT = {};&#xD;&#xA;    for (var i = 0; i < BASE32_CODES.length; i++) {&#xD;&#xA;      BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;&#xD;&#xA;    }&#xD;&#xA;    var ENCODE_AUTO = 'auto';&#xD;&#xA;    var SIGFIG_HASH_LENGTH = [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18];&#xD;&#xA;    var encode = function (latitude, longitude, numberOfChars) {&#xD;&#xA;      if (numberOfChars === ENCODE_AUTO) {&#xD;&#xA;        if (typeof(latitude) === 'number' || typeof(longitude) === 'number') {&#xD;&#xA;          throw new Error('string notation required for auto precision.');&#xD;&#xA;        }&#xD;&#xA;        var decSigFigsLat = latitude.split('.')[1].length;&#xD;&#xA;        var decSigFigsLong = longitude.split('.')[1].length;&#xD;&#xA;        var numberOfSigFigs = Math.max(decSigFigsLat, decSigFigsLong);&#xD;&#xA;        numberOfChars = SIGFIG_HASH_LENGTH[numberOfSigFigs];&#xD;&#xA;      } else if (numberOfChars === undefined) {&#xD;&#xA;        numberOfChars = 9;&#xD;&#xA;      }&#xD;&#xA;      var chars = [],&#xD;&#xA;      bits = 0,&#xD;&#xA;      bitsTotal = 0,&#xD;&#xA;      hash_value = 0,&#xD;&#xA;      maxLat = 90,&#xD;&#xA;      minLat = -90,&#xD;&#xA;      maxLon = 180,&#xD;&#xA;      minLon = -180,&#xD;&#xA;      mid;&#xD;&#xA;      while (chars.length < numberOfChars) {&#xD;&#xA;        if (bitsTotal % 2 === 0) {&#xD;&#xA;          mid = (maxLon + minLon) / 2;&#xD;&#xA;          if (longitude > mid) {&#xD;&#xA;            hash_value = (hash_value << 1) + 1;&#xD;&#xA;            minLon = mid;&#xD;&#xA;          } else {&#xD;&#xA;            hash_value = (hash_value << 1) + 0;&#xD;&#xA;            maxLon = mid;&#xD;&#xA;          }&#xD;&#xA;        } else {&#xD;&#xA;          mid = (maxLat + minLat) / 2;&#xD;&#xA;          if (latitude > mid) {&#xD;&#xA;            hash_value = (hash_value << 1) + 1;&#xD;&#xA;            minLat = mid;&#xD;&#xA;          } else {&#xD;&#xA;            hash_value = (hash_value << 1) + 0;&#xD;&#xA;            maxLat = mid;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        bits++;&#xD;&#xA;        bitsTotal++;&#xD;&#xA;        if (bits === 5) {&#xD;&#xA;          var code = BASE32_CODES[hash_value];&#xD;&#xA;          chars.push(code);&#xD;&#xA;          bits = 0;&#xD;&#xA;          hash_value = 0;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      return chars.join('');&#xD;&#xA;    };