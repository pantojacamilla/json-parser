    function getChildren(parentid, callback){&#xD;&#xA;    	&#xD;&#xA;    	nodes_collection.find({parentid : parentid}).toArray(function(err, result) {&#xD;&#xA;    		&#xD;&#xA;    				var tmp = [];&#xD;&#xA;    				for(var i=0; i < result.length; i++){&#xD;&#xA;    					tmp.push(result[i].id);&#xD;&#xA;    				}&#xD;&#xA;    				callback(tmp); // This returns an array of the ids of the immediate children&#xD;&#xA;// callback(tmp) would return [id1,id2,id3,id4,id5]&#xD;&#xA;// the 'result' object I get back from the database is an array of nodes/objects. Each object has a name (node.name), and id (node.id), and a parent (node.parentid). I loop through the result and generate a simple array, extracting the ids of each.&#xD;&#xA;    		});&#xD;&#xA;    		&#xD;&#xA;    }&#xD;&#xA;    function allDescendants(parentid, callback) {&#xD;&#xA;    	getChildren(parentid, function(childNodes){&#xD;&#xA;    		if(false){ // What can my base case be?&#xD;&#xA;    			//console.log("done");&#xD;&#xA;    		}else{&#xD;&#xA;    		    for (var i = 0; i < childNodes.length; i++) {&#xD;&#xA;    		      var child = childNodes[i];&#xD;&#xA;    		      allDescendants(child);&#xD;&#xA;    		      console.log(child); // Here it prints out all the values. How can I capture them? and return them with my callback?&#xD;&#xA;    		    }&#xD;&#xA;    	    }&#xD;&#xA;    	});&#xD;&#xA;    }&#xD;&#xA;    // I call it like this:&#xD;&#xA;    allDescendants(parent_id, function(result){&#xD;&#xA;    		console.log(result);&#xD;&#xA;    		});