    function padNumber(number, width = 2, padWith = '0') {&#xD;&#xA;        const strNum = number.toString();&#xD;&#xA;        return strNum.length >= width ? strNum : new Array(width - strNum.length + 1).join(padWith) + strNum;&#xD;&#xA;    }&#xD;&#xA;    // Get UTC date time from PHP date (Y-m-d) and time (H:i:s) strings&#xD;&#xA;    function getUTCDateTime(date, time, timezoneOffset = -480) {&#xD;&#xA;        const dateParts = date.split('-').map((el) => Number(el)); // Y-m-d&#xD;&#xA;        const timeParts = time.split(':').map((el) => Number(el)); // H:i:s&#xD;&#xA;        const dateTimeUTC = new Date(Date.UTC(dateParts[0], dateParts[1], dateParts[2], timeParts[0], timeParts[1], timeParts[2]));&#xD;&#xA;        // Set back Singapore specific time (GMT+8:00)&#xD;&#xA;        dateTimeUTC.setUTCHours(dateTimeUTC.getUTCHours() + timezoneOffset / 60);&#xD;&#xA;        return dateTimeUTC;&#xD;&#xA;    }&#xD;&#xA;    function getDuration(timeStart, timeEnd = new Date()) {&#xD;&#xA;        const msDiff = timeEnd.getTime() - timeStart.getTime();&#xD;&#xA;        const minDiff = msDiff / 60000;&#xD;&#xA;        const hourDiff = Math.floor(msDiff / 3600000);&#xD;&#xA;        return {&#xD;&#xA;            hours: this.padNumber(hourDiff, 2),&#xD;&#xA;            minutes: this.padNumber(Math.floor(minDiff - 60 * hourDiff), 2)&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    // Got from server (in Singapore timezone)&#xD;&#xA;    const serverDate = '2018-10-18';&#xD;&#xA;    const serverTime = '00:22:51';&#xD;&#xA;    // Convert server date and time (timezone specific) strings to Date object&#xD;&#xA;    const serverUTC = getUTCDateTime(serverDate, serverTime);&#xD;&#xA;    // Get duration between server time and now&#xD;&#xA;    const duration = getDuration(serverUTC);&#xD;&#xA;    // Expected positive value but getting negative as server time is in past&#xD;&#xA;    console.log(duration);