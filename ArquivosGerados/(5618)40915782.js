    const testText: string = `&#xD;&#xA;    /**&#xD;&#xA;     * There are 8 active require() statements in here and 2 commented-out ones.&#xD;&#xA;     */    &#xD;&#xA;    const fs = require('fs'); require("../lib/store.js"); let t = require("crypto");&#xD;&#xA;    //OtherStuff: type defs comments etc.&#xD;&#xA;    let iah = require("./imap-account-handler.js"); //let iah = require("./inactive");&#xD;&#xA;    //let iah = require("./imap.js");&#xD;&#xA;        require("./imap-mailbox-handler");&#xD;&#xA;    const mX = require("./modX.js"); require("./modX.js"); require("./modY.js");&#xD;&#xA;    otherStuff();&#xD;&#xA;    otherStuff();&#xD;&#xA;    `;&#xD;&#xA;    const regex: RegExp = new RegExp(&#xD;&#xA;        // 1) Start indicator (account for allowed whitespace characters)&#xD;&#xA;        'require\\s*\\(\\s*["\']' +&#xD;&#xA;        // 2) match[1]: optional group for the prefix, which can only(!) be&#xD;&#xA;        //    either "../lib" or "./"&#xD;&#xA;        '(' +&#xD;&#xA;            // 2.1) ...either a prefix indicating a core "One" module&#xD;&#xA;            //      (captured by parent group)&#xD;&#xA;            '(?:\\.\\./lib/)' +&#xD;&#xA;            '|' +&#xD;&#xA;            // 2.2) ...or a prefix indicating a dynamic module&#xD;&#xA;            //      (captured by parent group)&#xD;&#xA;            '(?:\\./)' +&#xD;&#xA;        ')?' +&#xD;&#xA;        // 3) match[2]: Actual module name with or without file ending. We&#xD;&#xA;        //    exclude the character that stands for the directory hierarchy&#xD;&#xA;        //    and the two possible quote characters, everything else is&#xD;&#xA;        //    allowed: This is not a check for name validity!&#xD;&#xA;        '([^/\\"\']+)' +&#xD;&#xA;        // 4) End indicator&#xD;&#xA;        '["\']\\s*\\)',&#xD;&#xA;        // 5) Flag "g" (global)  There can be many "require(...)" commands.&#xD;&#xA;        'g'&#xD;&#xA;    );&#xD;&#xA;    let m: {[index: number]: string, index: number, input: string};&#xD;&#xA;    let count: number = 1;&#xD;&#xA;    while (m = regex.exec(testText)) {&#xD;&#xA;        console.log(&#xD;&#xA;${count++}: Prefix ${m[1] || '(none)'} ${'\t'} Name ${m[2] || '(none)'}&#xD;&#xA;        );&#xD;&#xA;    }