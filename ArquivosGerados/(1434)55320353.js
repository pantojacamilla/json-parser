    console.log("Desktop");&#xD;&#xA;    if (WEBGL.isWebGLAvailable() === false) {&#xD;&#xA;    	document.body.appendChild(WEBGL.getWebGLErrorMessage());&#xD;&#xA;    }&#xD;&#xA;    var SEPARATION = 100,&#xD;&#xA;    	AMOUNTX = 50,&#xD;&#xA;    	AMOUNTY = 50;&#xD;&#xA;    var container;&#xD;&#xA;    var camera, scene, renderer, controls;&#xD;&#xA;    var particles, count = 0;&#xD;&#xA;    var mouseX = 0,&#xD;&#xA;    	mouseY = 0;&#xD;&#xA;    var windowHalfX = window.innerWidth / 2;&#xD;&#xA;    var windowHalfY = window.innerHeight / 2;&#xD;&#xA;    // var isMobile = isOSMobile();&#xD;&#xA;    var isMobile = true;&#xD;&#xA;    init();&#xD;&#xA;    animate();&#xD;&#xA;    function init() {&#xD;&#xA;    	container = document.createElement('div');&#xD;&#xA;    	document.body.appendChild(container);&#xD;&#xA;    	camera = new THREE.PerspectiveCamera(75, window.innerWidth /&#xD;&#xA;    		window.innerHeight, 1, 10000);&#xD;&#xA;    	if (isMobile) {&#xD;&#xA;    		controls = new THREE.DeviceOrientationControls(camera);&#xD;&#xA;    	}&#xD;&#xA;    	camera.position.z = 1000;&#xD;&#xA;    	scene = new THREE.Scene();&#xD;&#xA;    	//&#xD;&#xA;    	var numParticles = AMOUNTX * AMOUNTY;&#xD;&#xA;    	var positions = new Float32Array(numParticles * 3);&#xD;&#xA;    	var scales = new Float32Array(numParticles);&#xD;&#xA;    	var i = 0,&#xD;&#xA;    		j = 0;&#xD;&#xA;    	for (var ix = 0; ix < AMOUNTX; ix++) {&#xD;&#xA;    		for (var iy = 0; iy < AMOUNTY; iy++) {&#xD;&#xA;    			positions[i] = ix * SEPARATION - ((AMOUNTX *&#xD;&#xA;    				SEPARATION) / 2); // x&#xD;&#xA;    			positions[i + 1] = 0; // y&#xD;&#xA;    			positions[i + 2] = iy * SEPARATION - ((AMOUNTY *&#xD;&#xA;    				SEPARATION) / 2); // z&#xD;&#xA;    			scales[j] = 1;&#xD;&#xA;    			i += 3;&#xD;&#xA;    			j++;&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    	var geometry = new THREE.BufferGeometry();&#xD;&#xA;    	geometry.addAttribute('position', new THREE.BufferAttribute(&#xD;&#xA;    		positions, 3));&#xD;&#xA;    	geometry.addAttribute('scale', new THREE.BufferAttribute(scales,&#xD;&#xA;    		1));&#xD;&#xA;    	var material = new THREE.ShaderMaterial({&#xD;&#xA;    		uniforms: {&#xD;&#xA;    			color: {&#xD;&#xA;    				value: new THREE.Color(isMobile ? 0xffffff : 0x8D8D8F)&#xD;&#xA;    			},&#xD;&#xA;    		},&#xD;&#xA;    		vertexShader: document.getElementById(&#xD;&#xA;    			'vertexshader').textContent,&#xD;&#xA;    		fragmentShader: document.getElementById(&#xD;&#xA;    			'fragmentshader').textContent&#xD;&#xA;    	});&#xD;&#xA;    	particles = new THREE.Points(geometry, material);&#xD;&#xA;    	scene.add(particles);&#xD;&#xA;    	renderer = new THREE.WebGLRenderer({&#xD;&#xA;    		antialias: true&#xD;&#xA;    	});&#xD;&#xA;    	renderer.setPixelRatio(window.devicePixelRatio);&#xD;&#xA;    	renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;    	container.appendChild(renderer.domElement);&#xD;&#xA;    	document.addEventListener('mousemove', onDocumentMouseMove,&#xD;&#xA;    		false);&#xD;&#xA;    	window.addEventListener('resize', onWindowResize, false);&#xD;&#xA;    	if (isMobile) {&#xD;&#xA;    		window.addEventListener("deviceorientation", handleOrientation, true);&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    function handleOrientation(e) {&#xD;&#xA;    	var absolute = e.absolute;&#xD;&#xA;    	var alpha = e.alpha;// x -90 ... 90&#xD;&#xA;    	var beta = e.beta;// y 180 ... 0&#xD;&#xA;    	var gamma = e.gamma;// x -90 ... 90&#xD;&#xA;    	mouseX = -5 * windowHalfX * (gamma / 90);&#xD;&#xA;    	//mouseY = -windowHalfY * ((beta - 90) / 90);&#xD;&#xA;    	// console.log(mouseX.toFixed(2), ' x ', mouseY.toFixed(2));&#xD;&#xA;    }&#xD;&#xA;    function onWindowResize() {&#xD;&#xA;    	windowHalfX = window.innerWidth / 2;&#xD;&#xA;    	windowHalfY = window.innerHeight / 2;&#xD;&#xA;    	camera.aspect = window.innerWidth / window.innerHeight;&#xD;&#xA;    	camera.updateProjectionMatrix();&#xD;&#xA;    	renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;    }&#xD;&#xA;    //&#xD;&#xA;    function onDocumentMouseMove(event) {&#xD;&#xA;    	mouseX = event.clientX - windowHalfX;&#xD;&#xA;    	mouseY = event.clientY - windowHalfY;&#xD;&#xA;    }&#xD;&#xA;    //&#xD;&#xA;    function animate() {&#xD;&#xA;    	requestAnimationFrame(animate);&#xD;&#xA;    	render();&#xD;&#xA;    	if (isMobile) {&#xD;&#xA;    		controls.update();&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    function render() {&#xD;&#xA;    	camera.position.x += (mouseX - camera.position.x) * .05;&#xD;&#xA;    	if(isMobile) {&#xD;&#xA;    		camera.position.y = 550;&#xD;&#xA;    	} else {&#xD;&#xA;    		camera.position.y += (-mouseY - camera.position.y) * .05;&#xD;&#xA;    	}&#xD;&#xA;    	camera.lookAt(scene.position);&#xD;&#xA;    	var positions = particles.geometry.attributes.position.array;&#xD;&#xA;    	var scales = particles.geometry.attributes.scale.array;&#xD;&#xA;    	var i = 0,&#xD;&#xA;    		j = 0;&#xD;&#xA;    	for (var ix = 0; ix < AMOUNTX; ix++) {&#xD;&#xA;    		for (var iy = 0; iy < AMOUNTY; iy++) {&#xD;&#xA;    			positions[i + 1] = (Math.sin((ix + count) * 0.3) * 50) +&#xD;&#xA;    				(Math.sin((iy + count) * 0.5) * 50);&#xD;&#xA;    			scales[j] = (Math.sin((ix + count) * 0.3) + 1) * 8 +&#xD;&#xA;    				(Math.sin((iy + count) * 0.5) + 1) * 8;&#xD;&#xA;    			i += 3;&#xD;&#xA;    			j++;&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    	particles.geometry.attributes.position.needsUpdate = true;&#xD;&#xA;    	particles.geometry.attributes.scale.needsUpdate = true;&#xD;&#xA;    	renderer.render(scene, camera);&#xD;&#xA;    	count += 0.1;&#xD;&#xA;    }&#xD;&#xA;    function isOSMobile() {&#xD;&#xA;    	var userAgent = navigator.userAgent || navigator.vendor || window.opera;&#xD;&#xA;    	if (/android/i.test(userAgent)) {&#xD;&#xA;    		return true;&#xD;&#xA;    	}&#xD;&#xA;    	if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {&#xD;&#xA;    		return true;&#xD;&#xA;    	}&#xD;&#xA;    	return false;&#xD;&#xA;    }