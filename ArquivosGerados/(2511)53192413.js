    var json_data = {&#xD;&#xA;      "headers": ["Month", "Value", "URL", "Number"],&#xD;&#xA;      "rows": [&#xD;&#xA;        ["2018-08-01 00:00:00.0", "One", "www.one.png", 100],&#xD;&#xA;        ["2018-09-01 00:00:00.0", "One", "www.one.png", 300],&#xD;&#xA;        ["2018-10-01 00:00:00.0", "One", "www.one.png", 200],    &#xD;&#xA;        ["2018-11-01 00:00:00.0", "One", "www.one.png", 400],&#xD;&#xA;        ["2018-08-01 00:00:00.0", "Two", "www.two.png", 100],&#xD;&#xA;        ["2018-09-01 00:00:00.0", "Two", "www.two.png", 224],    &#xD;&#xA;        ["2018-10-01 00:00:00.0", "Two", "www.two.png", 259],&#xD;&#xA;        ["2018-11-01 00:00:00.0", "Two", "www.two.png", 494],&#xD;&#xA;        ["2018-08-01 00:00:00.0", "Three", "www.three.png", 100],&#xD;&#xA;        ["2018-09-01 00:00:00.0", "Three", "www.three.png", 184],    &#xD;&#xA;        ["2018-10-01 00:00:00.0", "Three", "www.three.png", 319],&#xD;&#xA;        ["2018-11-01 00:00:00.0", "Three", "www.three.png", 404],&#xD;&#xA;        ["2018-08-01 00:00:00.0", "Four", "www.four.png", 100],&#xD;&#xA;        ["2018-09-01 00:00:00.0", "Four", "www.four.png", 184],&#xD;&#xA;        ["2018-11-01 00:00:00.0", "Four", "www.four.png", 404],&#xD;&#xA;        ["2018-08-01 00:00:00.0", "Five", "www.five.png", 100],&#xD;&#xA;        ["2018-09-01 00:00:00.0", "Five", "www.five.png", 274],    &#xD;&#xA;        ["2018-10-01 00:00:00.0", "Five", "www.five.png", 209],&#xD;&#xA;        ["2018-11-01 00:00:00.0", "Five", "www.five.png", 474]&#xD;&#xA;      ]&#xD;&#xA;    };&#xD;&#xA;    var dataRows = json_data.rows;&#xD;&#xA;    /* ----- !Data ----- */&#xD;&#xA;    /* ----- Functions ----- */&#xD;&#xA;    //Group by function. Provide the rows to be groupped and the number of objects to be used as a key.&#xD;&#xA;    groupBy = (rows, objectNum) => {&#xD;&#xA;        const &#xD;&#xA;          rowMap = new Map(),&#xD;&#xA;          result = [],&#xD;&#xA;          dataTemp = [];&#xD;&#xA;          &#xD;&#xA;        // Iterate over the rows.&#xD;&#xA;        rows.forEach(row => {&#xD;&#xA;          const&#xD;&#xA;            // Create a key, it is the first elements joined together.&#xD;&#xA;            key = row.slice(0,objectNum).join();&#xD;&#xA;            &#xD;&#xA;          // Check if the Map has the generated key...&#xD;&#xA;          if (rowMap.has(key)) {&#xD;&#xA;            // The map has the key, we need to add up the values&#xD;&#xA;            // Get the value for the current key.&#xD;&#xA;            const storedRow = rowMap.get(key);&#xD;&#xA;            // Add the value of the current row to the row in the map.&#xD;&#xA;            storedRow[3] += row[3];&#xD;&#xA;          } else {&#xD;&#xA;            // The key doens't exist yet, add the row to the map. Clone the array instead of "rowMap.set(key, row);"&#xD;&#xA;            rowMap.set(key, row.slice());&#xD;&#xA;          }&#xD;&#xA;        });&#xD;&#xA;        // Iterate over all the entries in the map and push each value with the summed up value into the array.&#xD;&#xA;        rowMap.forEach(value => {&#xD;&#xA;          result.push(value);&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;          return result;&#xD;&#xA;      }&#xD;&#xA;    //Chart creation function&#xD;&#xA;    createChart = (data) =>{&#xD;&#xA;    	var svg = d3.select(".g-chart").append("svg"),&#xD;&#xA;        margin = { top: 20, right: 20, bottom: 30, left: 40 },&#xD;&#xA;        x = d3.scaleBand().padding(0.1),&#xD;&#xA;        y = d3.scaleLinear(),&#xD;&#xA;        theData = undefined;&#xD;&#xA;      var g = svg.append("g")&#xD;&#xA;        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;      g.append("g")&#xD;&#xA;        .attr("class", "axis axis--x");&#xD;&#xA;      g.append("g")&#xD;&#xA;        .attr("class", "axis axis--y");&#xD;&#xA;      g.append("text")&#xD;&#xA;        .attr("transform", "rotate(-90)")&#xD;&#xA;        .attr("y", 6)&#xD;&#xA;        .attr("dy", "0.71em")&#xD;&#xA;        .attr("text-anchor", "end")&#xD;&#xA;        .text("num");&#xD;&#xA;      // DRAWING&#xD;&#xA;      function draw() {&#xD;&#xA;        var bounds = svg.node().getBoundingClientRect(),&#xD;&#xA;          width = bounds.width - margin.left - margin.right,&#xD;&#xA;          height = bounds.height - margin.top - margin.bottom;&#xD;&#xA;        x.rangeRound([0, width]);&#xD;&#xA;        y.rangeRound([height, 0]);&#xD;&#xA;        g.select(".axis--x")&#xD;&#xA;          .attr("transform", "translate(0," + height + ")")&#xD;&#xA;          .call(d3.axisBottom(x));&#xD;&#xA;        g.select(".axis--y")&#xD;&#xA;          .call(d3.axisLeft(y).ticks(10));&#xD;&#xA;        var bars = g.selectAll(".bar")&#xD;&#xA;          .data(theData);&#xD;&#xA;        // ENTER&#xD;&#xA;        bars&#xD;&#xA;          .enter().append("rect")&#xD;&#xA;          .attr("class", "bar")&#xD;&#xA;          .attr("x", function (d) { return x(d.Value); })&#xD;&#xA;          .attr("y", function (d) { return y(d.num); })&#xD;&#xA;          .attr("width", x.bandwidth())&#xD;&#xA;          .attr("height", function (d) { return height - y(d.num); });&#xD;&#xA;        // UPDATE&#xD;&#xA;        bars.attr("x", function (d) { return x(d.Value); })&#xD;&#xA;          .attr("y", function (d) { return y(d.num); })&#xD;&#xA;          .attr("width", x.bandwidth())&#xD;&#xA;          .attr("height", function (d) { return height - y(d.num); });&#xD;&#xA;        // EXIT&#xD;&#xA;        bars.exit()&#xD;&#xA;          .remove();&#xD;&#xA;      }&#xD;&#xA;      // LOADING DATA&#xD;&#xA;      function loadData(data) {&#xD;&#xA;          theData = data;&#xD;&#xA;          x.domain(theData.map(function (d) { return d.date; }));&#xD;&#xA;          y.domain([0, d3.max(theData, function (d) { return d.num; })]);&#xD;&#xA;          draw();&#xD;&#xA;      }&#xD;&#xA;      // START!&#xD;&#xA;      &#xD;&#xA;      window.addEventListener("resize", draw);&#xD;&#xA;      loadData(data);&#xD;&#xA;    }&#xD;&#xA;    //Create dictionary function (transformed JSON)&#xD;&#xA;    createDict = (data, objectNum) => {&#xD;&#xA;      groupedData = groupBy(dataRows, objectNum);&#xD;&#xA;      var dict = [];&#xD;&#xA;      for (i = 0; i < groupedData.length; i++) {&#xD;&#xA;        var object = {&#xD;&#xA;          "date": groupedData[i][0].slice(0, 10),&#xD;&#xA;          "Value": "Total",&#xD;&#xA;          "num": groupedData[i][3]&#xD;&#xA;        };&#xD;&#xA;        dict.push(object);&#xD;&#xA;      }&#xD;&#xA;      return dict;&#xD;&#xA;    }&#xD;&#xA;    /* ----- !Functions ----- */&#xD;&#xA;    /* ----- Main ----- */&#xD;&#xA;    var initialdata = createDict(dataRows, 1);&#xD;&#xA;    console.log(JSON.stringify(initialdata));&#xD;&#xA;    createChart(initialdata);&#xD;&#xA;    /* ----- !Main ----- */