    public class CustomRequest<T> extends JsonRequest<T> {&#xD;&#xA;        private final Gson gson;&#xD;&#xA;        private final Type typeOfT&#xD;&#xA;        private final Response.Listener<T> listener;&#xD;&#xA;        public CustomRequest(int method,&#xD;&#xA;                             String url,&#xD;&#xA;                             Type typeOfT,&#xD;&#xA;                             JSONObject params,&#xD;&#xA;                             Response.Listener<T> listener,&#xD;&#xA;                             Response.ErrorListener errorListener) {&#xD;&#xA;            super(method, url, params.toString(), listener, errorListener);&#xD;&#xA;            this.typeOfT = typeOfT;&#xD;&#xA;            this.listener = listener;&#xD;&#xA;            GsonBuilder gsonBuilder = new GsonBuilder();&#xD;&#xA;            gsonBuilder.registerTypeAdapter(CustomResponse<POJOA>.getClass(), new POJOADeserializer());&#xD;&#xA;            gsonBuilder.registerTypeAdapter(CustomResponse<POJOB>.getClass(), new POJOBDeserializer());&#xD;&#xA;            gsonBuilder.registerTypeAdapter(CustomResponse<POJOC>.getClass(), new POJOCDeserializer());&#xD;&#xA;            this.gson = gsonBuilder.create();&#xD;&#xA;        }&#xD;&#xA;            @Override&#xD;&#xA;        protected void deliverResponse(T response) {&#xD;&#xA;            listener.onResponse(response);&#xD;&#xA;        }&#xD;&#xA;        @Override&#xD;&#xA;        protected Response<T> parseNetworkResponse(NetworkResponse response) {&#xD;&#xA;            try {&#xD;&#xA;                String json = new String(response.data, HttpHeaderParser.parseCharset(response.headers));&#xD;&#xA;                return (Response<T>) Response.success(gson.fromJson(json, typeOfT), HttpHeaderParser.parseCacheHeaders(response));&#xD;&#xA;            } catch (UnsupportedEncodingException e) {&#xD;&#xA;                return Response.error(new ParseError(e));&#xD;&#xA;            } catch (JsonSyntaxException e) {&#xD;&#xA;                return Response.error(new ParseError(e));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }