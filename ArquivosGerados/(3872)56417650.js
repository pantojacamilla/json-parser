    app.route('/test').get((req, res) => {&#xD;&#xA;        axios&#xD;&#xA;            .get('https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=vodka')//This will not be hardcoded, but grabbed as a parameter from the endpoint&#xD;&#xA;            .then(function(response) {&#xD;&#xA;                //Purpose of this initial .then() clause is to make a call to the cocktaildb API to get the IDs of all the cocktails with a given ingredient eg: vodka.&#xD;&#xA;                var data = response.data;//response.data contains the JSON object containing the contents received by the cocktaildb API request.&#xD;&#xA;                var cocktailIds = [];&#xD;&#xA;                //collect all cocktail ids so we can later make more requests to obtain the details associated with that ID.&#xD;&#xA;                data.drinks.forEach(drink => {&#xD;&#xA;                    cocktailIds.push(drink['idDrink']);&#xD;&#xA;                });&#xD;&#xA;                //this is passed on to the next then clause. It is a list of cocktail ids.&#xD;&#xA;                return cocktailIds;&#xD;&#xA;            })&#xD;&#xA;            .then((drinks) => {&#xD;&#xA;                //the promises variable contains a list of all the requests we will have to make in order to get the details of all cocktail ids. I have tested that they are valid requests.&#xD;&#xA;                const promises = drinks.map(id => {&#xD;&#xA;                    //console.log(getCocktailDetailsUrl + id);&#xD;&#xA;                    return axios.get(getCocktailDetailsUrl + id)&#xD;&#xA;                    .then(({data}) => {&#xD;&#xA;                        return data;&#xD;&#xA;                    })&#xD;&#xA;                })&#xD;&#xA;                &#xD;&#xA;                //I was hoping Promise.All to execute all of the requests in the promise and response to be stored in the cocktailDetails variable&#xD;&#xA;                const cocktailDetails = Promise.all(promises)&#xD;&#xA;                .then(values => {&#xD;&#xA;                    return values;&#xD;&#xA;                })&#xD;&#xA;                .catch(error => {&#xD;&#xA;                    console.log("There was an error when sending requests for details of all cocktails");&#xD;&#xA;                    console.log(error);&#xD;&#xA;                })&#xD;&#xA;                //Sending response only formatted this way for testing purposes&#xD;&#xA;                if(cocktailDetails) {&#xD;&#xA;                    //this block is executed, and an empty object is returned as response&#xD;&#xA;                    console.log("cocktails was sent as response");&#xD;&#xA;                    res.send(cocktailDetails);&#xD;&#xA;                } else {&#xD;&#xA;                    console.log("cocktails was not sent as response");&#xD;&#xA;                    res.send("cocktailDetails was not poppulated at the time of sending response");&#xD;&#xA;                }&#xD;&#xA;            })&#xD;&#xA;            .catch(function (error) {&#xD;&#xA;                res.send("There was an iswsue with your request to the cocktaildb API.");&#xD;&#xA;                console.log('The following is the error from the request to the cocktaildb API: ' + error);&#xD;&#xA;            })&#xD;&#xA;    });