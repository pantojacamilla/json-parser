    let MDA = [&#xD;&#xA;      [ '','','UndefineD','nuLL','trUe','fAlsE','TruE','FalSe','NaN','NAN'],&#xD;&#xA;      [ '1', '2', '3', '4', '5', 'TRUE', 'FALSE', '8', '9', '10' ],&#xD;&#xA;      [ 'a', 'TrUe', 'FaLsE', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]&#xD;&#xA;    ];&#xD;&#xA;    function conversion(str) {&#xD;&#xA;      let regComma = /\b(,")(.*?(?:(?!\b,".*",).)*)(",)/g,&#xD;&#xA;          regNumber = /^((\s+)?((-)|\.)?)?[\d\.]+(\s+)?$/g,&#xD;&#xA;          regBoolean = /^(\s+)?(true|false)(\s+)?$/gi,&#xD;&#xA;          regUndefined = /^(\s+)?(undefined|null)(\s+)?$/gi,&#xD;&#xA;          regNaN = /^(\s)?nan(\s)?$/gi;&#xD;&#xA;      if (regNumber.test(str)) {return parseInt(str);}&#xD;&#xA;      if (regBoolean.test(str)) {return /t/i.test(str)?true:false;}&#xD;&#xA;      if (regUndefined.test(str)) {return /d/i.test(str)?undefined:null;}&#xD;&#xA;      if (regNaN.test(str)) {return NaN;}&#xD;&#xA;      return str;&#xD;&#xA;    }&#xD;&#xA;    for(var i = 0; i < MDA.length; i++) {&#xD;&#xA;        let cube = MDA[i];&#xD;&#xA;        for(var j = 0; j < cube.length; j++) {&#xD;&#xA;        let cell = cube[j],&#xD;&#xA;        	convert = conversion(cell);&#xD;&#xA;          MDA[i][j] = convert;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    console.log(MDA)