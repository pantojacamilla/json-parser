    import {&#xD;&#xA;      GraphQLSchema,&#xD;&#xA;      GraphQLObjectType,&#xD;&#xA;      GraphQLString,&#xD;&#xA;      GraphQLInt,&#xD;&#xA;      GraphQLList,&#xD;&#xA;      GraphQLID,&#xD;&#xA;      GraphQLNonNull&#xD;&#xA;    } from 'graphql';&#xD;&#xA;    import {&#xD;&#xA;      nodeDefinitions,&#xD;&#xA;      fromGlobalId,&#xD;&#xA;      globalIdField,&#xD;&#xA;      connectionDefinitions,&#xD;&#xA;      connectionFromArray,&#xD;&#xA;      connectionArgs,&#xD;&#xA;      mutationWithClientMutationId&#xD;&#xA;    } from 'graphql-relay';&#xD;&#xA;    class App {};&#xD;&#xA;    class Personnel {};&#xD;&#xA;    let app = new App();&#xD;&#xA;    let Personnels = [];&#xD;&#xA;    (() => {&#xD;&#xA;      let Jason = new Personnel();&#xD;&#xA;      let John = new Personnel();&#xD;&#xA;      Jason.name = 'Jason';&#xD;&#xA;      Jason.id = 1;&#xD;&#xA;      John.name = 'John';&#xD;&#xA;      John.id = 2;&#xD;&#xA;      personnels.push(YangGuoRong);&#xD;&#xA;      personnels.push(DengLiFang);&#xD;&#xA;    })();&#xD;&#xA;    let {nodeInterface, nodeField} = nodeDefinitions(&#xD;&#xA;      (gloablId) => {&#xD;&#xA;        const {type} = fromGlobalId(globalId);&#xD;&#xA;        switch(type) {&#xD;&#xA;          case 'App':&#xD;&#xA;            return app;&#xD;&#xA;          default:&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;      },&#xD;&#xA;      (obj) => {&#xD;&#xA;        if (obj instanceof App) {&#xD;&#xA;          return appType;&#xD;&#xA;        } else if (obj instanceof Personnel) {&#xD;&#xA;          return personnelType;&#xD;&#xA;        } else {&#xD;&#xA;          return null;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    );&#xD;&#xA;    let getPersonnel = (id) => personnels[id];&#xD;&#xA;    let getPersonnels = () => personnels;&#xD;&#xA;    let appType = new GraphQLObjectType({&#xD;&#xA;      name: 'App',&#xD;&#xA;      fields: () => ({&#xD;&#xA;        id: globalIdField('App'),&#xD;&#xA;        personnels: {&#xD;&#xA;          type: personnelConnection.connectionType,&#xD;&#xA;          args: connectionArgs,&#xD;&#xA;          resolve: (_, args) => connectionFromArray(personnels, args)&#xD;&#xA;        }&#xD;&#xA;      }),&#xD;&#xA;      interfaces: [nodeInterface]&#xD;&#xA;    });&#xD;&#xA;    let personnelType = new GraphQLObjectType({&#xD;&#xA;      name: 'Personnel',&#xD;&#xA;      fields: () => ({&#xD;&#xA;        id: {&#xD;&#xA;          type: new GraphQLNonNull(GraphQLID),&#xD;&#xA;          resolve: (obj) => obj.id&#xD;&#xA;        },&#xD;&#xA;        name: {type: GraphQLString},&#xD;&#xA;      }),&#xD;&#xA;    });&#xD;&#xA;    let personnelConnection = connectionDefinitions({&#xD;&#xA;      name: 'Personnel',&#xD;&#xA;      nodeType: personnelType&#xD;&#xA;    });&#xD;&#xA;    new GraphQLObjectType({&#xD;&#xA;        name: 'Query',&#xD;&#xA;        fields: {&#xD;&#xA;          node: nodeField,&#xD;&#xA;          app: {&#xD;&#xA;            type: appType,&#xD;&#xA;            resolve: () => app&#xD;&#xA;          },&#xD;&#xA;        }&#xD;&#xA;      }),&#xD;&#xA;    });&#xD;&#xA;    export default schema;