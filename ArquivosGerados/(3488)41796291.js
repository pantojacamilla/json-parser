    import {StoreData, INITIAL_STORE_DATA} from "../store-data";&#xD;&#xA;    import {Action} from "@ngrx/store";&#xD;&#xA;    import {&#xD;&#xA;      USER_THREADS_LOADED_ACTION, UserThreadsLoadedAction, SEND_NEW_MESSAGE_ACTION,&#xD;&#xA;      SendNewMessageAction&#xD;&#xA;    } from "../actions";&#xD;&#xA;    import * as _ from "lodash";&#xD;&#xA;    import {Message} from "../../shared-vh/model/message";&#xD;&#xA;    import {ThreadsService} from "../../shared-vh/services/threads.service";&#xD;&#xA;    export function storeData(state: StoreData = INITIAL_STORE_DATA, action: Action): StoreData {&#xD;&#xA;      switch (action.type) {&#xD;&#xA;        case SEND_NEW_MESSAGE_ACTION:&#xD;&#xA;          return handleSendNewMessageAction(state, action);&#xD;&#xA;        default:&#xD;&#xA;          return state&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    function handleSendNewMessageAction(state:StoreData, action:SendNewMessageAction): StoreData {&#xD;&#xA;     &#xD;&#xA;      const newStoreData = _.cloneDeep(state);&#xD;&#xA;      const currentThread = newStoreData.threads[action.payload.threadId];&#xD;&#xA;      const newMessage: Message = {&#xD;&#xA;        text: action.payload.text,&#xD;&#xA;        threadId: action.payload.threadId,&#xD;&#xA;        timestamp: new Date().getTime(),&#xD;&#xA;        participantId: action.payload.participantId,&#xD;&#xA;        id: [need a function from this service: ThreadsService]&#xD;&#xA;      }&#xD;&#xA;      currentThread.messageIds.push(newMessage.id);&#xD;&#xA;      newStoreData.messages[newMessage.id] = newMessage;&#xD;&#xA;      return newStoreData;&#xD;&#xA;    }