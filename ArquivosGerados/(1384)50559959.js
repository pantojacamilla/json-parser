    const cvs = document.getElementById("cvs"),&#xD;&#xA;      {&#xD;&#xA;        width: W,&#xD;&#xA;        height: H&#xD;&#xA;      } = cvs.getBoundingClientRect();&#xD;&#xA;    cvs.width = W;&#xD;&#xA;    cvs.height = H;&#xD;&#xA;    const gl = cvs.getContext("experimental-webgl", {&#xD;&#xA;        premultipliedAlpha: false&#xD;&#xA;      }),&#xD;&#xA;      VERTEX_SHADER = `attribute vec4 a_Position;&#xD;&#xA;        attribute vec2 a_TexCoord;&#xD;&#xA;        varying vec2 v_TexCoord;&#xD;&#xA;        void main() {&#xD;&#xA;          gl_Position = a_Position;&#xD;&#xA;          v_TexCoord = a_TexCoord;&#xD;&#xA;        }`,&#xD;&#xA;      FRAGMENT_SHADER = `precision mediump float;&#xD;&#xA;        uniform sampler2D u_Sampler;&#xD;&#xA;        varying vec2 v_TexCoord;&#xD;&#xA;        void main() {&#xD;&#xA;          gl_FragColor.rgb = texture2D(u_Sampler, v_TexCoord).rgb;&#xD;&#xA;          gl_FragColor.a = 1.0;&#xD;&#xA;        }`,&#xD;&#xA;      vshader = gl.createShader(gl.VERTEX_SHADER),&#xD;&#xA;      fshader = gl.createShader(gl.FRAGMENT_SHADER),&#xD;&#xA;      program = gl.createProgram();&#xD;&#xA;    gl.shaderSource(vshader, VERTEX_SHADER);&#xD;&#xA;    gl.shaderSource(fshader, FRAGMENT_SHADER);&#xD;&#xA;    gl.compileShader(vshader);&#xD;&#xA;    gl.compileShader(fshader);&#xD;&#xA;    gl.attachShader(program, vshader);&#xD;&#xA;    gl.attachShader(program, fshader);&#xD;&#xA;    gl.linkProgram(program);&#xD;&#xA;    gl.useProgram(program);&#xD;&#xA;    gl.clearColor(0.0, 0.0, 0.0, 1.0);&#xD;&#xA;    gl.clear(gl.COLOR_BUFFER_BIT);&#xD;&#xA;    const farr = new Float32Array([-1, 1, 0, 1, -1, -1, 0, 0,&#xD;&#xA;      1, 1, 1, 1,&#xD;&#xA;      1, -1, 1, 0&#xD;&#xA;    ]);&#xD;&#xA;    const buffer = gl.createBuffer();&#xD;&#xA;    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);&#xD;&#xA;    gl.bufferData(gl.ARRAY_BUFFER, farr, gl.STATIC_DRAW);&#xD;&#xA;    const a_Position = gl.getAttribLocation(program, "a_Position"),&#xD;&#xA;      a_TexCoord = gl.getAttribLocation(program, "a_TexCoord"),&#xD;&#xA;      fsize = farr.BYTES_PER_ELEMENT;&#xD;&#xA;    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 4 * fsize, 0);&#xD;&#xA;    gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, 4 * fsize, 2 * fsize);&#xD;&#xA;    gl.enableVertexAttribArray(a_Position);&#xD;&#xA;    gl.enableVertexAttribArray(a_TexCoord);&#xD;&#xA;    var image = document.getElementById("img"),&#xD;&#xA;      context = image.getContext("2d"),&#xD;&#xA;      imageData = context.getImageData(0, 0, 2, 2),&#xD;&#xA;      pixels = imageData.data;&#xD;&#xA;    for (var i = 0; i < pixels.length; i++) {&#xD;&#xA;      pixels[i] = 255;&#xD;&#xA;    }&#xD;&#xA;    pixels[0 * 4 + 3] = 0;&#xD;&#xA;    pixels[1 * 4 + 3] = 1;&#xD;&#xA;    pixels[2 * 4 + 3] = 128;&#xD;&#xA;    context.putImageData(imageData, 0, 0, 0, 0, 2, 2);&#xD;&#xA;    const texture = gl.createTexture(),&#xD;&#xA;      u_Sampler = gl.getUniformLocation(program, "u_Sampler");&#xD;&#xA;    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);&#xD;&#xA;    gl.activeTexture(gl.TEXTURE0);&#xD;&#xA;    gl.bindTexture(gl.TEXTURE_2D, texture);&#xD;&#xA;    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);&#xD;&#xA;    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);&#xD;&#xA;    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);&#xD;&#xA;    gl.uniform1i(u_Sampler, 0);&#xD;&#xA;    gl.clear(gl.COLOR_BUFFER_BIT);&#xD;&#xA;    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);