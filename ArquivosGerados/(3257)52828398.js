      export class CustomHttpClient extends HttpClient {&#xD;&#xA;        request(first: string | HttpRequest<any>, url?: string, options: CustomHttpOptions = {}): Observable<any> {&#xD;&#xA;            const res = super.request(first as string, url, options);&#xD;&#xA;            res.subscribe(&#xD;&#xA;                () => { // Success&#xD;&#xA;                    // Some action on success&#xD;&#xA;                },&#xD;&#xA;                () => { // error&#xD;&#xA;                    // Some action on error&#xD;&#xA;                }&#xD;&#xA;            );&#xD;&#xA;            return res;&#xD;&#xA;        }&#xD;&#xA;        post(url: string, body: any | null, options: CustomHttpOptions = {}): Observable<any> {&#xD;&#xA;            return this.request('POST', url, addBody(options, body));&#xD;&#xA;        }&#xD;&#xA;        put(url: string, body: any | null, options: CustomHttpOptions = {}): Observable<any> {&#xD;&#xA;            return this.request('PUT', url, addBody(options, body));&#xD;&#xA;        }&#xD;&#xA;        patch(url: string, body: any | null, options: CustomHttpOptions = {}): Observable<any> {&#xD;&#xA;            return this.request('PATCH', url, addBody(options, body));&#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;          function addBody<T>(options: CustomHttpOptions, body: T | null) {&#xD;&#xA;            const opts = { ...options, body };&#xD;&#xA;            return opts;&#xD;&#xA;          }&#xD;&#xA;          export interface CustomHttpOptions {&#xD;&#xA;            body?: any;&#xD;&#xA;            headers?: HttpHeaders | { [header: string]: string | string[]; };&#xD;&#xA;            observe?: 'body' | HttpObserve | any;&#xD;&#xA;            params?: HttpParams | { [param: string]: string | string[]; };&#xD;&#xA;            reportProgress?: boolean;&#xD;&#xA;            responseType?: 'arraybuffer' | 'blob' | 'json' | 'text' | any;&#xD;&#xA;            withCredentials?: boolean;&#xD;&#xA;            customParameter?: boolean;&#xD;&#xA;         }