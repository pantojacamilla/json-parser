    /*&#xD;&#xA;       This program implements a BasicStatisticsCalculator based on a Menu-driven app.&#xD;&#xA;    */&#xD;&#xA;    import java.util.Scanner; // Scanner is in the java.util package&#xD;&#xA;    //import java.util.*;&#xD;&#xA;    public class BasicStatisticsCalculator {&#xD;&#xA;      static final int NUMBER_OF_ELEMENTS = 6;&#xD;&#xA;      static int[] numbers = new int[NUMBER_OF_ELEMENTS];&#xD;&#xA;      public static void main(String[] args) {&#xD;&#xA;        do {&#xD;&#xA;          switch (menu()) {&#xD;&#xA;            case 'a':&#xD;&#xA;              insertSeries(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'b':&#xD;&#xA;              mean(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'c':&#xD;&#xA;              median(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'd':&#xD;&#xA;              mode(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'e':&#xD;&#xA;              sd(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'f':&#xD;&#xA;              showSeries(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'g':&#xD;&#xA;              greaterThanMean(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'h':&#xD;&#xA;              smallerThanMean(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'i':&#xD;&#xA;              bubbleSort(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'j':&#xD;&#xA;              fullReport(numbers);&#xD;&#xA;              break;&#xD;&#xA;            case 'q':&#xD;&#xA;              System.exit(0);&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        while (true);&#xD;&#xA;      }&#xD;&#xA;      //Menu Display&#xD;&#xA;      static char menu() {&#xD;&#xA;          Scanner input = new Scanner(System.in);&#xD;&#xA;          System.out.println("\n\nBASIC STATISTICS CALCULATOR");&#xD;&#xA;          System.out.println(" a. Insert Series");&#xD;&#xA;          System.out.println(" b. Mean");&#xD;&#xA;          System.out.println(" c. Median");&#xD;&#xA;          System.out.println(" d. Mode");&#xD;&#xA;          System.out.println(" e. Standard Deviation");&#xD;&#xA;          System.out.println(" f. Show Series");&#xD;&#xA;          System.out.println(" g. Show Elements greater than the mean");&#xD;&#xA;          System.out.println(" h. Show Elements smaller than the mean");&#xD;&#xA;          System.out.println(" i. Show series in order");&#xD;&#xA;          System.out.println(" j. Show Full Report");&#xD;&#xA;          System.out.println("\n q. Quit");&#xD;&#xA;          System.out.print("\nInsert option: ");&#xD;&#xA;          return (input.next().charAt(0));&#xD;&#xA;        } //END menu display   &#xD;&#xA;      /*Insert series */&#xD;&#xA;      static void insertSeries(int[] numbers) {&#xD;&#xA;          java.util.Scanner input = new java.util.Scanner(System.in);&#xD;&#xA;          for (int i = 0; i < numbers.length; i++) {&#xD;&#xA;            System.out.print("Enter a new number: ");&#xD;&#xA;            numbers[i] = input.nextInt();&#xD;&#xA;          }&#xD;&#xA;        } //END USER INPUT PROMPT &#xD;&#xA;      /*Show series */&#xD;&#xA;      static void showSeries(int[] numbers) {&#xD;&#xA;          System.out.print("\nSeries: ");&#xD;&#xA;          for (int i = 0; i < numbers.length; i++) {&#xD;&#xA;            System.out.print(numbers[i] + " ");&#xD;&#xA;          }&#xD;&#xA;        } //END DISPLAY SERIES&#xD;&#xA;      /*Show series overloaded with two parameters */&#xD;&#xA;      static void showSeries(int[] numbers, String s) {&#xD;&#xA;        System.out.print("\n" + s);&#xD;&#xA;        for (int i = 0; i < numbers.length; i++) {&#xD;&#xA;          System.out.print(numbers[i] + " ");&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      /*Find the mean value */&#xD;&#xA;      static void mean(int[] numbers) {&#xD;&#xA;          float sum = 0;&#xD;&#xA;          for (int i = 0; i < numbers.length; i++) sum += numbers[i];&#xD;&#xA;          System.out.print("\nMean: " + sum / numbers.length);&#xD;&#xA;        } //END MEAN     &#xD;&#xA;      /*Find the median value */&#xD;&#xA;      public static double median(int[] numbers) {&#xD;&#xA;          int[] numbers2 = bubbleSort(numbers);&#xD;&#xA;          for (int i = 0; i < numbers.length; i++); {&#xD;&#xA;            /********** GIVES variable not used ERROR NOT SURE WHY******/&#xD;&#xA;            //double num = numbers[i];&#xD;&#xA;          }&#xD;&#xA;          int indexB = numbers.length / 2;&#xD;&#xA;          int indexA = (numbers.length - 1) / 2;&#xD;&#xA;          double median;&#xD;&#xA;          if (numbers.length % 2 == 0)&#xD;&#xA;            median = ((double)(numbers[numbers.length / 2] + (double) numbers[numbers.length / 2 - 1])) / 2;&#xD;&#xA;          else&#xD;&#xA;            median = ((double)(numbers2[indexA] + numbers2[indexB])) / 2;&#xD;&#xA;          median = (double) numbers[numbers.length / 2];&#xD;&#xA;          System.out.println("The median number is : " + median);&#xD;&#xA;          //Copy vector to be sorted&#xD;&#xA;          //Sort the input sequence&#xD;&#xA;          //Show the median&#xD;&#xA;          return 0;&#xD;&#xA;        } //END MEDIAN&#xD;&#xA;      /*Find the mode value */&#xD;&#xA;      static void mode(int[] numbers) {&#xD;&#xA;          //Create a frequency vector&#xD;&#xA;          int offset = min(numbers);&#xD;&#xA;          int[] numbers2 = numbers.clone();&#xD;&#xA;          for (int i = 0; i < numbers2.length; i++) numbers2[i] = numbers[i] - offset;&#xD;&#xA;          int interval = max(numbers) - offset;&#xD;&#xA;          int[] frequency = new int[interval + 1];&#xD;&#xA;          for (int i = 0; i < numbers.length; i++) frequency[numbers2[i]] ++;&#xD;&#xA;          if (maxIndex(frequency) == -1) System.out.print("\nMode: All elements have the same frequency");&#xD;&#xA;          else System.out.print("\nMode: " + ((maxIndex(frequency)) + offset));&#xD;&#xA;        } //End Mode   &#xD;&#xA;      /*Find the maximum value */&#xD;&#xA;      static int max(int[] numbers) {&#xD;&#xA;          int max = numbers[0];&#xD;&#xA;          for (int i = 1; i < numbers.length; i++)&#xD;&#xA;            if (max < numbers[i]) max = numbers[i];&#xD;&#xA;          return max;&#xD;&#xA;        } //End Max Value  &#xD;&#xA;      /*Find the minimum value */&#xD;&#xA;      static int min(int[] numbers) {&#xD;&#xA;        int min = numbers[0];&#xD;&#xA;        for (int i = 1; i < numbers.length; i++)&#xD;&#xA;          if (min > numbers[i]) min = numbers[i];&#xD;&#xA;        return min;&#xD;&#xA;      }&#xD;&#xA;      /*Find the maximum value */&#xD;&#xA;      static int maxIndex(int[] frequency) {&#xD;&#xA;          boolean noMax = true;&#xD;&#xA;          //Check to see if there is no maximum&#xD;&#xA;          int max = max(frequency);&#xD;&#xA;          for (int i = 0; i < frequency.length; i++)&#xD;&#xA;            if (max != frequency[i] && frequency[i] != 0) noMax = false;&#xD;&#xA;            //Return the index associated to the maximum&#xD;&#xA;          if (noMax) return -1;&#xD;&#xA;          else {&#xD;&#xA;            max = frequency[0];&#xD;&#xA;            int index = 0;&#xD;&#xA;            for (int i = 0; i < frequency.length; i++)&#xD;&#xA;              if (max < frequency[i]) {&#xD;&#xA;                max = frequency[i];&#xD;&#xA;                index = i;&#xD;&#xA;              }&#xD;&#xA;            return index;&#xD;&#xA;          } //End else&#xD;&#xA;        } //End MAX Value  index &#xD;&#xA;      /*Find the standard deviation */&#xD;&#xA;      static void sd(int[] numbers) {&#xD;&#xA;        //NEED SD CODE HERE&#xD;&#xA;      }&#xD;&#xA;      /*Show values greater than mean */&#xD;&#xA;      static void greaterThanMean(int[] numbers) {&#xD;&#xA;        float sum = 0;&#xD;&#xA;        float mean;&#xD;&#xA;        for (int i = 0; i < numbers.length; i++) sum += numbers[i];&#xD;&#xA;        mean = sum / numbers.length;&#xD;&#xA;        System.out.print("\nElements greater than mean: ");&#xD;&#xA;        for (int i = 0; i < numbers.length; i++)&#xD;&#xA;          if (numbers[i] > mean) System.out.print(numbers[i] + " ");&#xD;&#xA;      }&#xD;&#xA;      /*Show values smaller than mean */&#xD;&#xA;      static void smallerThanMean(int[] numbers) {&#xD;&#xA;        float sum = 0;&#xD;&#xA;        float mean;&#xD;&#xA;        for (int i = 0; i < numbers.length; i++) sum += numbers[i];&#xD;&#xA;        mean = sum / numbers.length;&#xD;&#xA;        System.out.print("\nElements smaller than mean: ");&#xD;&#xA;        for (int i = 0; i < numbers.length; i++)&#xD;&#xA;          if (numbers[i] < mean) System.out.print(numbers[i] + " ");&#xD;&#xA;      }&#xD;&#xA;      /*Bubble sort algorithm */&#xD;&#xA;      /**&#xD;&#xA;       *&#xD;&#xA;       * @param series&#xD;&#xA;       * @return&#xD;&#xA;       */&#xD;&#xA;      public static int[] bubbleSort(int[] series) {&#xD;&#xA;          if (series != null) {&#xD;&#xA;            int[] vector = series.clone();&#xD;&#xA;            int aux;&#xD;&#xA;            for (int i = 0; i < vector.length; i++) {&#xD;&#xA;              for (int j = 0; j < vector.length - (i + 1); j++) {&#xD;&#xA;                if (vector[j] > vector[j + 1]) {&#xD;&#xA;                  aux = vector[j + 1];&#xD;&#xA;                  vector[j + 1] = vector[j];&#xD;&#xA;                  vector[j] = aux;&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;            showSeries(vector, "Ordered series: ");&#xD;&#xA;          }&#xD;&#xA;          return numbers;&#xD;&#xA;        } //END SORT &#xD;&#xA;      /*Show all statistics*/&#xD;&#xA;      static void fullReport(int[] numbers) {&#xD;&#xA;        showSeries(numbers);&#xD;&#xA;        mean(numbers);&#xD;&#xA;        median(numbers);&#xD;&#xA;        mode(numbers);&#xD;&#xA;        sd(numbers);&#xD;&#xA;        greaterThanMean(numbers);&#xD;&#xA;        smallerThanMean(numbers);&#xD;&#xA;        bubbleSort(numbers);&#xD;&#xA;      }&#xD;&#xA;    } //End BasicStatisticCalculator