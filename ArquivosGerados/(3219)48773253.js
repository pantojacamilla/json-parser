    protractorParser.prototype.parseResults = function (fileName) {&#xD;&#xA;        return new Promise((resolve, reject) => {&#xD;&#xA;            console.log('In parseresults', fileName);&#xD;&#xA;            json.readFile(fileName, function (err, obj) {&#xD;&#xA;                try {&#xD;&#xA;                    if (err != null) {&#xD;&#xA;                        console.log('error reading file',err);&#xD;&#xA;                        reject(err);&#xD;&#xA;                    }&#xD;&#xA;                    console.log('obj - ',obj);&#xD;&#xA;                    var results = [];&#xD;&#xA;                    var Passed = 0;&#xD;&#xA;                    var Message = '';&#xD;&#xA;                    var Stack = '';&#xD;&#xA;                    for (var suite in obj) {&#xD;&#xA;                        var specs = obj[suite].specs;&#xD;&#xA;                        console.log('spec - ', specs);&#xD;&#xA;                        if (specs.length > 0) {&#xD;&#xA;                            for (var i = 0; i < specs.length; i++) {&#xD;&#xA;                                var assert = specs[i];&#xD;&#xA;                                var tcR = new RegExp(/TC[\d]+/);&#xD;&#xA;                                var tc = assert.description.match(tcR);&#xD;&#xA;                                if (!assert.failedExpectations.length) {&#xD;&#xA;                                    Passed = 1;&#xD;&#xA;                                }&#xD;&#xA;                                else {&#xD;&#xA;                                    assert.failedExpectations.forEach((expectation) => {&#xD;&#xA;                                        Message = expectation.message;&#xD;&#xA;                                        Stack = expectation.stack.split('\n')[1].trim();&#xD;&#xA;                                    })&#xD;&#xA;                                    Passed = 0;&#xD;&#xA;                                }&#xD;&#xA;                                if (tc != null) {&#xD;&#xA;                                    utility.TestDataManager.insertAutomationResults(tc[0], assert.description, Passed, process.env.testBuild,&#xD;&#xA;                                        'P', Message, Stack, 0, moment().utcOffset(config.get('settings.timeOffset')).format('YYYY-MM-DDTHH:mm:ss'), '')&#xD;&#xA;                                        .then(function (resp) {&#xD;&#xA;                                            resolve(Passed);&#xD;&#xA;                                        }, (err) => {&#xD;&#xA;                                            console.log('Posting to Database failed ', err);&#xD;&#xA;                                            reject(err);&#xD;&#xA;                                        });&#xD;&#xA;                                } else {&#xD;&#xA;                                    console.log('no test case found for test: ' + assert.description + ' -- skipping');&#xD;&#xA;                                    reject(err); &#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                catch (err) {&#xD;&#xA;                    console.log('rejecting opening file');&#xD;&#xA;                    reject(err);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        })&#xD;&#xA;    }