    class MyClass {&#xD;&#xA;      constructor() {&#xD;&#xA;        this.a = function() {return ("a");};&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      b() { return ("b"); }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    MyClass.prototype.c = function() { return ("c"); }&#xD;&#xA;    &#xD;&#xA;    const m = new MyClass();&#xD;&#xA;    &#xD;&#xA;    // Sanity check: All three functions are callable and return correct results&#xD;&#xA;    console.log(m.a()); // "a"&#xD;&#xA;    console.log(m.b()); // "b"&#xD;&#xA;    console.log(m.c()); // "c"&#xD;&#xA;    &#xD;&#xA;    // Expected: The only property of the object m itself is a&#xD;&#xA;    console.log(Object.keys(m)); // ["a"]&#xD;&#xA;    &#xD;&#xA;    // Unexpected: Where is b?&#xD;&#xA;    console.log(Object.keys(Object.getPrototypeOf(m))); // ["c"]&#xD;&#xA;    console.log(Object.keys(MyClass.prototype)); // ["c"]