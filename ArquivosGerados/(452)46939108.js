    var tgaLoader = new THREE.TGALoader();&#xD;&#xA;    var objectLoader = new THREE.ObjectLoader();&#xD;&#xA;    var clock = new THREE.Clock();&#xD;&#xA;    var SCREEN_WIDTH = window.innerWidth;&#xD;&#xA;    var SCREEN_HEIGHT = window.innerHeight;&#xD;&#xA;    renderer = new THREE.WebGLRenderer({ antialias: true });&#xD;&#xA;    renderer.setPixelRatio(window.devicePixelRatio);&#xD;&#xA;    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);&#xD;&#xA;    document.getElementById('container').appendChild(renderer.domElement);&#xD;&#xA;    objectLoader.load('//cdn.rawgit.com/PiranhaGreg/files/master/scavenger.json', function (loadedScene) {&#xD;&#xA;      scene = loadedScene;&#xD;&#xA;      mesh = scene.children[0];&#xD;&#xA;      scene.background = new THREE.Color('white');&#xD;&#xA;      mesh.material = new THREE.MeshPhongMaterial({ map: tgaLoader.load('//cdn.rawgit.com/PiranhaGreg/files/master/SCA_BODY_V0.TGA') });&#xD;&#xA;      hemiLight = new THREE.HemisphereLight('white', 'white', 0.6);&#xD;&#xA;      scene.add(hemiLight);&#xD;&#xA;      camera = new THREE.PerspectiveCamera(30, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000);&#xD;&#xA;      camera.position.set(500, 200, -100);&#xD;&#xA;      controls = new THREE.OrbitControls(camera);&#xD;&#xA;      controls.target.set(0, 50, 0);&#xD;&#xA;      controls.update();&#xD;&#xA;      var geometry = new THREE.PlaneBufferGeometry(200, 200);&#xD;&#xA;      var material = new THREE.MeshPhongMaterial({ shininess: 0.1 });&#xD;&#xA;      var ground = new THREE.Mesh(geometry, material);&#xD;&#xA;      ground.rotation.x = - Math.PI / 2;&#xD;&#xA;      scene.add(ground);&#xD;&#xA;      mesh.scale.set(-1, -1, 1);&#xD;&#xA;      // Critical section...&#xD;&#xA;      mixer = new THREE.AnimationMixer(mesh);&#xD;&#xA;      var sequence = THREE.AnimationClip.CreateFromMorphTargetSequence('animation', mesh.geometry.morphTargets, 25, true);&#xD;&#xA;      var animation = mixer.clipAction(sequence);&#xD;&#xA;      animation.play();&#xD;&#xA;      // End of critital section&#xD;&#xA;      animate();&#xD;&#xA;    });&#xD;&#xA;    window.onresize = function() {&#xD;&#xA;      camera.aspect = window.innerWidth / window.innerHeight;&#xD;&#xA;      camera.updateProjectionMatrix();&#xD;&#xA;      renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;    };&#xD;&#xA;    function animate() {&#xD;&#xA;      requestAnimationFrame(animate);&#xD;&#xA;      render();&#xD;&#xA;    }&#xD;&#xA;    function render() {&#xD;&#xA;      var delta = 0.75 * clock.getDelta();&#xD;&#xA;      mixer.update(delta);&#xD;&#xA;      renderer.render(scene, camera);&#xD;&#xA;    }