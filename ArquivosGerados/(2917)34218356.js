    var myApp = angular.module('myApp', []);&#xD;&#xA;    myApp.controller('MyCtrl', function($scope) {&#xD;&#xA;      $scope.currencyVal = 123456;&#xD;&#xA;    });&#xD;&#xA;    myApp.directive('currencyInput', function($filter, $browser) {&#xD;&#xA;      return {&#xD;&#xA;        require: 'ngModel',&#xD;&#xA;        link: function($scope, $element, $attrs, ngModelCtrl) {&#xD;&#xA;          var listener = function() {&#xD;&#xA;            var value = $element.val().replace(/,/g, '')&#xD;&#xA;            $element.val($filter('number')(value, false))&#xD;&#xA;          }&#xD;&#xA;          // This runs when we update the text field&#xD;&#xA;          ngModelCtrl.$parsers.push(function(viewValue) {&#xD;&#xA;            return viewValue.replace(/,/g, '');&#xD;&#xA;          })&#xD;&#xA;          // This runs when the model gets updated on the scope directly and keeps our view in sync&#xD;&#xA;          ngModelCtrl.$render = function() {&#xD;&#xA;            $element.val($filter('number')(ngModelCtrl.$viewValue, false))&#xD;&#xA;          }&#xD;&#xA;          $element.bind('change', listener)&#xD;&#xA;          $element.bind('keydown', function(event) {&#xD;&#xA;            var key = event.keyCode&#xD;&#xA;              // If the keys include the CTRL, SHIFT, ALT, or META keys, or the arrow keys, do nothing.&#xD;&#xA;              // This lets us support copy and paste too&#xD;&#xA;            if (key == 91 || (15 < key && key < 19) || (37 <= key && key <= 40))&#xD;&#xA;              return&#xD;&#xA;            $browser.defer(listener) // Have to do this or changes don't get picked up properly&#xD;&#xA;          })&#xD;&#xA;          $element.bind('paste cut', function() {&#xD;&#xA;            $browser.defer(listener)&#xD;&#xA;          })&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    })