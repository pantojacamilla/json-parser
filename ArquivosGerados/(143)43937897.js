    from PySide.QtCore import *&#xD;&#xA;    from PySide.QtGui import *&#xD;&#xA;    from time import sleep&#xD;&#xA;    import functools&#xD;&#xA;    import sys&#xD;&#xA;    class Worker(QObject):&#xD;&#xA;        def __init__(self):&#xD;&#xA;            super().__init__()&#xD;&#xA;        def work(self, name='Nothing'):&#xD;&#xA;            print('Thread ID: {1} - {0} start'.format(name, QThread.currentThreadId()))&#xD;&#xA;            sleep(1)&#xD;&#xA;            print('##### End {0}'.format(name))&#xD;&#xA;    class HackPushButton(QPushButton):&#xD;&#xA;        clicked_with_arg = Signal(str)&#xD;&#xA;        def __init__(self, *args):&#xD;&#xA;            super().__init__(*args)&#xD;&#xA;            self.argument = None&#xD;&#xA;            self.clicked.connect(lambda: self.clicked_with_arg.emit(self.argument))&#xD;&#xA;    class Example(QWidget):&#xD;&#xA;        def __init__(self):&#xD;&#xA;            super().__init__()&#xD;&#xA;            self.buttonWithoutLambda = QPushButton('[Works] Call work() without arguments and without lambda')&#xD;&#xA;            self.buttonWithLambda = QPushButton('[Blocks] Call work() with arguments and with lambda')&#xD;&#xA;            self.buttonWithFunctools = QPushButton('[Blocks] Call work() with arguments and with functools')&#xD;&#xA;            self.buttonWithHelperFunctionWithArgument = QPushButton('[Blocks] Call work() with arguments and with helper function')&#xD;&#xA;            self.buttonWithHelperFunctionWithoutArgument = QPushButton('[Blocks] Call work() without arguments and with helper function')&#xD;&#xA;            self.buttonWithHack = HackPushButton('[Works] Call work() with arguments via dirty hack')&#xD;&#xA;            layout = QVBoxLayout()&#xD;&#xA;            layout.addWidget(self.buttonWithoutLambda)&#xD;&#xA;            layout.addWidget(self.buttonWithLambda)&#xD;&#xA;            layout.addWidget(self.buttonWithFunctools)&#xD;&#xA;            layout.addWidget(self.buttonWithHelperFunctionWithArgument)&#xD;&#xA;            layout.addWidget(self.buttonWithHelperFunctionWithoutArgument)&#xD;&#xA;            layout.addWidget(self.buttonWithHack)&#xD;&#xA;            self.setLayout(layout)&#xD;&#xA;            self.Worker = Worker()&#xD;&#xA;            self.Thread = QThread()&#xD;&#xA;            self.Worker.moveToThread(self.Thread)&#xD;&#xA;            self.Thread.start()&#xD;&#xA;            # Doesn't block GUI&#xD;&#xA;            self.buttonWithoutLambda.clicked.connect(self.Worker.work)&#xD;&#xA;            # Blocks GUI&#xD;&#xA;            self.buttonWithLambda.clicked.connect(lambda: self.Worker.work('Lambda'))&#xD;&#xA;            self.buttonWithLambda.clicked.connect(lambda: self.Worker.work('Lambda'))&#xD;&#xA;            # Blocks GUI&#xD;&#xA;            self.buttonWithFunctools.clicked.connect(functools.partial(self.Worker.work, 'Functools'))&#xD;&#xA;            # Blocks GUI&#xD;&#xA;            self.helperFunctionArgument = 'Helper function without arguments'&#xD;&#xA;            self.buttonWithHelperFunctionWithArgument.clicked.connect(self.helperFunctionWithArgument)&#xD;&#xA;            # Blocks GUI&#xD;&#xA;            self.buttonWithHelperFunctionWithoutArgument.clicked.connect(self.helperFunctionWithoutArgument)&#xD;&#xA;            # Doesn't block GUI&#xD;&#xA;            self.buttonWithHack.argument = 'Hack'&#xD;&#xA;            self.buttonWithHack.clicked_with_arg.connect(self.Worker.work)&#xD;&#xA;            print('Thread ID: {0}'.format(QThread.currentThreadId()))&#xD;&#xA;            self.show()&#xD;&#xA;        def helperFunctionWithArgument(self):&#xD;&#xA;            self.Worker.work(self.helperFunctionArgument)&#xD;&#xA;        def helperFunctionWithoutArgument(self):&#xD;&#xA;            self.Worker.work()&#xD;&#xA;    app = QApplication(sys.argv)&#xD;&#xA;    ex = Example()&#xD;&#xA;    sys.exit(app.exec_())