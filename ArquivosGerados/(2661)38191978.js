    function RangeSlider( /** DOM Elem */ parentElem) {&#xD;&#xA;      var wrapperElem = document.getElementsByClassName('wrapperElem')[0],&#xD;&#xA;        slider = document.getElementsByClassName('slider')[0],&#xD;&#xA;        sliderCursor = document.getElementsByClassName('sliderCursor')[0];&#xD;&#xA;      var sliderDimention = slider.offsetWidth,&#xD;&#xA;        cursorRadius = sliderCursor.offsetHeight / 2,&#xD;&#xA;        startPoint,&#xD;&#xA;        currentTarget;&#xD;&#xA;      function sliderDown(e) {&#xD;&#xA;        e.preventDefault();&#xD;&#xA;        currentTarget = null;&#xD;&#xA;        var sliderWithDescendents = wrapperElem.querySelectorAll('*');&#xD;&#xA;        for (var i = 0; i < sliderWithDescendents.length; i++) {&#xD;&#xA;          sliderWithDescendents[i]&#xD;&#xA;          if (sliderWithDescendents[i] === e.target || wrapperElem === e.target) {&#xD;&#xA;            currentTarget = wrapperElem.children[0];&#xD;&#xA;            break;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        if (currentTarget === null) return;&#xD;&#xA;        startPoint = getOrigin(currentTarget);&#xD;&#xA;        sliderDimention = slider.offsetWidth;&#xD;&#xA;        window.addEventListener('mousemove', sliderMove);&#xD;&#xA;        sliderMove(e);&#xD;&#xA;      }&#xD;&#xA;      function sliderMove(e) {&#xD;&#xA;        var cursorPosition = 1 - clamp01((sliderDimention - (e.clientX - startPoint.left)) / sliderDimention);&#xD;&#xA;        sliderCursor.style.transform = 'translateX(' + (cursorPosition * sliderDimention - cursorRadius) + 'px)';&#xD;&#xA;      }&#xD;&#xA;      function mouseUpEvents() {&#xD;&#xA;        window.removeEventListener('mousemove', sliderMove);&#xD;&#xA;      }&#xD;&#xA;      wrapperElem.addEventListener('mousedown', sliderDown);&#xD;&#xA;      window.addEventListener('mouseup', mouseUpEvents);&#xD;&#xA;    }&#xD;&#xA;    var sliderTest = document.getElementById('sliderTest');&#xD;&#xA;    var test = new RangeSlider(sliderTest);&#xD;&#xA;    function clamp01(val) {&#xD;&#xA;      return Math.min(1, Math.max(0, val));&#xD;&#xA;    }&#xD;&#xA;    function getOrigin(elm) {&#xD;&#xA;      var box = (elm.getBoundingClientRect) ? elm.getBoundingClientRect() : {&#xD;&#xA;          top: 0,&#xD;&#xA;          left: 0&#xD;&#xA;        },&#xD;&#xA;        doc = elm && elm.ownerDocument,&#xD;&#xA;        body = doc.body,&#xD;&#xA;        win = doc.defaultView || doc.parentWindow || window,&#xD;&#xA;        docElem = doc.documentElement || body.parentNode,&#xD;&#xA;        clientTop = docElem.clientTop || body.clientTop || 0, // border on html or body or both&#xD;&#xA;        clientLeft = docElem.clientLeft || body.clientLeft || 0;&#xD;&#xA;      return {&#xD;&#xA;        left: box.left + (win.pageXOffset || docElem.scrollLeft) - clientLeft,&#xD;&#xA;        top: box.top + (win.pageYOffset || docElem.scrollTop) - clientTop&#xD;&#xA;      };&#xD;&#xA;    }