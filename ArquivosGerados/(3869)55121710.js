    var mask;&#xD;&#xA;    let jsonData = {&#xD;&#xA;        "layers": [{&#xD;&#xA;            "x": 0,&#xD;&#xA;            "height": 612,&#xD;&#xA;            "layers": [{&#xD;&#xA;                    "x": 0,&#xD;&#xA;                    "y": 0,&#xD;&#xA;                    "name": "L2a"&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                    "x": 160,&#xD;&#xA;                    "layers": [{&#xD;&#xA;                            "x": 0,&#xD;&#xA;                            "src": "ax0HVTs.png",&#xD;&#xA;                            "y": 0,&#xD;&#xA;                            "name": "L2b-1"&#xD;&#xA;                        },&#xD;&#xA;                        {&#xD;&#xA;                            "x": 0,&#xD;&#xA;                            "y": 0,&#xD;&#xA;                            "name": "L2b-2"&#xD;&#xA;                        }&#xD;&#xA;                    ],&#xD;&#xA;                    "y": 291,&#xD;&#xA;                    "name": "user_image_1"&#xD;&#xA;                },&#xD;&#xA;                {&#xD;&#xA;                    "x": 25,&#xD;&#xA;                    "layers": [{&#xD;&#xA;                            "x": 0,&#xD;&#xA;                            "src": "hEM2kEP.png",&#xD;&#xA;                            "y": 0,&#xD;&#xA;                            "name": "L2C-1"&#xD;&#xA;                        },&#xD;&#xA;                        {&#xD;&#xA;                            "x": 0,&#xD;&#xA;                            "y": 0,&#xD;&#xA;                            "name": "L2C-2"&#xD;&#xA;                        }&#xD;&#xA;                    ],&#xD;&#xA;                    "y": 22,&#xD;&#xA;                    "name": "L2"&#xD;&#xA;                }&#xD;&#xA;            ],&#xD;&#xA;            "y": 0,&#xD;&#xA;            "width": 612,&#xD;&#xA;            "name": "L1"&#xD;&#xA;        }]&#xD;&#xA;    };&#xD;&#xA;    $(document).ready(function() {&#xD;&#xA;        &#xD;&#xA;        function json(data) {&#xD;&#xA;            function getFirstSrc(layers) {&#xD;&#xA;                for (let i = 0; i < layers.length; i++) {&#xD;&#xA;                    let layer = layers[i];&#xD;&#xA;                    if (layer.src)&#xD;&#xA;                        return {&#xD;&#xA;                            src: layer.src,&#xD;&#xA;                            x: layer.x&#xD;&#xA;                        };&#xD;&#xA;                    if (layer.layers) {&#xD;&#xA;                        let first = getFirstSrc(layer.layers);&#xD;&#xA;                        if (first)&#xD;&#xA;                            return {&#xD;&#xA;                                src: first.src,&#xD;&#xA;                                x: layer.x + first.x&#xD;&#xA;                            };&#xD;&#xA;                    }&#xD;&#xA;                    var mask = $(".container").mask({&#xD;&#xA;                        maskImageUrl: 'https://i.imgur.com/' + first.src,&#xD;&#xA;                        onMaskImageCreate: function(img) {&#xD;&#xA;                            img.css({&#xD;&#xA;                                "position": "absolute",&#xD;&#xA;                                "left": layer.x + first.x + "px"&#xD;&#xA;                            });&#xD;&#xA;                        }&#xD;&#xA;                    });&#xD;&#xA;                    fileup.onchange = function() {&#xD;&#xA;                        mask.loadImage(URL.createObjectURL(fileup.files[0]));&#xD;&#xA;                    };&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        json(jsonData);&#xD;&#xA;    }); // end of document ready&#xD;&#xA;    // Ignore the below code&#xD;&#xA;    (function($) {&#xD;&#xA;        var JQmasks = [];&#xD;&#xA;        $.fn.mask = function(options) {&#xD;&#xA;            // This is the easiest way to have default options.&#xD;&#xA;            var settings = $.extend({&#xD;&#xA;                // These are the defaults.&#xD;&#xA;                maskImageUrl: undefined,&#xD;&#xA;                imageUrl: undefined,&#xD;&#xA;                scale: 1,&#xD;&#xA;                id: new Date().getUTCMilliseconds().toString(),&#xD;&#xA;                x: 0, // image start position&#xD;&#xA;                y: 0, // image start position&#xD;&#xA;                onMaskImageCreate: function(div) {},&#xD;&#xA;            }, options);&#xD;&#xA;            var container = $(this);&#xD;&#xA;            let prevX = 0,&#xD;&#xA;                prevY = 0,&#xD;&#xA;                draggable = false,&#xD;&#xA;                img,&#xD;&#xA;                canvas,&#xD;&#xA;                context,&#xD;&#xA;                image,&#xD;&#xA;                timeout,&#xD;&#xA;                initImage = false,&#xD;&#xA;                startX = settings.x,&#xD;&#xA;                startY = settings.y,&#xD;&#xA;                div;&#xD;&#xA;            container.mousePosition = function(event) {&#xD;&#xA;                return {&#xD;&#xA;                    x: event.pageX || event.offsetX,&#xD;&#xA;                    y: event.pageY || event.offsetY&#xD;&#xA;                };&#xD;&#xA;            }&#xD;&#xA;            container.selected = function(ev) {&#xD;&#xA;                var pos = container.mousePosition(ev);&#xD;&#xA;                var item = $(".masked-img canvas").filter(function() {&#xD;&#xA;                    var offset = $(this).offset()&#xD;&#xA;                    var x = pos.x - offset.left;&#xD;&#xA;                    var y = pos.y - offset.top;&#xD;&#xA;                    var d = this.getContext('2d').getImageData(x, y, 1, 1).data;&#xD;&#xA;                    return d[0] > 0&#xD;&#xA;                });&#xD;&#xA;                JQmasks.forEach(function(el) {&#xD;&#xA;                    var id = item.length > 0 ? $(item).attr("id") : "";&#xD;&#xA;                    if (el.id == id)&#xD;&#xA;                        el.item.enable();&#xD;&#xA;                    else el.item.disable();&#xD;&#xA;                });&#xD;&#xA;            };&#xD;&#xA;            container.enable = function() {&#xD;&#xA;                draggable = true;&#xD;&#xA;                $(canvas).attr("active", "true");&#xD;&#xA;                div.css({&#xD;&#xA;                    "z-index": 2&#xD;&#xA;                });&#xD;&#xA;            }&#xD;&#xA;            container.disable = function() {&#xD;&#xA;                draggable = false;&#xD;&#xA;                $(canvas).attr("active", "false");&#xD;&#xA;                div.css({&#xD;&#xA;                    "z-index": 1&#xD;&#xA;                });&#xD;&#xA;            }&#xD;&#xA;            container.onDragStart = function(evt) {&#xD;&#xA;                container.selected(evt);&#xD;&#xA;                prevX = evt.clientX;&#xD;&#xA;                prevY = evt.clientY;&#xD;&#xA;                var img = new Image();&#xD;&#xA;                evt.originalEvent.dataTransfer.setDragImage(img, 10, 10);&#xD;&#xA;                evt.originalEvent.dataTransfer.setData('text/plain', 'anything');&#xD;&#xA;            };&#xD;&#xA;            container.getImagePosition = function() {&#xD;&#xA;                return {&#xD;&#xA;                    x: settings.x,&#xD;&#xA;                    y: settings.y,&#xD;&#xA;                    scale: settings.scale&#xD;&#xA;                };&#xD;&#xA;            };&#xD;&#xA;            container.onDragOver = function(evt) {&#xD;&#xA;                if (draggable && $(canvas).attr("active") === "true") {&#xD;&#xA;                    var x = settings.x + evt.clientX - prevX;&#xD;&#xA;                    var y = settings.y + evt.clientY - prevY;&#xD;&#xA;                    if (x == settings.x && y == settings.y)&#xD;&#xA;                        return; // position has not changed&#xD;&#xA;                    settings.x += evt.clientX - prevX;&#xD;&#xA;                    settings.y += evt.clientY - prevY;&#xD;&#xA;                    prevX = evt.clientX;&#xD;&#xA;                    prevY = evt.clientY;&#xD;&#xA;                    container.updateStyle();&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;            container.updateStyle = function() {&#xD;&#xA;                clearTimeout(timeout);&#xD;&#xA;                timeout = setTimeout(function() {&#xD;&#xA;                    context.clearRect(0, 0, canvas.width, canvas.height);&#xD;&#xA;                    context.beginPath();&#xD;&#xA;                    context.globalCompositeOperation = "source-over";&#xD;&#xA;                    image = new Image();&#xD;&#xA;                    image.setAttribute('crossOrigin', 'anonymous');&#xD;&#xA;                    image.src = settings.maskImageUrl;&#xD;&#xA;                    image.onload = function() {&#xD;&#xA;                        canvas.width = image.width;&#xD;&#xA;                        canvas.height = image.height;&#xD;&#xA;                        context.drawImage(image, 0, 0, image.width, image.height);&#xD;&#xA;                        div.css({&#xD;&#xA;                            "width": image.width,&#xD;&#xA;                            "height": image.height&#xD;&#xA;                        });&#xD;&#xA;                    };&#xD;&#xA;                    img = new Image();&#xD;&#xA;                    img.src = settings.imageUrl;&#xD;&#xA;                    img.setAttribute('crossOrigin', 'anonymous');&#xD;&#xA;                    img.onload = function() {&#xD;&#xA;                        settings.x = settings.x == 0 && initImage ? (canvas.width - (img.width * settings.scale)) / 2 : settings.x;&#xD;&#xA;                        settings.y = settings.y == 0 && initImage ? (canvas.height - (img.height * settings.scale)) / 2 : settings.y;&#xD;&#xA;                        context.globalCompositeOperation = 'source-atop';&#xD;&#xA;                        context.drawImage(img, settings.x, settings.y, img.width * settings.scale, img.height * settings.scale);&#xD;&#xA;                        initImage = false;&#xD;&#xA;                    };&#xD;&#xA;                }, 0);&#xD;&#xA;            };&#xD;&#xA;            // change the draggable image&#xD;&#xA;            container.loadImage = function(imageUrl) {&#xD;&#xA;                if (img)&#xD;&#xA;                    img.remove();&#xD;&#xA;                // reset the code.&#xD;&#xA;                settings.y = startY;&#xD;&#xA;                settings.x = startX;&#xD;&#xA;                prevX = prevY = 0;&#xD;&#xA;                settings.imageUrl = imageUrl;&#xD;&#xA;                initImage = true;&#xD;&#xA;                container.updateStyle();&#xD;&#xA;            };&#xD;&#xA;            // change the masked Image&#xD;&#xA;            container.loadMaskImage = function(imageUrl, from) {&#xD;&#xA;                if (div)&#xD;&#xA;                    div.remove();&#xD;&#xA;                canvas = document.createElement("canvas");&#xD;&#xA;                context = canvas.getContext('2d');&#xD;&#xA;                canvas.setAttribute("draggable", "true");&#xD;&#xA;                canvas.setAttribute("id", settings.id);&#xD;&#xA;                settings.maskImageUrl = imageUrl;&#xD;&#xA;                div = $("<div/>", {&#xD;&#xA;                    "class": "masked-img"&#xD;&#xA;                }).append(canvas);&#xD;&#xA;                // div.find("canvas").on('touchstart mousedown', function(event)&#xD;&#xA;                div.find("canvas").on('dragstart', function(event) {&#xD;&#xA;                    if (event.handled === false) return;&#xD;&#xA;                    event.handled = true;&#xD;&#xA;                    container.onDragStart(event);&#xD;&#xA;                });&#xD;&#xA;                div.find("canvas").on('touchend mouseup', function(event) {&#xD;&#xA;                    if (event.handled === false) return;&#xD;&#xA;                    event.handled = true;&#xD;&#xA;                    container.selected(event);&#xD;&#xA;                });&#xD;&#xA;                div.find("canvas").bind("dragover", container.onDragOver);&#xD;&#xA;                container.append(div);&#xD;&#xA;                if (settings.onMaskImageCreate)&#xD;&#xA;                    settings.onMaskImageCreate(div);&#xD;&#xA;                container.loadImage(settings.imageUrl);&#xD;&#xA;            };&#xD;&#xA;            container.loadMaskImage(settings.maskImageUrl);&#xD;&#xA;            JQmasks.push({&#xD;&#xA;                item: container,&#xD;&#xA;                id: settings.id&#xD;&#xA;            })&#xD;&#xA;            return container;&#xD;&#xA;        };&#xD;&#xA;    }(jQuery));