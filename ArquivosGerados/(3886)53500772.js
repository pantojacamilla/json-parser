    var camera, scene, renderer;&#xD;&#xA;    init();&#xD;&#xA;    animate();&#xD;&#xA;    function init() {&#xD;&#xA;    // Renderer.&#xD;&#xA;    renderer = new THREE.WebGLRenderer({&#xD;&#xA;        antialias: true&#xD;&#xA;    });&#xD;&#xA;    renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;    renderer.shadowMap.enabled = true;&#xD;&#xA;    renderer.shadowMap.type = THREE.PCFSoftShadowMap;&#xD;&#xA;    &#xD;&#xA;    // Add renderer to page&#xD;&#xA;    document.body.appendChild(renderer.domElement);&#xD;&#xA;    // Create camera.&#xD;&#xA;    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 50);&#xD;&#xA;    camera.position.set(2, 2, 2);&#xD;&#xA;    camera.lookAt(new THREE.Vector3(0.0, 0.0, 0.0));&#xD;&#xA;    // Create scene.&#xD;&#xA;    scene = new THREE.Scene();&#xD;&#xA;    // Create material&#xD;&#xA;    var material = new THREE.MeshStandardMaterial();&#xD;&#xA;    material.transparent = true;&#xD;&#xA;    material.opacity = 0.5;&#xD;&#xA;    // Create cube and add to scene.&#xD;&#xA;    var geometry1 = new THREE.BoxGeometry(1, 1, 1);&#xD;&#xA;    var mesh1 = new THREE.Mesh(geometry1, material);&#xD;&#xA;    mesh1.position.set(0, 0, 0);&#xD;&#xA;    mesh1.castShadow = true;&#xD;&#xA;    scene.add(mesh1);&#xD;&#xA;    // Create cube and add to scene.&#xD;&#xA;    var geometry2 = new THREE.BoxGeometry(0.5, 0.5, 0.5);&#xD;&#xA;    var mesh2 = new THREE.Mesh(geometry2, material);&#xD;&#xA;    mesh2.position.set(0.0, 0, 0.5);&#xD;&#xA;    mesh2.castShadow = true;&#xD;&#xA;    scene.add(mesh2);&#xD;&#xA;    var spotLight = new THREE.SpotLight(0xffffff, 0.32);&#xD;&#xA;    spotLight.position.set(0, 5, 0);&#xD;&#xA;    spotLight.castShadow = true;&#xD;&#xA;    spotLight.shadow.mapSize.width = 2048;&#xD;&#xA;    spotLight.shadow.mapSize.height = 2048;&#xD;&#xA;    spotLight.shadow.camera.near = 0.1;&#xD;&#xA;    spotLight.shadow.camera.far = 20;  &#xD;&#xA;    scene.add(spotLight);&#xD;&#xA;        let hemiLight = new THREE.HemisphereLight(0xffffbb, 0x080820, 0.8);&#xD;&#xA;        scene.add(hemiLight);&#xD;&#xA;    &#xD;&#xA;    // Ground plane&#xD;&#xA;    var groundGeo = new THREE.PlaneBufferGeometry(50, 50);&#xD;&#xA;    var groundMat = new THREE.MeshStandardMaterial({color: 0xffffff});&#xD;&#xA;    var ground = new THREE.Mesh(groundGeo, groundMat);&#xD;&#xA;    ground.rotation.x = -Math.PI / 2;&#xD;&#xA;    ground.position.y = -0.5;&#xD;&#xA;    ground.receiveShadow = true;&#xD;&#xA;    scene.add(ground);&#xD;&#xA;    // Add listener for window resize.&#xD;&#xA;    window.addEventListener('resize', onWindowResize, false);&#xD;&#xA;    let controls = new THREE.OrbitControls(camera);&#xD;&#xA;    controls.enableZoom = true;&#xD;&#xA;    controls.enablePan = false;&#xD;&#xA;    controls.maxDistance = 20.0;&#xD;&#xA;    controls.minPolarAngle = 0;&#xD;&#xA;    controls.maxPolarAngle = Math.PI / 2;&#xD;&#xA;    controls.target.set(0, 0, 0);&#xD;&#xA;    controls.update();&#xD;&#xA;    }&#xD;&#xA;    function animate() {&#xD;&#xA;    requestAnimationFrame(animate);&#xD;&#xA;    renderer.render(scene, camera);&#xD;&#xA;    }&#xD;&#xA;    function onWindowResize() {&#xD;&#xA;    camera.aspect = window.innerWidth / window.innerHeight;&#xD;&#xA;    camera.updateProjectionMatrix();&#xD;&#xA;    renderer.setSize(window.innerWidth, window.innerHeight);&#xD;&#xA;    }