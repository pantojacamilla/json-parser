    const { pino } = require('amf-logger');&#xD;&#xA;    const fs = require('fs');&#xD;&#xA;    const mongo = require('mongodb');&#xD;&#xA;    const log = pino({ name: 'bot-zip-upload-storage' });&#xD;&#xA;    /**&#xD;&#xA;     * @param {string} path Path to the zip file to be persisted.&#xD;&#xA;     * @param {object} app Loopback application instance.&#xD;&#xA;     */&#xD;&#xA;    function storeLatestZipFile(path = './', app = {}) {&#xD;&#xA;      log.info('**** Starting streaming current uploaded zip to DB ****');&#xD;&#xA;      const zipReadStream = fs.createReadStream(path, { encoding: 'binary' });&#xD;&#xA;      const { db } = app.dataSources.mongo.connector;&#xD;&#xA;      const bucket = new mongo.GridFSBucket(db);&#xD;&#xA;      bucket.delete('zipfile', () => {&#xD;&#xA;        log.info('deleted old zipfile');&#xD;&#xA;        const uploadStream = bucket.openUploadStreamWithId(&#xD;&#xA;          'zipfile',&#xD;&#xA;          `bot-data-${new Date().toISOString()}`,&#xD;&#xA;          {&#xD;&#xA;            contentType: 'application/zip'&#xD;&#xA;          }&#xD;&#xA;        );&#xD;&#xA;        zipReadStream.pipe(uploadStream);&#xD;&#xA;      });&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * @param {object} app Loopback application instance.&#xD;&#xA;     */&#xD;&#xA;    async function createLatestZipEndpoint(app = {}) {&#xD;&#xA;      if (!app.get) {&#xD;&#xA;        log.error("app object does not have 'get' property.");&#xD;&#xA;        return;&#xD;&#xA;      }&#xD;&#xA;      app.get('/api/admin/latestzip', async (req, res) => {&#xD;&#xA;        if (!req.headers.latestfile || req.headers.latestfile !== process.env.ADMIN_LATESTFILE) {&#xD;&#xA;          res.sendStatus(403);&#xD;&#xA;          return;&#xD;&#xA;        }&#xD;&#xA;        try {&#xD;&#xA;          const { db } = app.dataSources.mongo.connector;&#xD;&#xA;          const bucket = new mongo.GridFSBucket(db);&#xD;&#xA;          res.writeHead(200, { 'Content-Type': 'application/zip' });&#xD;&#xA;          const downloadStream = bucket.openDownloadStream('zipfile');&#xD;&#xA;          log.info('download stream opened, begin streaming');&#xD;&#xA;          downloadStream.pipe(res);&#xD;&#xA;        } catch (err) {&#xD;&#xA;          log.error(`error getting zipfile: ${err}`);&#xD;&#xA;          res.sendStatus(500);&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;    }&#xD;&#xA;    module.exports = {&#xD;&#xA;      storeLatestZipFile,&#xD;&#xA;      createLatestZipEndpoint&#xD;&#xA;    };