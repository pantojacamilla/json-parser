    const p = new Proxy({&#xD;&#xA;      [Symbol.iterator]: Array.prototype.values,&#xD;&#xA;      forEach: Array.prototype.forEach,&#xD;&#xA;    }, {&#xD;&#xA;      get(target, property) {&#xD;&#xA;        if (property === '0') return 'one';&#xD;&#xA;        if (property === '1') return 'two';&#xD;&#xA;        if (property === 'length') return 2;&#xD;&#xA;        return Reflect.get(target, property);&#xD;&#xA;      },&#xD;&#xA;    });&#xD;&#xA;    console.log('for...of loop:');&#xD;&#xA;    for (const element of p) {&#xD;&#xA;      console.log(element);&#xD;&#xA;    }&#xD;&#xA;    console.log('forEach():');&#xD;&#xA;    p.forEach(element => console.log(element));