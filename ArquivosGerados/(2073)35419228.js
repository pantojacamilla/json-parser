    import request from 'superagent';&#xD;&#xA;    import store from './store';&#xD;&#xA;    import { system, account } from '../core/actions';&#xD;&#xA;    const API_URL = __API_URL__;&#xD;&#xA;    const TIMEOUT = 10000;&#xD;&#xA;    const _pendingRequests = {};&#xD;&#xA;    function getJwt() {&#xD;&#xA;    	/**&#xD;&#xA;    	 * This retrieves the JSON Web Token from local or session storage&#xD;&#xA;    	 * We simply try both so that we don't have to subscribe to the store&#xD;&#xA;    	 * and make sure some flag is constantly updated. The reducer that handles&#xD;&#xA;    	 * the successful login will place the token in the proper place.&#xD;&#xA;    	 */&#xD;&#xA;    	let token = localStorage.getItem('JWT_TOKEN');&#xD;&#xA;    	if (token) {&#xD;&#xA;    		return 'Bearer ' + token;&#xD;&#xA;    	}&#xD;&#xA;    	token = sessionStorage.getItem('JWT_TOKEN');&#xD;&#xA;    	if (token) {&#xD;&#xA;    		return 'Bearer ' + token;&#xD;&#xA;    	}&#xD;&#xA;    	return null;&#xD;&#xA;    }&#xD;&#xA;    function addRequest(key, pendingRequest) {&#xD;&#xA;    	_pendingRequests[key] = pendingRequest;&#xD;&#xA;    }&#xD;&#xA;    function abortPendingRequests(key) {&#xD;&#xA;    	if (_pendingRequests.hasOwnProperty(key)) {&#xD;&#xA;    		_pendingRequests[key]._callback = () => {&#xD;&#xA;    		};&#xD;&#xA;    		_pendingRequests[key].abort();&#xD;&#xA;    		_pendingRequests[key] = null;&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    function digest(resolve, reject) {&#xD;&#xA;    	return function consume(err, res) {&#xD;&#xA;    		if (err && err.timeout === TIMEOUT) {&#xD;&#xA;    			return store.dispatch(system.apiTimeout());&#xD;&#xA;    		} else if (res.status === 401) {&#xD;&#xA;    			return store.dispatch(account.logout());&#xD;&#xA;    		} else if (!res.ok) {&#xD;&#xA;    			return reject(res);&#xD;&#xA;    		} else {&#xD;&#xA;    			if (err) {&#xD;&#xA;    				return reject(err);&#xD;&#xA;    			} else {&#xD;&#xA;    				return resolve(res.body);&#xD;&#xA;    			}&#xD;&#xA;    		}&#xD;&#xA;    	};&#xD;&#xA;    }&#xD;&#xA;    export function get(actionType, resource) {&#xD;&#xA;    	// abortPendingRequests(actionType);&#xD;&#xA;    	return new Promise((resolve, reject) => {&#xD;&#xA;    		const jwt = getJwt();&#xD;&#xA;    		const url = `${API_URL}${resource}`;&#xD;&#xA;    		const requested = request&#xD;&#xA;    			.get(url)&#xD;&#xA;    			.timeout(TIMEOUT);&#xD;&#xA;    		if (jwt) {&#xD;&#xA;    			requested.set('Authorization', jwt);&#xD;&#xA;    		}&#xD;&#xA;    		// addRequest(actionType, requested);&#xD;&#xA;    		requested.end(digest(resolve, reject));&#xD;&#xA;    	});&#xD;&#xA;    }&#xD;&#xA;    export function post(actionType, resource, data) {&#xD;&#xA;    	// abortPendingRequests(actionType);&#xD;&#xA;    	return new Promise((resolve, reject) => {&#xD;&#xA;    		const jwt = getJwt();&#xD;&#xA;    		const url = `${API_URL}${resource}`;&#xD;&#xA;    		const requested = request&#xD;&#xA;    			.post(url)&#xD;&#xA;    			.timeout(TIMEOUT);&#xD;&#xA;    		if (jwt) {&#xD;&#xA;    			requested.set('Authorization', jwt);&#xD;&#xA;    		}&#xD;&#xA;    		if (data) {&#xD;&#xA;    			requested.send(data);&#xD;&#xA;    		}&#xD;&#xA;    		// addRequest(actionType, requested);&#xD;&#xA;    		requested.end(digest(resolve, reject));&#xD;&#xA;    	});&#xD;&#xA;    }&#xD;&#xA;    export function put(actionType, resource, data) {&#xD;&#xA;    	// abortPendingRequests(actionType);&#xD;&#xA;    	return new Promise((resolve, reject) => {&#xD;&#xA;    		const jwt = getJwt();&#xD;&#xA;    		const url = `${API_URL}${resource}`;&#xD;&#xA;    		const requested = request&#xD;&#xA;    			.put(url)&#xD;&#xA;    			.timeout(TIMEOUT);&#xD;&#xA;    		if (jwt) {&#xD;&#xA;    			requested.set('Authorization', jwt);&#xD;&#xA;    		}&#xD;&#xA;    		if (data) {&#xD;&#xA;    			requested.send(data);&#xD;&#xA;    		}&#xD;&#xA;    		requested.end(digest(resolve, reject));&#xD;&#xA;    	});&#xD;&#xA;    }&#xD;&#xA;    export function del(actionType, resource) {&#xD;&#xA;    	// abortPendingRequests(actionType);&#xD;&#xA;    	return new Promise((resolve, reject) => {&#xD;&#xA;    		const jwt = getJwt();&#xD;&#xA;    		const url = `${API_URL}${resource}`;&#xD;&#xA;    		const requested = request&#xD;&#xA;    			.del(url)&#xD;&#xA;    			.timeout(TIMEOUT);&#xD;&#xA;    		if (jwt) {&#xD;&#xA;    			requested.set('Authorization', jwt);&#xD;&#xA;    		}&#xD;&#xA;    		// addRequest(actionType, requested);&#xD;&#xA;    		requested.end(digest(resolve, reject));&#xD;&#xA;    	});&#xD;&#xA;    }