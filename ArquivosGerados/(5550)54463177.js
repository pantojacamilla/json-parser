    const settings = [&#xD;&#xA;      {room: null, key: 'radioEnabled', value: true},&#xD;&#xA;      {room: 24,   key: 'radioEnabled', value: false},&#xD;&#xA;      {room: 24,   key: 'name',         value: 'Jack'},&#xD;&#xA;      {room: 23,   key: 'name',         value: 'Mike'},&#xD;&#xA;      {room: 23,   key: 'radioEnabled', value: false},&#xD;&#xA;      {room: null, key: 'tvEnabled',    value: false},&#xD;&#xA;    ];&#xD;&#xA;    const getAll_1 = function(room){&#xD;&#xA;    	return settings.reduce( (a, b) => {&#xD;&#xA;      	// remove all other rooms&#xD;&#xA;      	if(b.room && b.room!== room){&#xD;&#xA;        	return a;&#xD;&#xA;      	}&#xD;&#xA;    		// see if the setting is already added&#xD;&#xA;      	let found = a.find( (setting) => {&#xD;&#xA;        	return setting.key === b.key;&#xD;&#xA;      	})&#xD;&#xA;    		// we already have a local value in our return array, don't add/replace anything&#xD;&#xA;      	if( found && found.room === room) {&#xD;&#xA;        	return a;&#xD;&#xA;      	} &#xD;&#xA;      &#xD;&#xA;      	// we have a value, but it's not local. Replace the current value with the new one&#xD;&#xA;    	  if( found ) {&#xD;&#xA;          const index = a.findIndex( (setting) => {&#xD;&#xA;        		return setting.key === b.key;&#xD;&#xA;      		})&#xD;&#xA;      	  a[index] = b;&#xD;&#xA;        	return a;&#xD;&#xA;      	}&#xD;&#xA;      &#xD;&#xA;      	// we don't have this setting at all. add it. &#xD;&#xA;    	  return a.concat(b);&#xD;&#xA;    	}, []);&#xD;&#xA;    }&#xD;&#xA;    const getAll_2 = function(room){&#xD;&#xA;    	return settings&#xD;&#xA;        // first filter out all other room settings, only keep current room and global values&#xD;&#xA;      	.filter( (setting) => {&#xD;&#xA;    		  return setting.room === null || setting.room === room;&#xD;&#xA;    		})&#xD;&#xA;        // than sort em so all local (high prio) values are up top&#xD;&#xA;    		.sort( (a, b) => {&#xD;&#xA;    		  return (a.room > b.room) ? -1 : ( a.room < b.room ) ? 1 : 0;&#xD;&#xA;    		})&#xD;&#xA;        // reduce the array, adding only global values if they are not already added as local value&#xD;&#xA;    		.reduce( (a, b) => {&#xD;&#xA;    		  const found = a.find( (setting) => {&#xD;&#xA;      		  return setting.key === b.key;&#xD;&#xA;      		})&#xD;&#xA;      		if (found){&#xD;&#xA;      			return a;&#xD;&#xA;      		}&#xD;&#xA;      		return a.concat(b);&#xD;&#xA;    		}, [])&#xD;&#xA;    }&#xD;&#xA;    console.log(`Stack Overflow does not support console.table. Open your console for better representation`);&#xD;&#xA;    console.log(`getAll_1 response:`);&#xD;&#xA;    console.table(getAll_1(24));&#xD;&#xA;    console.log(`getAll_2 response:`);&#xD;&#xA;    console.table(getAll_2(24));