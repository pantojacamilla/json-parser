    import { Component, ViewChild } from '@angular/core';&#xD;&#xA;    import { async, ComponentFixture, TestBed } from '@angular/core/testing';&#xD;&#xA;    import { FormsModule } from '@angular/forms';&#xD;&#xA;    import { MonthPickerComponent } from './month-picker.component';&#xD;&#xA;    @Component({&#xD;&#xA;      selector: 'seg-month-picker',&#xD;&#xA;      template: `<seg-month-picker>`&#xD;&#xA;    })&#xD;&#xA;    export class TestComponent {&#xD;&#xA;      @ViewChild(MonthPickerComponent) picker;&#xD;&#xA;    }&#xD;&#xA;    function getComponent(): Promise<TestComponent> {&#xD;&#xA;      const fixture = TestBed&#xD;&#xA;        .createComponent(TestComponent);&#xD;&#xA;      fixture.detectChanges();&#xD;&#xA;      return fixture.whenStable().then(() => fixture.componentInstance);&#xD;&#xA;    }&#xD;&#xA;    describe('MonthPickerComponent', async() => {&#xD;&#xA;      let component: MonthPickerComponent;&#xD;&#xA;      let fixture: ComponentFixture<MonthPickerComponent>;&#xD;&#xA;      let element: HTMLElement;&#xD;&#xA;      const mockedComponent = await getComponent();&#xD;&#xA;      beforeEach(async(() => {&#xD;&#xA;        TestBed.configureTestingModule({&#xD;&#xA;          declarations: [MonthPickerComponent, mockedComponent],&#xD;&#xA;          imports: [FormsModule]&#xD;&#xA;        })&#xD;&#xA;        .compileComponents();&#xD;&#xA;      }));&#xD;&#xA;      beforeEach(() => {&#xD;&#xA;        fixture = TestBed.createComponent(MonthPickerComponent);&#xD;&#xA;        component = fixture.componentInstance;&#xD;&#xA;        fixture.detectChanges();&#xD;&#xA;      });&#xD;&#xA;      it('should be created', () => {&#xD;&#xA;        expect(component).toBeTruthy();&#xD;&#xA;      });&#xD;&#xA;      describe('setMin', () => {&#xD;&#xA;        it('deve impostare la lista di anni in base al minimo dato', () => {&#xD;&#xA;          component.min = '2014-03';&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          expect(component.yearList).toEqual([2014, 2015, 2016, 2017]);&#xD;&#xA;        })&#xD;&#xA;      });&#xD;&#xA;      describe('getMin', () => {&#xD;&#xA;        it('deve restituire l\'anno minimo della lista', () => {&#xD;&#xA;          component.min = '2014-03';&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.min;&#xD;&#xA;          expect(result).toBe('2014-03');&#xD;&#xA;        });&#xD;&#xA;        it('deve restituire null se non ho un valore minimo', () => {&#xD;&#xA;          component.min = undefined;&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.min;&#xD;&#xA;          expect(result).toBe(undefined);&#xD;&#xA;        })&#xD;&#xA;      });&#xD;&#xA;      describe('setMax', () => {&#xD;&#xA;        it('deve restituire la lista di anni in base al massimo dato', () => {&#xD;&#xA;          component.max = '2018-01';&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          expect(component.yearList).toEqual([2017, 2018]);&#xD;&#xA;        });&#xD;&#xA;        it('deve restituire la lista di anni in base al range dato', () => {&#xD;&#xA;          component.max = '2018-01';&#xD;&#xA;          component.min = '2014-01';&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          expect(component.yearList).toEqual([2014, 2015, 2016, 2017, 2018]);&#xD;&#xA;        });&#xD;&#xA;      });&#xD;&#xA;      describe('getMax', () => {&#xD;&#xA;        it('deve restituire l\'anno massimo della lista', () => {&#xD;&#xA;          component.max = '2018-01';&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.max;&#xD;&#xA;          expect(result).toBe('2018-01');&#xD;&#xA;        });&#xD;&#xA;        it('deve restituire null se non ho un valore massimo', () => {&#xD;&#xA;          component.max = undefined;&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.max;&#xD;&#xA;          expect(result).toBe(undefined);&#xD;&#xA;        });&#xD;&#xA;      });&#xD;&#xA;      describe('writeValue', () => {&#xD;&#xA;        fit('deve modificare il valore all\'ngModel del componente', async () => {&#xD;&#xA;          console.log(mockedComponent.picker);&#xD;&#xA;          mockedComponent.picker.writeValue('2016-03');&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.max;&#xD;&#xA;          expect(result).toBe('2018-01');&#xD;&#xA;        });&#xD;&#xA;        it('deve restituire null se non ho un valore massimo', () => {&#xD;&#xA;          component.max = undefined;&#xD;&#xA;          fixture.detectChanges();&#xD;&#xA;          const result = component.max;&#xD;&#xA;          expect(result).toBe(undefined);&#xD;&#xA;        });&#xD;&#xA;      });&#xD;&#xA;    });