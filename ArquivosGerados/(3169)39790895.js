    // auxiliary functions&#xD;&#xA;    const log = prefix => x => console.log(prefix, x);&#xD;&#xA;    const addk = x => y => k => setTimeout((x, y) => k(x + y), 0, x, y);&#xD;&#xA;    const inck = x => k => setTimeout(x => k(x + 1), 0, x);&#xD;&#xA;    const sqr = x => x * x;&#xD;&#xA;    // continuation monad&#xD;&#xA;    const cont = {&#xD;&#xA;      of: x => k => k(x),&#xD;&#xA;      map: ftor => f => k => ftor(x => k(f(x))),&#xD;&#xA;      ap: ftor => gtor => k => ftor(x => gtor(f => k(f(x)))),&#xD;&#xA;      chain: ftor => mf => k => ftor(x => mf(x) (k)),&#xD;&#xA;      callcc: f => k => f(x => () => k(x)) (k)&#xD;&#xA;    };&#xD;&#xA;    // map a normal, unary function with an asynchronous function:&#xD;&#xA;    cont.map(inck(9)) (sqr) (log("map"));&#xD;&#xA;    // chain two asynchronous CPS computations with an asynchronous binary CPS function&#xD;&#xA;    const comp1 = cont.map(inck(4)) (sqr);&#xD;&#xA;    const comp2 = cont.map(inck(9)) (sqr);&#xD;&#xA;    cont.chain(comp1) (x => cont.chain(comp2) (y => addk(x) (y))) (log("chain"));