        // init with not multiply mode&#xD;&#xA;        var app = new PIXI.Application(800, 600, {&#xD;&#xA;          backgroundColor : 0xcccccc,&#xD;&#xA;          transparent: 'notMultiplied'&#xD;&#xA;        });&#xD;&#xA;        document.body.appendChild(app.view);&#xD;&#xA;        // draw circleï»¿ graphics with red and alpha 0.5 ( drawn at display left )&#xD;&#xA;        var graphic = new PIXI.Graphics();&#xD;&#xA;        graphic.alpha = 0.5;&#xD;&#xA;        graphic.beginFill(0xff0000);&#xD;&#xA;        graphic.drawCircle(100,100,100);&#xD;&#xA;        graphic.endFill();&#xD;&#xA;        app.stage.addChild(graphic);&#xD;&#xA;        // use graphics as a texture ( drawn at display right )&#xD;&#xA;        var mesh = new PIXI.mesh.Mesh( graphic.generateCanvasTexture() );&#xD;&#xA;        mesh.position.set(300,100);&#xD;&#xA;        app.stage.addChild(mesh);&#xD;&#xA;        // replace MeshRenderer shader for test premultiply effect&#xD;&#xA;        app.renderer.plugins.mesh.shader = new PIXI.Shader(&#xD;&#xA;          app.renderer.gl,&#xD;&#xA;          // vertex shader is same as original MeshRender's one&#xD;&#xA;          ` &#xD;&#xA;              attribute vec2 aVertexPosition;&#xD;&#xA;              attribute vec2 aTextureCoord;&#xD;&#xA;              uniform mat3 projectionMatrix;&#xD;&#xA;              uniform mat3 translationMatrix;&#xD;&#xA;              uniform mat3 uTransform;&#xD;&#xA;              varying vec2 vTextureCoord;&#xD;&#xA;              void main(void) {&#xD;&#xA;                  gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);&#xD;&#xA;                  vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;&#xD;&#xA;              }&#xD;&#xA;          `,&#xD;&#xA;          // I changed change fragment shader for test&#xD;&#xA;          `&#xD;&#xA;              varying vec2 vTextureCoord;&#xD;&#xA;              uniform vec4 uColor;&#xD;&#xA;              uniform sampler2D uSampler;&#xD;&#xA;              void main(void) {&#xD;&#xA;                  //gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor; <- remove&#xD;&#xA;                  gl_FragColor = vec4(texture2D(uSampler, vTextureCoord).rgb, 1.0); &#xD;&#xA;              }&#xD;&#xA;          `&#xD;&#xA;        );&#xD;&#xA;        // render graphics and mesh.&#xD;&#xA;        app.render();