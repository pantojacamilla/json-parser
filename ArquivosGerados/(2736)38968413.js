    import React, { Component } from 'react';&#xD;&#xA;    import { render } from 'react-dom';&#xD;&#xA;    class InputData extends React.Component {&#xD;&#xA;        constructor () {&#xD;&#xA;            super()&#xD;&#xA;            this.UpdateList = ::this.UpdateList&#xD;&#xA;            this.Lister = ::this.Lister&#xD;&#xA;            this.state = {&#xD;&#xA;                number_of_locations: 4,&#xD;&#xA;                thickness_m: []&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        componentDidMount () {&#xD;&#xA;            for ( let i = 0; i < this.state.number_of_locations; i++ ) {&#xD;&#xA;                this.state.thickness_m.push( 0 )&#xD;&#xA;                console.log( "state has been intitialized" )&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        UpdateList ( event ) {&#xD;&#xA;            const value = event.target.value&#xD;&#xA;            const locations = parseInt( this.state.number_of_locations )&#xD;&#xA;            console.log( "local locations value is " + locations )&#xD;&#xA;            let thickness = this.state.thickness_m&#xD;&#xA;            if ( locations > thickness.length ) {&#xD;&#xA;                const dif = locations - thickness.length&#xD;&#xA;                for ( let i = 0; i < dif; i++ ) {&#xD;&#xA;                    thickness.push( 0 )&#xD;&#xA;                }&#xD;&#xA;                console.log( `up with ${dif} dif` )&#xD;&#xA;            } else if ( locations < thickness.length ) {&#xD;&#xA;                const dif = thickness.length - locations&#xD;&#xA;                thickness.splice( 0, dif )&#xD;&#xA;                console.log( `down with ${dif} dif` )&#xD;&#xA;            }&#xD;&#xA;            this.setState( {&#xD;&#xA;                number_of_locations: value,&#xD;&#xA;                thickness_m: thickness&#xD;&#xA;            } )&#xD;&#xA;        }&#xD;&#xA;        Lister ( number, index ) {&#xD;&#xA;            return (&#xD;&#xA;                <li key={index}>{number}</li>&#xD;&#xA;            )&#xD;&#xA;        }&#xD;&#xA;        render () {&#xD;&#xA;            const thickness_values = this.state.thickness_m&#xD;&#xA;            return (&#xD;&#xA;                <div className="row">&#xD;&#xA;                    <div className="col-md-6">&#xD;&#xA;                        <div className="component">&#xD;&#xA;                            <div className="form-group">&#xD;&#xA;                                <label htmlFor="read-method">Reading Method</label>&#xD;&#xA;                                <select className="form-control" name="read-method" id="read-method" required>&#xD;&#xA;                                    <option value="--">--</option>&#xD;&#xA;                                    <option value="1">Point Thickness Readings - PTR</option>&#xD;&#xA;                                    <option value="2">Critical Thickness Profiles - CTP</option>&#xD;&#xA;                                </select>&#xD;&#xA;                            </div>&#xD;&#xA;                            <div className="form-group">&#xD;&#xA;                                <label htmlFor="number-of-locations">Number of Locations</label>&#xD;&#xA;                                <input onBlur={this.UpdateList}&#xD;&#xA;                                    defaultValue={this.state.number_of_locations}&#xD;&#xA;                                    className="form-control"&#xD;&#xA;                                    type="number"&#xD;&#xA;                                    max="50"&#xD;&#xA;                                    min="1"&#xD;&#xA;                                    id="number-of-locations"/>&#xD;&#xA;                            </div>&#xD;&#xA;                            <div className="form-group">&#xD;&#xA;                                <label htmlFor="separation">Separation</label>&#xD;&#xA;                                <input className="form-control" type="number" id="separation"/>&#xD;&#xA;                            </div>&#xD;&#xA;                            <div className="form-group">&#xD;&#xA;                                <ul>&#xD;&#xA;                                    {thickness_values.map( this.Lister )}&#xD;&#xA;                                </ul>&#xD;&#xA;                                <small>your list now has {this.state.number_of_locations} items</small>&#xD;&#xA;                            </div>&#xD;&#xA;                        </div>&#xD;&#xA;                    </div>&#xD;&#xA;                    <div className="col-md-6">&#xD;&#xA;                        hola&#xD;&#xA;                    </div>&#xD;&#xA;                </div>&#xD;&#xA;            )&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    render(&#xD;&#xA;        <InputData />,&#xD;&#xA;        document.getElementById( 'input-measurement-data' )&#xD;&#xA;    );