    const sumPropertyValue = (items, prop) => items.reduce((a, b) => a + b[prop], 0);&#xD;&#xA;    let margin = {&#xD;&#xA;        top: 50,&#xD;&#xA;        right: 50,&#xD;&#xA;        bottom: 50,&#xD;&#xA;        left: 60&#xD;&#xA;      },&#xD;&#xA;      width = 700 - margin.left - margin.right,&#xD;&#xA;      height = 500 - margin.top - margin.bottom;&#xD;&#xA;    let fmtDate = d3.timeParse("%Y-%m-%d");&#xD;&#xA;    let massdata;&#xD;&#xA;    function unique(data) {&#xD;&#xA;      let temp = []&#xD;&#xA;      for (let i = 0; i < data.length; i++) {&#xD;&#xA;        let row = data[i];&#xD;&#xA;        let Sources = [row.SomeSourcesThatWeConsulted];&#xD;&#xA;        if (row.Empty != null) Sources.push(row.Empty);&#xD;&#xA;        if (row.Empty2 != null) Sources.push(row.Empty2);&#xD;&#xA;        let Attack = {&#xD;&#xA;          Country: row.Country,&#xD;&#xA;          State: row.State,&#xD;&#xA;          City: row.City,&#xD;&#xA;          Killed: row.Killed,&#xD;&#xA;          Type: row.Type,&#xD;&#xA;          Perpetrator: row.Perpetrator,&#xD;&#xA;          Source: row.CaseSource,&#xD;&#xA;          Sources: Sources,&#xD;&#xA;          Infomation: row.InfomationOnAttack,&#xD;&#xA;          set Date(value) {&#xD;&#xA;            this._year = new Date(value).getFullYear();&#xD;&#xA;            this._date = value;&#xD;&#xA;          },&#xD;&#xA;          get Date() {&#xD;&#xA;            return this._date;&#xD;&#xA;          },&#xD;&#xA;          get Year() {&#xD;&#xA;            return this._year;&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;        Attack.Date = row.Date;&#xD;&#xA;        let idx = temp.findIndex(o => o.Year === Attack.Year);&#xD;&#xA;        if (idx != -1) {&#xD;&#xA;          temp[idx].Attacks.push(Attack);&#xD;&#xA;        } else {&#xD;&#xA;          let Year = {&#xD;&#xA;            Year: Attack.Year,&#xD;&#xA;            Attacks: [Attack],&#xD;&#xA;            get USAttackData() {&#xD;&#xA;              return this.Attacks.filter(function(el) {&#xD;&#xA;                return el.Country == "USA";&#xD;&#xA;              });&#xD;&#xA;            },&#xD;&#xA;            get NonUSAttackData() {&#xD;&#xA;              return this.Attacks.filter(function(el) {&#xD;&#xA;                return el.Country != "USA";&#xD;&#xA;              });&#xD;&#xA;            },&#xD;&#xA;            get USAttacks() {&#xD;&#xA;              return this.USAttackData.length;&#xD;&#xA;            },&#xD;&#xA;            get NonUSAttacks() {&#xD;&#xA;              return this.NonUSAttackData.length;&#xD;&#xA;            },&#xD;&#xA;            get USKilled() {&#xD;&#xA;              return sumPropertyValue(this.USAttackData, "Killed");&#xD;&#xA;            },&#xD;&#xA;            get NonUSKilled() {&#xD;&#xA;              return sumPropertyValue(this.NonUSAttackData, "Killed");&#xD;&#xA;            }&#xD;&#xA;          };&#xD;&#xA;          temp.push(Year);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      return temp;&#xD;&#xA;    } //unique()&#xD;&#xA;    function matchColumns(data, columnnames) {&#xD;&#xA;      let temp = [];&#xD;&#xA;      for (let i = 0; i < data.length; i++) {&#xD;&#xA;        let row = data[i];&#xD;&#xA;        let locs = row.Location.split(",");&#xD;&#xA;        temp.push({&#xD;&#xA;          [columnnames[0]]: row.Source,&#xD;&#xA;          [columnnames[1]]: "USA",&#xD;&#xA;          [columnnames[2]]: locs[0],&#xD;&#xA;          [columnnames[3]]: locs[1],&#xD;&#xA;          [columnnames[4]]: row.Date,&#xD;&#xA;          [columnnames[5]]: null,&#xD;&#xA;          [columnnames[6]]: row.Killed,&#xD;&#xA;          [columnnames[7]]: row.Wounded,&#xD;&#xA;          [columnnames[8]]: row.Perpetrator,&#xD;&#xA;          [columnnames[9]]: "MassShooting",&#xD;&#xA;          [columnnames[10]]: row.InformationOnAttach,&#xD;&#xA;          [columnnames[11]]: row.SomeSourcesThatWeConsulted,&#xD;&#xA;          [columnnames[12]]: null,&#xD;&#xA;          [columnnames[13]]: null&#xD;&#xA;        });&#xD;&#xA;      } //For LOOP&#xD;&#xA;      return unique(temp);&#xD;&#xA;    }&#xD;&#xA;    function combine(data, addthis) {&#xD;&#xA;      for (let i = 0; i < data.length; i++) {&#xD;&#xA;        for (let z = 0; z < addthis[i].Attacks.length; z++) {&#xD;&#xA;          data[i].Attacks.push(addthis[i].Attacks[z]);&#xD;&#xA;        } //Inner Attacks LOOP&#xD;&#xA;      }; //Outer Years LOOP&#xD;&#xA;      Object.defineProperty(data, "Years", {&#xD;&#xA;        get() {&#xD;&#xA;          return this.map(o => o.Year)&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      Object.defineProperty(data, "USAttacks", {&#xD;&#xA;        get() {&#xD;&#xA;          return this.map(o => o.USAttacks)&#xD;&#xA;        }&#xD;&#xA;      });&#xD;&#xA;      return data;&#xD;&#xA;    } //getJSON()&#xD;&#xA;    function onlyUnique(value, index, self) {&#xD;&#xA;      return self.indexOf(value) === index;&#xD;&#xA;    }&#xD;&#xA;    function buildChart() {&#xD;&#xA;      let years = massdata.Years.map(y => y + "-1-1");&#xD;&#xA;      let dates = years.map(d => fmtDate(d));&#xD;&#xA;      let data = {&#xD;&#xA;        x: dates,&#xD;&#xA;        y: massdata.USAttacks.sort()&#xD;&#xA;      };&#xD;&#xA;      let y_max = Math.max.apply(Math, data.y);&#xD;&#xA;      let y_min = Math.min.apply(Math, data.y);&#xD;&#xA;      let y_labels = data.y.filter(onlyUnique);&#xD;&#xA;      let x_max = dates[dates.length - 1];&#xD;&#xA;      let x_min = dates[0];&#xD;&#xA;      let xScale = d3.scaleTime()&#xD;&#xA;        .domain([x_min, x_max])&#xD;&#xA;        .range([0, width]);&#xD;&#xA;      let yScale = d3.scaleLog()&#xD;&#xA;        .domain([y_min, y_max])&#xD;&#xA;        .range([height, 0]);&#xD;&#xA;      let xAxis = d3.axisBottom(xScale).ticks(d3.timeYear.every(1))&#xD;&#xA;      let yAxis = d3.axisLeft(yScale).tickValues([y_labels])&#xD;&#xA;      let valueline = d3.line()&#xD;&#xA;        .x(function(d, i) {&#xD;&#xA;          return xScale(i);&#xD;&#xA;        })&#xD;&#xA;        .y(function(d) {&#xD;&#xA;          return yScale(d.y);&#xD;&#xA;        })&#xD;&#xA;        .curve(d3.curveMonotoneX);&#xD;&#xA;      let svg = d3.select("body").append("svg")&#xD;&#xA;        .attr("width", width + margin.left + margin.right)&#xD;&#xA;        .attr("height", height + margin.top + margin.bottom)&#xD;&#xA;        .append("g")&#xD;&#xA;        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;      svg.append("path")&#xD;&#xA;        .attr("class", "line")&#xD;&#xA;        .attr("d", valueline(data));&#xD;&#xA;      svg.append("g")&#xD;&#xA;        .attr("class", "x axis")&#xD;&#xA;        .attr("transform", "translate(0," + height + ")")&#xD;&#xA;        .call(xAxis);&#xD;&#xA;      svg.append("G")&#xD;&#xA;        .attr("class", "y axis")&#xD;&#xA;        .call(yAxis);&#xD;&#xA;      // svg.selectAll(".dot")&#xD;&#xA;      //     .data(data)&#xD;&#xA;      //     .enter().append("circle")&#xD;&#xA;      //     .attr("class", "dot")&#xD;&#xA;      //     .attr("cx", function(d, i) { return xScale(i) })&#xD;&#xA;      //     .attr("cy", function(d) { return yScale(d.Attack) })&#xD;&#xA;      //     .attr("r", 5)&#xD;&#xA;      //     .on("mouseover", function(a, b, c) {&#xD;&#xA;      //         console.log(a)&#xD;&#xA;      //         this.attr('class', 'focus')&#xD;&#xA;      //     })&#xD;&#xA;      //     .on("mouseout", function() {  });&#xD;&#xA;    } //buildChart()&#xD;&#xA;    function getData() {&#xD;&#xA;      $.ajaxSetup({&#xD;&#xA;        cache: false&#xD;&#xA;      });&#xD;&#xA;      let usmsajax = $.ajax({&#xD;&#xA;        type: "GET",&#xD;&#xA;        url: "https://john3-16.github.io/CS498DataVis/USMassShooting.json"&#xD;&#xA;      });&#xD;&#xA;      let worldmsajax = $.ajax({&#xD;&#xA;        type: "GET",&#xD;&#xA;        url: "https://john3-16.github.io/CS498DataVis/WorldMassShooting.json"&#xD;&#xA;      });&#xD;&#xA;      function success(resp1, resp2) {&#xD;&#xA;        let usms = resp1[0];&#xD;&#xA;        let worldms = resp2[0];&#xD;&#xA;        massdata = unique(worldms.Appendix_restOfTheWorld);&#xD;&#xA;        let usmassdata = matchColumns(worldms.Appendix_us, Object.getOwnPropertyNames(worldms.Appendix_restOfTheWorld[0]));&#xD;&#xA;        massdata = combine(massdata, usmassdata);&#xD;&#xA;        buildChart();&#xD;&#xA;      }; //success()&#xD;&#xA;      function failure(response1, response2) {&#xD;&#xA;        console.log("Something is wrong with loading the data ");&#xD;&#xA;      }; //failure()&#xD;&#xA;      $.when(usmsajax, worldmsajax)&#xD;&#xA;        .then(success, failure);&#xD;&#xA;    } //getData()&#xD;&#xA;    getData();