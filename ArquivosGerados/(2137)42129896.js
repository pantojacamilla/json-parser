    $(document).ready(function(){&#xD;&#xA;    var w = $("#graph").innerWidth();&#xD;&#xA;    var h = $("#graph").innerHeight();&#xD;&#xA;    var default_node_color = "#ccc";&#xD;&#xA;    var default_link_color = "red";&#xD;&#xA;    var nominal_base_node_size = 8;&#xD;&#xA;    var nominal_text_size = 10;&#xD;&#xA;    var max_text_size = 24;&#xD;&#xA;    var nominal_stroke = 1.5;&#xD;&#xA;    var highlight_stroke_width = 4;&#xD;&#xA;    var max_stroke = 4.5;&#xD;&#xA;    var min_zoom = 0.1;&#xD;&#xA;    var max_zoom = 7;&#xD;&#xA;    var svg = d3.select("#graph").append("svg");&#xD;&#xA;    var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom])&#xD;&#xA;    var g = svg.append("g");&#xD;&#xA;    svg.style("cursor","move");&#xD;&#xA;    var dnodes = [];&#xD;&#xA;    var dlinks = [];&#xD;&#xA;    function findNode(id) {&#xD;&#xA;    	for (var i in dnodes) {&#xD;&#xA;    		if (dnodes[i]["id"] === id) return dnodes[i];&#xD;&#xA;    		};&#xD;&#xA;    	};&#xD;&#xA;    function addNode(id,name) {&#xD;&#xA;    		var newNode = findNode(id);&#xD;&#xA;    		if(newNode == undefined) &#xD;&#xA;    		{&#xD;&#xA;    			dnodes.push({"id":id,"name":name});   &#xD;&#xA;    			//update(dnodes,dlinks);&#xD;&#xA;    		}&#xD;&#xA;    		&#xD;&#xA;            };&#xD;&#xA;    		&#xD;&#xA;    function addLink(sourceId, targetId) {&#xD;&#xA;            var sourceNode = findNode(sourceId);&#xD;&#xA;            var targetNode = findNode(targetId);&#xD;&#xA;    		if((sourceNode !== undefined) && (targetNode !== undefined)) {&#xD;&#xA;                dlinks.push({"source": sourceNode, "target": targetNode});&#xD;&#xA;    			//update(dnodes,dlinks);&#xD;&#xA;                }         &#xD;&#xA;            };&#xD;&#xA;    	&#xD;&#xA;    addNode("1","2XYZ");&#xD;&#xA;    addNode("3","3XYZ");&#xD;&#xA;    addNode("4","4XYZ");&#xD;&#xA;    addNode("5","5XYZ");&#xD;&#xA;    addLink("1","2");&#xD;&#xA;    addLink("1","3");&#xD;&#xA;    addLink("1","4");&#xD;&#xA;    addLink("1","5");&#xD;&#xA;    	&#xD;&#xA;    var force = d3.layout.force()&#xD;&#xA;      .linkDistance(160)&#xD;&#xA;      .charge(-300)&#xD;&#xA;      .friction(0.5)&#xD;&#xA;      .size([w,h]);&#xD;&#xA;     &#xD;&#xA;    var nodes = force.nodes(dnodes);&#xD;&#xA;    var links = force.links(dlinks);&#xD;&#xA;      force.start();&#xD;&#xA;    //function update(dnodes, dlinks)	&#xD;&#xA;    //{&#xD;&#xA;    function isConnected(sourceNodeid, destNodeid)&#xD;&#xA;    	{&#xD;&#xA;    	&#xD;&#xA;    		for(var i in dlinks)&#xD;&#xA;    		{&#xD;&#xA;    			if((dlinks[i].source.id == sourceNodeid && dlinks[i].target.id==destNodeid)||((dlinks[i].source.id == destNodeid && dlinks[i].target.id==sourceNodeid)))&#xD;&#xA;    			{&#xD;&#xA;    				return true;&#xD;&#xA;    			}&#xD;&#xA;    			&#xD;&#xA;    		}&#xD;&#xA;    		if(sourceNodeid == destNodeid)&#xD;&#xA;    		{&#xD;&#xA;    		return true;&#xD;&#xA;    		}&#xD;&#xA;    		return false;&#xD;&#xA;    	};	&#xD;&#xA;    		&#xD;&#xA;     &#xD;&#xA;      &#xD;&#xA;    function dragstart(d, i) {&#xD;&#xA;    	force.stop() // stops the force auto positioning before you start dragging&#xD;&#xA;    	}&#xD;&#xA;    function dragmove(d, i) {&#xD;&#xA;    	d.px += d3.event.dx;&#xD;&#xA;    	d.py += d3.event.dy;&#xD;&#xA;    	d.x += d3.event.dx;&#xD;&#xA;    	d.y += d3.event.dy; &#xD;&#xA;    	tick(); &#xD;&#xA;    	}&#xD;&#xA;    function dragend(d, i) {&#xD;&#xA;    	d.fixed = true; &#xD;&#xA;    	tick();&#xD;&#xA;    	}&#xD;&#xA;    var node_drag = d3.behavior.drag()&#xD;&#xA;            .on("dragstart", dragstart)&#xD;&#xA;            .on("drag", dragmove)&#xD;&#xA;            .on("dragend", dragend);&#xD;&#xA;    var link = g.selectAll(".link")&#xD;&#xA;        .data(dlinks)&#xD;&#xA;        .enter().append("line")&#xD;&#xA;        .attr("class", "link")&#xD;&#xA;    	.style("stroke-width",nominal_stroke)&#xD;&#xA;    	.style("stroke", default_link_color)&#xD;&#xA;    	&#xD;&#xA;      var node = g.selectAll(".node")&#xD;&#xA;        .data(dnodes)&#xD;&#xA;        .enter().append("g")&#xD;&#xA;        .attr("class", "node")&#xD;&#xA;    	.call(node_drag);&#xD;&#xA;    		&#xD;&#xA;      var circle = node.append("rect")&#xD;&#xA;    					.attr("x", "-15px")&#xD;&#xA;    					.attr("y", "-15px")&#xD;&#xA;    					.attr("rx", "4")&#xD;&#xA;    					.attr("ry", "4")&#xD;&#xA;                        .attr("width", "30px")&#xD;&#xA;    					.attr("height", "30px")&#xD;&#xA;                        .attr("id", function (d) {return d.id;})&#xD;&#xA;                        .attr("fill", "#336699");&#xD;&#xA;    					&#xD;&#xA;     var text = g.selectAll(".text")&#xD;&#xA;    				  .data(dnodes)&#xD;&#xA;    				  .enter().append("text")&#xD;&#xA;    				  .attr("dy", ".35em")&#xD;&#xA;    				  .attr("y","22")&#xD;&#xA;    				  .style("font-size", nominal_text_size + "px")&#xD;&#xA;    				  text.text(function(d) { return d.name; })&#xD;&#xA;    				  .style("text-anchor", "middle");&#xD;&#xA;    				  &#xD;&#xA;    			  &#xD;&#xA;      zoom.on("zoom", function() {&#xD;&#xA;        var stroke = nominal_stroke;&#xD;&#xA;        if (nominal_stroke*zoom.scale()>max_stroke) stroke = max_stroke/zoom.scale();&#xD;&#xA;        link.style("stroke-width",stroke);&#xD;&#xA;        circle.style("stroke-width",stroke);&#xD;&#xA;    	&#xD;&#xA;    	var text_size = nominal_text_size;&#xD;&#xA;        if (nominal_text_size*zoom.scale()>max_text_size) text_size = max_text_size/zoom.scale();&#xD;&#xA;        text.style("font-size",text_size + "px");&#xD;&#xA;    	g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");&#xD;&#xA;    	});&#xD;&#xA;      svg.call(zoom);	  &#xD;&#xA;      resize();&#xD;&#xA;      force.on("tick", tick);&#xD;&#xA;      &#xD;&#xA;      function tick()&#xD;&#xA;      {&#xD;&#xA;      node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });&#xD;&#xA;      text.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });&#xD;&#xA;      &#xD;&#xA;        link.attr("x1", function(d) { return d.source.x; })&#xD;&#xA;          .attr("y1", function(d) { return d.source.y; })&#xD;&#xA;          .attr("x2", function(d) { return d.target.x; })&#xD;&#xA;          .attr("y2", function(d) { return d.target.y; });&#xD;&#xA;    	&#xD;&#xA;    	//node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });	&#xD;&#xA;        node.attr("cx", function(d) { return d.x; })&#xD;&#xA;          .attr("cy", function(d) { return d.y; });&#xD;&#xA;    	  &#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;       &#xD;&#xA;      function resize() {&#xD;&#xA;        var width = $("#graph").innerWidth();&#xD;&#xA;    	&#xD;&#xA;    	var height = $("#graph").innerHeight();&#xD;&#xA;    	svg.attr("width", width).attr("height", height);&#xD;&#xA;        &#xD;&#xA;    	force.size([force.size()[0]+(width-w)/zoom.scale(),force.size()[1]+(height-h)/zoom.scale()]).resume();&#xD;&#xA;        w = width;&#xD;&#xA;    	h = height;&#xD;&#xA;    	}&#xD;&#xA;    //}&#xD;&#xA;    });