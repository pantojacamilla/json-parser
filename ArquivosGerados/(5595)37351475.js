    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r77/three.js"></script>&#xD;&#xA;    <head>&#xD;&#xA;        <title>Shader test</title>&#xD;&#xA;    <script type="x-shader/x-vertex" id="vertexShader">&#xD;&#xA;    vUv = uv;&#xD;&#xA;    varying vec3 N;&#xD;&#xA;    varying vec3 I;&#xD;&#xA;    varying vec4 Cs;&#xD;&#xA;    void main()&#xD;&#xA;    {&#xD;&#xA;        vec4 P = gl_ModelViewMatrix * gl_Vertex;    &#xD;&#xA;        I  = P.xyz - vec3 (0);&#xD;&#xA;        N  = gl_NormalMatrix * gl_Normal;&#xD;&#xA;        Cs = gl_Color;&#xD;&#xA;        gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex; &#xD;&#xA;        //gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );&#xD;&#xA;    } &#xD;&#xA;    </script>&#xD;&#xA;    <script type="x-shader/x-vertex" id="fragmentShader">&#xD;&#xA;    varying vec2 vUv;&#xD;&#xA;    varying vec3 N;&#xD;&#xA;    varying vec3 I;&#xD;&#xA;    varying vec4 Cs;&#xD;&#xA;    uniform float edgefalloff;&#xD;&#xA;    uniform float intensity;&#xD;&#xA;    uniform float ambient;&#xD;&#xA;    void main()&#xD;&#xA;    {&#xD;&#xA;        float opac = dot(normalize(-N), normalize(-I));&#xD;&#xA;        opac = abs(opac);&#xD;&#xA;        opac = ambient + intensity*(1.0-pow(opac, edgefalloff));&#xD;&#xA;        //opac = 1.0 - opac;  &#xD;&#xA;        gl_FragColor =  opac * Cs;&#xD;&#xA;        gl_FragColor.a = opac;&#xD;&#xA;        //gl_FragColor = vec4( vec3( vUv, 0. ), 1. );&#xD;&#xA;    }&#xD;&#xA;    </script>&#xD;&#xA;    </head>&#xD;&#xA;    <body>&#xD;&#xA;        <div id="container"></div>&#xD;&#xA;    </body>