        /*Create a function PersonConstructor that uses the this keyword to save a single property onto its scope called&#xD;&#xA;         greet. greet should be a function that logs the string 'hello'.*/&#xD;&#xA;      function PersonConstructor() {&#xD;&#xA;        this.greet = function(){&#xD;&#xA;          console.log('hello!');&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      var simon = new PersonConstructor;&#xD;&#xA;      simon.greet(); // -> Logs 'hello'&#xD;&#xA;      /*** CHALLENGE 2 of 3 ***/&#xD;&#xA;      /*Create a function personFromConstructor that takes as input a name and an age. When called, the function will create&#xD;&#xA;       person objects using the new keyword instead of the Object.create method.*/&#xD;&#xA;      function personFromConstructor(name, age) {&#xD;&#xA;        var personObj = new PersonConstructor;&#xD;&#xA;        personObj.name = name;&#xD;&#xA;        personObj.age = age;&#xD;&#xA;        return personObj;&#xD;&#xA;      }&#xD;&#xA;      var mike = personFromConstructor('Mike', 30);&#xD;&#xA;      console.log(mike.name); // -> Logs 'Mike'&#xD;&#xA;      console.log(mike.age); //-> Logs 30&#xD;&#xA;      mike.greet(); //-> Logs 'hello'&#xD;&#xA;      /*** CHALLENGE 3 of 3 ***/&#xD;&#xA;      /*Without editing the code you've already written, add an introduce method to the PersonConstructor function that logs&#xD;&#xA;       "Hi, my name is [name]".*/&#xD;&#xA;      PersonConstructor.introduce = function() {&#xD;&#xA;        console.log("Hi, my name is ");&#xD;&#xA;      };&#xD;&#xA;      mike.introduce(); // -> Logs 'Hi, my name is Mike' // doesn't work