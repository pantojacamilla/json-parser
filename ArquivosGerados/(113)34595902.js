    Array.prototype.reduce = function(combiner, initialValue) {&#xD;&#xA;    	var counter, accumulatedValue;&#xD;&#xA;    	// If the array is empty, do nothing&#xD;&#xA;    	if (this.length === 0) {&#xD;&#xA;    		return this;&#xD;&#xA;    	}&#xD;&#xA;    	else {&#xD;&#xA;    		// If the user didn't pass an initial value, use the first item.&#xD;&#xA;    		if (arguments.length === 1) {&#xD;&#xA;    			counter = 1;&#xD;&#xA;    			accumulatedValue = this[0];&#xD;&#xA;    		}&#xD;&#xA;    		else if (arguments.length >= 2) {&#xD;&#xA;    			counter = 0;&#xD;&#xA;    			accumulatedValue = initialValue;&#xD;&#xA;    		}&#xD;&#xA;    		else {&#xD;&#xA;    			throw "Invalid arguments.";&#xD;&#xA;    		}&#xD;&#xA;    		// Loop through the array, feeding the current value and the result of&#xD;&#xA;    		// the previous computation back into the combiner function until&#xD;&#xA;    		// we've exhausted the entire array and are left with only one value.&#xD;&#xA;    		while(counter < this.length) {&#xD;&#xA;    			accumulatedValue = combiner(accumulatedValue, this[counter])&#xD;&#xA;    			counter++;&#xD;&#xA;    		}&#xD;&#xA;    		return [accumulatedValue];&#xD;&#xA;    	}&#xD;&#xA;    };