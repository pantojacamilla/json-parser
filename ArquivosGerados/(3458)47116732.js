    class UserPage extends Component{&#xD;&#xA;      componentWillMount(){&#xD;&#xA;        let props = this.props;&#xD;&#xA;        if(props.navigation.state.params){&#xD;&#xA;          props.fetchUserBooks(props.navigation.state.params.id);&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      render(){&#xD;&#xA;        let props = this.props;&#xD;&#xA;        let userId, userPage;&#xD;&#xA;        if(props.navigation.state.params && props.userPages[props.navigation.state.params.id]){&#xD;&#xA;          userId = props.navigation.state.params.id;&#xD;&#xA;          userPage = props.userPages[userId];&#xD;&#xA;          return (&#xD;&#xA;            <View>&#xD;&#xA;              <UserData user={userPage.user}/>&#xD;&#xA;            </View>&#xD;&#xA;          )&#xD;&#xA;        }else{&#xD;&#xA;          return <View><Text>isFetching</Text></View>;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    const mapStateToUserPageProps = (state) => {&#xD;&#xA;      return {&#xD;&#xA;        userPages : state.userPages&#xD;&#xA;      }&#xD;&#xA;    };&#xD;&#xA;    const mapDispatchToUserPageProps = (dispatch) => {&#xD;&#xA;      return {&#xD;&#xA;        fetchUserBooks: (userId) => {dispatch(fetchUserData(userId));}&#xD;&#xA;      }&#xD;&#xA;    };&#xD;&#xA;    export default connect(mapStateToUserPageProps, mapDispatchToUserPageProps)(UserPage);