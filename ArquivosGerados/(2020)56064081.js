    const completions = {&#xD;&#xA;      return (label) { return `return from ${label}`; },&#xD;&#xA;      throw (label) { throw `throw from ${label}`; }&#xD;&#xA;    };&#xD;&#xA;    function promise (tryBlock, finallyBlock) {&#xD;&#xA;      return Promise.resolve()&#xD;&#xA;        .then(() => completions[tryBlock]('try'))&#xD;&#xA;        .finally(() => completions[finallyBlock]('finally'));&#xD;&#xA;    }&#xD;&#xA;    async function async (tryBlock, finallyBlock) {&#xD;&#xA;      try { return completions[tryBlock]('try'); }&#xD;&#xA;      finally { return completions[finallyBlock]('finally'); }&#xD;&#xA;    }&#xD;&#xA;    async function test (tryBlock, finallyBlock) {&#xD;&#xA;      const onSettled = fn => result => console.log(`${fn}() settled with '${result}'`);&#xD;&#xA;      const promiseSettled = onSettled('promise');&#xD;&#xA;      const asyncSettled = onSettled('async');&#xD;&#xA;      console.log(`testing try ${tryBlock} finally ${finallyBlock}`);&#xD;&#xA;      await promise(tryBlock, finallyBlock).then(promiseSettled, promiseSettled);&#xD;&#xA;      await async(tryBlock, finallyBlock).then(asyncSettled, asyncSettled);&#xD;&#xA;    }&#xD;&#xA;    [['return', 'return'], ['return', 'throw'], ['throw', 'return'], ['throw', 'throw']]&#xD;&#xA;      .reduce((p, args) => p.then(() => test(...args)), Promise.resolve());