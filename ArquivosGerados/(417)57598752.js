    let height = 600;&#xD;&#xA;    let width  = 800;&#xD;&#xA;    const yMax = 4000;&#xD;&#xA;    //var hEach  = 40;&#xD;&#xA;    let margin = {top: 20, right: 15, bottom: 25, left: 25};&#xD;&#xA;    width  =    width - margin.left - margin.right;&#xD;&#xA;    height =    height - margin.top - margin.bottom;&#xD;&#xA;    var svg = d3.select('body').append("svg")&#xD;&#xA;      .attr("width",  width + margin.left + margin.right)&#xD;&#xA;      .attr("height", height + margin.top + margin.bottom)&#xD;&#xA;      .append("g")&#xD;&#xA;      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;    let formatDate = d3.timeFormat("%b-%Y")&#xD;&#xA;    let parseTime = d3.timeParse("%Y-%m-%d");&#xD;&#xA;    let data = [&#xD;&#xA;      {&#xD;&#xA;        "host_count": 2553,&#xD;&#xA;        "container_count": 875,&#xD;&#xA;        "hour": "2019-01-31",&#xD;&#xA;        "apm_host_count": 0,&#xD;&#xA;        "agent_host_count": 2208,&#xD;&#xA;        "gcp_host_count": 0,&#xD;&#xA;        "aws_host_count": 345&#xD;&#xA;      },&#xD;&#xA;      {&#xD;&#xA;        "host_count": 1553,&#xD;&#xA;        "container_count": 675,&#xD;&#xA;        "hour": "2019-02-01",&#xD;&#xA;        "apm_host_count": 0,&#xD;&#xA;        "agent_host_count": 1208,&#xD;&#xA;        "gcp_host_count": 0,&#xD;&#xA;        "aws_host_count": 445&#xD;&#xA;      },&#xD;&#xA;      {&#xD;&#xA;        "host_count": 716,&#xD;&#xA;        "container_count": 6234,&#xD;&#xA;        "hour": "2019-02-02",&#xD;&#xA;        "apm_host_count": 0,&#xD;&#xA;        "agent_host_count": 479,&#xD;&#xA;        "gcp_host_count": 0,&#xD;&#xA;        "aws_host_count": 237&#xD;&#xA;      },&#xD;&#xA;      {&#xD;&#xA;        "host_count": 516,&#xD;&#xA;        "container_count": 4234,&#xD;&#xA;        "hour": "2019-02-03",&#xD;&#xA;        "apm_host_count": 0,&#xD;&#xA;        "agent_host_count": 679,&#xD;&#xA;        "gcp_host_count": 0,&#xD;&#xA;        "aws_host_count": 137&#xD;&#xA;      }&#xD;&#xA;    ];&#xD;&#xA;      // format the data&#xD;&#xA;      data.forEach(function(d) {&#xD;&#xA;          d.hour = parseTime(d.hour);&#xD;&#xA;      });&#xD;&#xA;      // set the ranges&#xD;&#xA;      var x = d3.scaleTime().range([0, width]);&#xD;&#xA;      x.domain(d3.extent(data, function(d) { return d.hour; }));&#xD;&#xA;      var xAxis = d3.axisBottom(x).ticks(11).tickFormat(d3.timeFormat("%y-%b-%d")).tickValues(data.map(d=>d.hour));&#xD;&#xA;      var y = d3.scaleLinear()&#xD;&#xA;        .domain([0, yMax])&#xD;&#xA;        .range([height, 0]);&#xD;&#xA;      var areaGenerator = d3.area()&#xD;&#xA;      	.x(function(d, i) {&#xD;&#xA;          console.log(d);&#xD;&#xA;      		return i * 100;&#xD;&#xA;      	})&#xD;&#xA;      	.y0(function(d) {&#xD;&#xA;      		return y(d[0]);&#xD;&#xA;      	})&#xD;&#xA;      	.y1(function(d) {&#xD;&#xA;      		return y(d[1]);&#xD;&#xA;      	});&#xD;&#xA;      var colors = ['#FBB65B', '#513551', '#de3163']&#xD;&#xA;      var stack = d3.stack()&#xD;&#xA;        .keys(['agent_host_count', 'aws_host_count', 'container_count']);&#xD;&#xA;      var stackedSeries = stack(data);&#xD;&#xA;      d3.select('g')&#xD;&#xA;      	.selectAll('path')&#xD;&#xA;      	.data(stackedSeries)&#xD;&#xA;      	.enter()&#xD;&#xA;      	.append('path')&#xD;&#xA;      	.style('fill', function(d, i) {&#xD;&#xA;      		return colors[i];&#xD;&#xA;      	})&#xD;&#xA;      	.attr('d', areaGenerator)&#xD;&#xA;      svg.append("g")&#xD;&#xA;              .attr("class", "x axis")&#xD;&#xA;              .attr("transform", "translate(0," + height + ")")&#xD;&#xA;              .call(xAxis);