    let Promise = RSVP.Promise&#xD;&#xA;    let people = ['Marty McFly', 'Doc', 'Robocop', 'Terminator', 'Bozo']&#xD;&#xA;    let sendMessagesToPeople = []&#xD;&#xA;    let thoseSucceeded = []&#xD;&#xA;    let thoseFailed = []&#xD;&#xA;    // Dummy Promise method to send a message to a person&#xD;&#xA;    function sendMessageToPerson (person, msg) {&#xD;&#xA;      console.log(`Sending message to ${person}...`)&#xD;&#xA;      return new Promise((resolve, reject) => {&#xD;&#xA;        setTimeout(() => {&#xD;&#xA;          if (Math.random() > 0.5) {&#xD;&#xA;            console.log(`✔︎ Sent "${msg}" to ${person}`)&#xD;&#xA;            resolve(person, msg)&#xD;&#xA;            return&#xD;&#xA;          }&#xD;&#xA;          console.log(`✘ Failed sending "${msg}" to ${person}`)&#xD;&#xA;          reject(person, msg)&#xD;&#xA;        }, 1000 + (Math.random() * 2000))&#xD;&#xA;      })&#xD;&#xA;    }&#xD;&#xA;    // Generate the array of Promises for allSettled to process&#xD;&#xA;    for (let i = 0; i < people.length; i++) {&#xD;&#xA;      let trySendMessageToPerson = sendMessageToPerson(people[i], "Hi there!")&#xD;&#xA;        /* Illegal, according to JSHint */&#xD;&#xA;        .then(() => {&#xD;&#xA;          thoseSucceeded.push(people[i])&#xD;&#xA;        })&#xD;&#xA;        .catch(() => {&#xD;&#xA;          thoseFailed.push(people[i])&#xD;&#xA;        })&#xD;&#xA;      sendMessagesToPeople.push(trySendMessageToPerson)&#xD;&#xA;    }&#xD;&#xA;    RSVP.allSettled(sendMessagesToPeople).then(() => {&#xD;&#xA;      console.log(`Succeeded: ${thoseSucceeded.length}, Failed: ${thoseFailed.length}`)&#xD;&#xA;    })