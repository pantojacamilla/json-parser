    import { CityService } from "./services/city-list.service";&#xD;&#xA;    import { Component, OnInit, OnDestroy } from "@angular/core";&#xD;&#xA;    import { City } from "../cities/models/city";&#xD;&#xA;    import { Subscription, Observable } from "rxjs";&#xD;&#xA;    import { map, startWith, debounceTime } from "rxjs/operators";&#xD;&#xA;    import { FormGroup, FormControl, Validators, NgForm } from "@angular/forms";&#xD;&#xA;    @Component({&#xD;&#xA;      selector: "<app-cities></app-cities>",&#xD;&#xA;      templateUrl: "./city-list.component.html",&#xD;&#xA;      styleUrls: ["./cities-list.component.css"]&#xD;&#xA;    })&#xD;&#xA;    export class CityListComponent implements OnInit, OnDestroy {&#xD;&#xA;      cities: City[]=[];&#xD;&#xA;      private citiesSub: Subscription;&#xD;&#xA;      currentCity: Observable<City[]>;&#xD;&#xA;      destinationCity: FormControl =  new FormControl();&#xD;&#xA;      originCity: FormControl =  new FormControl();&#xD;&#xA;      startDate: FormControl = new FormControl();&#xD;&#xA;      constructor(public cityService: CityService) {}&#xD;&#xA;      ngOnInit() {&#xD;&#xA;        this.cityService.getCities();&#xD;&#xA;        this.citiesSub = this.cityService&#xD;&#xA;          .getCityUpdateListener()&#xD;&#xA;          .subscribe(cities => {&#xD;&#xA;            this.cities = cities;&#xD;&#xA;        });&#xD;&#xA;        this.currentCity = this.destinationCity.valueChanges&#xD;&#xA;        .pipe(&#xD;&#xA;          debounceTime(100),&#xD;&#xA;          startWith(''),&#xD;&#xA;          map(x=>{&#xD;&#xA;            return this._filter(x);&#xD;&#xA;          }&#xD;&#xA;        ));&#xD;&#xA;      }&#xD;&#xA;    private _filter(value: string): City[]{&#xD;&#xA;      const filterValue = value.toLowerCase();&#xD;&#xA;      return(this.cities.filter(option => option.name.toLowerCase().includes(filterValue)));&#xD;&#xA;    }&#xD;&#xA;      ngOnDestroy() {&#xD;&#xA;        this.citiesSub.unsubscribe();&#xD;&#xA;      }&#xD;&#xA;    }