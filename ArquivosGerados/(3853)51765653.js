    const config = require('../config.js'); //ket noi db&#xD;&#xA;    const jwt = require('jsonwebtoken');&#xD;&#xA;    module.exports.deletePropertyOBject = function(myObject, property) {&#xD;&#xA;        var obj = myObject;&#xD;&#xA;        delete obj[property];&#xD;&#xA;        // console.log(obj);&#xD;&#xA;        return obj;&#xD;&#xA;    }&#xD;&#xA;    module.exports.setDataReturn = function(status = '', message = '', data = {}) {&#xD;&#xA;        *// const token = jwt.sign(data, 'superSecret', { expiresIn: config.tokenTime });*&#xD;&#xA;         &#xD;&#xA;        IF I UNCOMMENTED THIS IT WOULD REPORT THE ERROR&#xD;&#xA;        var objReturn = {&#xD;&#xA;            "success": status,&#xD;&#xA;            "message": message,&#xD;&#xA;            'data': data,&#xD;&#xA;        };&#xD;&#xA;        return objReturn;&#xD;&#xA;    }&#xD;&#xA;    module.exports.createToken = function(user) {&#xD;&#xA;            var token = jwt.sign(user, 'superSecret', { expiresIn: config.tokenTime });&#xD;&#xA;            return token;&#xD;&#xA;    }&#xD;&#xA;        //xac thuc token&#xD;&#xA;    module.exports.verifyToken = function(req, res, next) {&#xD;&#xA;        next();&#xD;&#xA;        // var bearerHeader = req.headers['authorization'];;&#xD;&#xA;        // if (typeof(bearerHeader) !== 'undefined') {&#xD;&#xA;        //     var bearer = bearerHeader.split(' ');&#xD;&#xA;        //     var bearerToken = bearer[0];&#xD;&#xA;        //     jwt.verify(bearerToken, 'superSecret', function(err, authData) {&#xD;&#xA;        //         if (err) {&#xD;&#xA;        //             res.sendStatus(403);&#xD;&#xA;        //         } else {&#xD;&#xA;        //             next();&#xD;&#xA;        //         }&#xD;&#xA;        //     });&#xD;&#xA;        // } else {&#xD;&#xA;        //     res.sendStatus(403);&#xD;&#xA;        // }&#xD;&#xA;    }&#xD;&#xA;    module.exports.validateParam = function(obj) {&#xD;&#xA;        var output = {&#xD;&#xA;            status: true,&#xD;&#xA;            message: []&#xD;&#xA;        };&#xD;&#xA;        for (let [key, value] of Object.entries(obj)) {&#xD;&#xA;            if (typeof value === "undefined") {&#xD;&#xA;                output.message.push(key);&#xD;&#xA;                output.status = false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return output;&#xD;&#xA;    }