    var dataset = {&#xD;&#xA;        numbers: [3200, 5400, 8600]&#xD;&#xA;    };&#xD;&#xA;    var width = 960,&#xD;&#xA;      height = 500,&#xD;&#xA;      radius = Math.min(width, height) / 2;&#xD;&#xA;    var enterClockwise = {&#xD;&#xA;        startAngle: 0,&#xD;&#xA;        endAngle: 0&#xD;&#xA;    };&#xD;&#xA;    var enterAntiClockwise = {&#xD;&#xA;        startAngle: Math.PI * 2,&#xD;&#xA;        endAngle: Math.PI * 2&#xD;&#xA;    };&#xD;&#xA;    //var color = d3.scale.category20();&#xD;&#xA;    var color = d3.scale.ordinal().range([d3.rgb("#c7003b"), d3.rgb('#000'), d3.rgb('#ccc'),d3.rgb('transparent')])&#xD;&#xA;    var pie = d3.layout.pie()&#xD;&#xA;      .sort(null);&#xD;&#xA;    var arc = d3.svg.arc()&#xD;&#xA;      .innerRadius(radius - 80)&#xD;&#xA;      .outerRadius(radius - 40);&#xD;&#xA;      &#xD;&#xA;    var arcThin = d3.svg.arc()&#xD;&#xA;      .innerRadius(radius - 65)&#xD;&#xA;      .outerRadius(radius - 55);&#xD;&#xA;    var svg = d3.select('#Donut-chart').append('svg')&#xD;&#xA;         .attr('id', 'Donut-chart-render')&#xD;&#xA;         .attr("width", '100%')&#xD;&#xA;         .attr("height", '100%')&#xD;&#xA;         .attr('viewBox', (-width / 2) + ' ' + (-height / 2) + ' ' + width + ' ' + height)&#xD;&#xA;         .attr('preserveAspectRatio', 'xMinYMin')&#xD;&#xA;      &#xD;&#xA;    var path = svg.selectAll("path")&#xD;&#xA;      .data(pie(dataset.numbers))&#xD;&#xA;      .enter().append("path")&#xD;&#xA;        .attr("fill", function (d, i) { return color(i); })&#xD;&#xA;        .attr("d", function(d){&#xD;&#xA;          	return arc(enterClockwise);&#xD;&#xA;        })&#xD;&#xA;        .each(function (d) {&#xD;&#xA;            this._current = {&#xD;&#xA;                data: d.data,&#xD;&#xA;                value: d.value,&#xD;&#xA;                startAngle: enterClockwise.startAngle,&#xD;&#xA;                endAngle: enterClockwise.endAngle&#xD;&#xA;            } &#xD;&#xA;        });&#xD;&#xA;    path.transition()&#xD;&#xA;        .duration(750)&#xD;&#xA;        .attrTween("d", arcTween);&#xD;&#xA;    function createChart() {&#xD;&#xA;        path = path.data(pie(dataset[this.value]));&#xD;&#xA;        path.enter().append("path")&#xD;&#xA;            .attr("fill", function (d, i) {&#xD;&#xA;                return color(i);&#xD;&#xA;            })&#xD;&#xA;            .attr("d", arc(enterAntiClockwise))&#xD;&#xA;            .each(function (d) {&#xD;&#xA;                this._current = {&#xD;&#xA;                    data: d.data,&#xD;&#xA;                    value: d.value,&#xD;&#xA;                    startAngle: enterAntiClockwise.startAngle,&#xD;&#xA;                    endAngle: enterAntiClockwise.endAngle&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;    }&#xD;&#xA;    function arcTween(a, j) {&#xD;&#xA;        var i = d3.interpolate(this._current, a);&#xD;&#xA;        this._current = i(0);&#xD;&#xA;        return function (t) {&#xD;&#xA;            return (j === (dataset.numbers.length - 1)) ? arcThin(i(t)) : arc(i(t));&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    /*&#xD;&#xA;    function arcTweenOut(a, j) {&#xD;&#xA;        var i = d3.interpolate(this._current, { startAngle: Math.PI * 2, endAngle: Math.PI * 2, value: 0 });&#xD;&#xA;        this._current = i(0);&#xD;&#xA;        return function (t) {&#xD;&#xA;            console.log(j === dataset.length - 1)&#xD;&#xA;            return arc(i(t));&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    */&#xD;&#xA;    function type(d) {&#xD;&#xA;        d.value = +d.value;&#xD;&#xA;        return d;&#xD;&#xA;    }&#xD;&#xA;    createChart(dataset);