    class HypotheticalArray {&#xD;&#xA;      constructor (...values) {&#xD;&#xA;        const [value] = values&#xD;&#xA;        // doesn't ever invoke the superclass constructor&#xD;&#xA;        // super()&#xD;&#xA;        if (values.length === 1) {&#xD;&#xA;          if (typeof value === 'number') {&#xD;&#xA;            if (value !== Math.floor(value) || value < 0) {&#xD;&#xA;              throw new RangeError('Invalid array length')&#xD;&#xA;            }&#xD;&#xA;            this.length = value&#xD;&#xA;            return&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        this.length = values.length&#xD;&#xA;        for (let i = 0; i < values.length; i++) {&#xD;&#xA;          this[i] = values[i]&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      &#xD;&#xA;      * [Symbol.iterator] () {&#xD;&#xA;        const { length } = this&#xD;&#xA;        for (let i = 0; i < length; i++) {&#xD;&#xA;          yield this[i]&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    // Array constructor actually inherits from Function constructor, not Object constructor&#xD;&#xA;    Object.setPrototypeOf(HypotheticalArray, Function)&#xD;&#xA;    class Enumerable {&#xD;&#xA;      constructor (iterator = function * () {}) {&#xD;&#xA;        this[Symbol.iterator] = iterator&#xD;&#xA;      }&#xD;&#xA;      asEnumerable() {&#xD;&#xA;        return new Enumerable(this[Symbol.iterator].bind(this))&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    /* These conditions must be satisfied in order to&#xD;&#xA;     * superclass an existing class (HypotheticalArray) with a new class (Enumerable)&#xD;&#xA;     * according to my Straw man proposal&#xD;&#xA;     */&#xD;&#xA;    console.log(Enumerable.prototype instanceof Object.getPrototypeOf(HypotheticalArray.prototype).constructor)&#xD;&#xA;    console.log(!(Enumerable.prototype instanceof HypotheticalArray))&#xD;&#xA;    // Now we can superclass Array with Enumerable&#xD;&#xA;    Object.setPrototypeOf(HypotheticalArray.prototype, Enumerable.prototype)&#xD;&#xA;    Object.setPrototypeOf(HypotheticalArray, Enumerable)&#xD;&#xA;    const array = new HypotheticalArray(...'abc')&#xD;&#xA;    // Checking that Array is not broken by Enumerable&#xD;&#xA;    console.log(array[Symbol.iterator] === HypotheticalArray.prototype[Symbol.iterator]) // UH OH&#xD;&#xA;    // Checking that Enumerable works as expected&#xD;&#xA;    const enumerable = array.asEnumerable()&#xD;&#xA;    console.log(array instanceof Enumerable)&#xD;&#xA;    console.log(!(enumerable instanceof HypotheticalArray))&#xD;&#xA;    for (const letter of enumerable) {&#xD;&#xA;      console.log(letter)&#xD;&#xA;    }