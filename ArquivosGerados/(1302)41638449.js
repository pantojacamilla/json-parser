    // Add your requirements&#xD;&#xA;    var restify = require("restify");&#xD;&#xA;    var builder = require("botbuilder");&#xD;&#xA;    var fs = require("fs");&#xD;&#xA;    var needle = require("needle");&#xD;&#xA;    var request = require("request");&#xD;&#xA;    var speechService = require("./speech-service.js");&#xD;&#xA;    var Promise = require('bluebird');&#xD;&#xA;    var request = require('request-promise').defaults({ encoding: null });&#xD;&#xA;    //=========================================================&#xD;&#xA;    // Bot Setup&#xD;&#xA;    //=========================================================&#xD;&#xA;    // Setup Restify Server&#xD;&#xA;    var server = restify.createServer();&#xD;&#xA;    server.listen(process.env.PORT || 3000, function() {&#xD;&#xA;       console.log("%s listening to %s", server.name, server.url); &#xD;&#xA;    });&#xD;&#xA;    // Create chat bot&#xD;&#xA;    var connector = new builder.ChatConnector ({&#xD;&#xA;        appId: process.env.MICROSOFT_APP_ID,&#xD;&#xA;        appPassword: process.env.MICROSOFT_APP_PASSWORD&#xD;&#xA;    });&#xD;&#xA;    server.post("/api/messages", connector.listen());&#xD;&#xA;    var bot = new builder.UniversalBot(connector);&#xD;&#xA;    //=========================================================&#xD;&#xA;    // Bots Middleware&#xD;&#xA;    //=========================================================&#xD;&#xA;    // Anytime the major version is incremented any existing conversations will be restarted.&#xD;&#xA;    bot.use(builder.Middleware.dialogVersion({ version: 1.0, resetCommand: /^reset/i }));&#xD;&#xA;    //=========================================================&#xD;&#xA;    // Bots Dialogs&#xD;&#xA;    //=========================================================&#xD;&#xA;    bot.dialog("/", [&#xD;&#xA;        function (session, results, next) {&#xD;&#xA;            var msg = session.message;&#xD;&#xA;            if (hasAudioAttachment(msg)) {&#xD;&#xA;                // Message with attachment, proceed to download it.&#xD;&#xA;                // Skype attachment URLs are secured by a JwtToken, so we need to pass the token from our bot.&#xD;&#xA;                var attachment = msg.attachments[0];&#xD;&#xA;                var fileDownload = isSkypeMessage(msg)&#xD;&#xA;                    ? requestWithToken(attachment.contentUrl)&#xD;&#xA;                    : request(attachment.contentUrl);&#xD;&#xA;                fileDownload.then(&#xD;&#xA;                    function (response) {&#xD;&#xA;                        // Send reply with attachment type & size&#xD;&#xA;                        var reply = new builder.Message(session)&#xD;&#xA;                            .text('Attachment from %s of %s type and size of %s bytes received.', msg.source, attachment.contentType, response.length);&#xD;&#xA;                        session.send(reply);&#xD;&#xA;                    }).catch(function (err) {&#xD;&#xA;                        console.log('Error downloading attachment:', { statusCode: err.statusCode, message: err.response.statusMessage });&#xD;&#xA;                });&#xD;&#xA;                var stream = isSkypeMessage(msg)&#xD;&#xA;                    ? getAudioStreamWithToken(attachment)&#xD;&#xA;                    : getAudioStream(attachment);&#xD;&#xA;                speechService.getTextFromAudioStream(stream)&#xD;&#xA;                    .then(text => {&#xD;&#xA;                        session.send("You said: " + text);&#xD;&#xA;                    })&#xD;&#xA;                    .catch(error => {&#xD;&#xA;                        session.send("Oops! Something went wrong. Try again later.");&#xD;&#xA;                        console.error(error);&#xD;&#xA;                    });&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                session.send("Did you upload an audio file? I'm more of an audible person. Try sending me a wav file");&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    ]);&#xD;&#xA;    function getAudioStream(attachment) {&#xD;&#xA;        return needle.get(attachment.contentUrl, { headers: {'Content-Type': "audio/wav"} });&#xD;&#xA;    }&#xD;&#xA;    function getAudioStreamWithToken(attachment) {&#xD;&#xA;        var headers = {};&#xD;&#xA;        connector.getAccessToken((error, token) => {&#xD;&#xA;            headers['Authorization'] = 'Bearer ' + token;&#xD;&#xA;        });&#xD;&#xA;        headers['Content-Type'] = attachment.contentType;&#xD;&#xA;        return needle.get(attachment.contentUrl, { headers: headers });&#xD;&#xA;    }&#xD;&#xA;    // Request file with Authentication Header&#xD;&#xA;    function requestWithToken(url) {&#xD;&#xA;        return obtainToken().then(function (token) {&#xD;&#xA;            return request({&#xD;&#xA;                url: url,&#xD;&#xA;                headers: {&#xD;&#xA;                    'Authorization': 'Bearer ' + token,&#xD;&#xA;                    'Content-Type': 'application/octet-stream'&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;    };&#xD;&#xA;    // Promise for obtaining JWT Token (requested once)&#xD;&#xA;    var obtainToken = Promise.promisify(connector.getAccessToken.bind(connector));&#xD;&#xA;    function isSkypeMessage(message) {&#xD;&#xA;        return message.source === "skype";&#xD;&#xA;    };