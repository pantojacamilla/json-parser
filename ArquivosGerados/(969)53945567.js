    type A =&#xD;&#xA;      | {&#xD;&#xA;          type: 'a';&#xD;&#xA;          a: string;&#xD;&#xA;        }&#xD;&#xA;      | {&#xD;&#xA;          type: 'b';&#xD;&#xA;          b: string;&#xD;&#xA;        };&#xD;&#xA;    type X = {&#xD;&#xA;      x: string;&#xD;&#xA;    } & A;&#xD;&#xA;    type XX = Pick<X, Exclude<keyof X, 'x'>> & {&#xD;&#xA;      x: number;&#xD;&#xA;    };&#xD;&#xA;    const x: XX = {} as any;&#xD;&#xA;    if (x.type === 'a') {&#xD;&#xA;      // Property 'a' does not exist on type 'XX'&#xD;&#xA;      console.log(x.a);&#xD;&#xA;    }