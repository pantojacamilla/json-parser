    import { Injectable } from '@angular/core';&#xD;&#xA;    import { ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate, Router } from '@angular/router';&#xD;&#xA;    import { AuthService } from './auth.service';&#xD;&#xA;    import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from 'angularfire2/firestore';&#xD;&#xA;    import { Subscription } from 'rxjs/Subscription';&#xD;&#xA;    //testing&#xD;&#xA;    import { Observable } from 'rxjs/Observable';&#xD;&#xA;    import { AngularFireAuth } from 'angularfire2/auth';&#xD;&#xA;    @Injectable()&#xD;&#xA;    export class CheckBillingService implements CanActivate {&#xD;&#xA;        private _subscription: Subscription;&#xD;&#xA;        private userBillingDocRef: AngularFirestoreDocument<any>;&#xD;&#xA;        userBilling: Observable<any>;&#xD;&#xA;        public activeAccount:Observable<boolean>&#xD;&#xA;        constructor(&#xD;&#xA;            private authService: AuthService,&#xD;&#xA;            private router: Router,&#xD;&#xA;            private auth: AngularFireAuth,&#xD;&#xA;            private readonly afs: AngularFirestore&#xD;&#xA;        ) {&#xD;&#xA;        }&#xD;&#xA;        canActivate(): Observable<boolean> {&#xD;&#xA;            this.authService.user.subscribe((user) => {&#xD;&#xA;                if (user) {&#xD;&#xA;                    var userId = user.uid;&#xD;&#xA;                    this.userBillingDocRef = this.afs.doc('user_billing/${userId}');&#xD;&#xA;                    this.userBilling = this.userBillingDocRef.snapshotChanges();&#xD;&#xA;                    this.userBilling.subscribe((value) => {&#xD;&#xA;                        const data = value.payload.data();&#xD;&#xA;                        if (data.account_status == "Active") {&#xD;&#xA;                            this.activeAccount = Observable.of(true);&#xD;&#xA;                            console.log('inside if statement for active = ', this.activeAccount);&#xD;&#xA;                        } else {&#xD;&#xA;                            this.activeAccount = Observable.of(false);&#xD;&#xA;                            console.log('inside if statement for not active = ', this.activeAccount);&#xD;&#xA;                            this.router.navigate(['resubscribe']);&#xD;&#xA;                        }&#xD;&#xA;                        console.log('userBilling.subscribe = ', this.activeAccount);&#xD;&#xA;                    });&#xD;&#xA;                    console.log('just outside userBilling.subscribe = ', this.activeAccount);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            // When refreshig my page, this returns as undefined.&#xD;&#xA;            // If I navigate to the correct page and work my way through the site it works fine&#xD;&#xA;            // However, refresh returns undefined.&#xD;&#xA;            console.log('out of auth = ', this.activeAccount);&#xD;&#xA;            return this.activeAccount;&#xD;&#xA;        }&#xD;&#xA;    }