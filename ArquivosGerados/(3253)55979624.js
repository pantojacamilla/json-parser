    template <class T>&#xD;&#xA;    class CNODO_D&#xD;&#xA;    {&#xD;&#xA;    private:&#xD;&#xA;    	T element;&#xD;&#xA;    	CNODO_D<T>* next;&#xD;&#xA;    	CNODO_D<T>* back;&#xD;&#xA;    public:&#xD;&#xA;    	CNODO_D(T e)&#xD;&#xA;    	{&#xD;&#xA;    		element = e;&#xD;&#xA;    		next = nullptr;&#xD;&#xA;    		back = nullptr;&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    template <class T>&#xD;&#xA;    class CLista_S&#xD;&#xA;    {&#xD;&#xA;    private:&#xD;&#xA;    	CNODO<T>* begin;&#xD;&#xA;    	int _size;&#xD;&#xA;    public:&#xD;&#xA;    	CLista_S()&#xD;&#xA;    	{&#xD;&#xA;    		begin = nullptr;&#xD;&#xA;    		_size = 0;&#xD;&#xA;    	}&#xD;&#xA;            void push_back(T e)&#xD;&#xA;    	{&#xD;&#xA;    		_size++;&#xD;&#xA;    		if (begin == nullptr)&#xD;&#xA;    		{&#xD;&#xA;    			CNODO_D<T>* n = new CNODO_D<T>(e);&#xD;&#xA;    			begin = n;&#xD;&#xA;    		}&#xD;&#xA;    		else&#xD;&#xA;    			//some other code&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    //creation object&#xD;&#xA;    CLista_D<CVida>* lista_vidas= new CLista_D<CVida>();&#xD;&#xA;    lista_vidas->push_back(CVida(p, num, v));//<==ERROR