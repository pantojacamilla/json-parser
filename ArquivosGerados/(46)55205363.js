        import React from "react";&#xD;&#xA;    &#xD;&#xA;    import $ from "jquery";&#xD;&#xA;    &#xD;&#xA;    require("datatables.net-bs");&#xD;&#xA;    require("datatables.net-buttons-bs");&#xD;&#xA;    require("datatables.net-buttons/js/buttons.colVis.js");&#xD;&#xA;    require("datatables.net-buttons/js/buttons.flash.js");&#xD;&#xA;    require("datatables.net-buttons/js/buttons.html5.js");&#xD;&#xA;    require("datatables.net-buttons/js/buttons.print.js");&#xD;&#xA;    require("datatables.net-colreorder-bs");&#xD;&#xA;    require("datatables.net-responsive-bs");&#xD;&#xA;    require("datatables.net-select-bs");&#xD;&#xA;    &#xD;&#xA;    export default class Datatable extends React.Component {&#xD;&#xA;      componentDidMount() {&#xD;&#xA;        this.datatable(this.props.data);&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      datatable() {&#xD;&#xA;        const element = $(this.refs.table);&#xD;&#xA;        let { options } = { ...this.props } || {};&#xD;&#xA;    &#xD;&#xA;        let toolbar = "";&#xD;&#xA;        if (options.buttons) toolbar += "B";&#xD;&#xA;        if (this.props.paginationLength) toolbar += "l";&#xD;&#xA;        if (this.props.columnsHide) toolbar += "C";&#xD;&#xA;    &#xD;&#xA;        if (typeof options.ajax === "string") {&#xD;&#xA;          let url = options.ajax;&#xD;&#xA;          options.ajax = {&#xD;&#xA;            url: url,&#xD;&#xA;            complete: function(xhr) {&#xD;&#xA;              // AjaxActions.contentLoaded(xhr)&#xD;&#xA;            }&#xD;&#xA;          };&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        options = {&#xD;&#xA;          ...options,&#xD;&#xA;          ...{&#xD;&#xA;            dom:&#xD;&#xA;              "<'dt-toolbar'<'col-xs-12 col-sm-6'f><'col-sm-6 col-xs-12 hidden-xs text-right'" +&#xD;&#xA;              toolbar +&#xD;&#xA;              ">r>" +&#xD;&#xA;              "t" +&#xD;&#xA;              "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-xs-12 col-sm-6'p>>",&#xD;&#xA;            oLanguage: {&#xD;&#xA;              sSearch:&#xD;&#xA;                "<span class='input-group-addon input-sm'><i class='glyphicon glyphicon-search'></i></span> ",&#xD;&#xA;              sLengthMenu: "_MENU_"&#xD;&#xA;            },&#xD;&#xA;            autoWidth: false,&#xD;&#xA;            retrieve: true,&#xD;&#xA;            responsive: true&#xD;&#xA;          }&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        const _dataTable = element.DataTable(options);&#xD;&#xA;    &#xD;&#xA;        if (this.props.filter) {&#xD;&#xA;          // Apply the filter&#xD;&#xA;          element.on("keyup change", "thead th input[type=text]", function() {&#xD;&#xA;            _dataTable&#xD;&#xA;              .column(&#xD;&#xA;                $(this)&#xD;&#xA;                  .parent()&#xD;&#xA;                  .index() + ":visible"&#xD;&#xA;              )&#xD;&#xA;              .search(this.value)&#xD;&#xA;              .draw();&#xD;&#xA;          });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        if (!toolbar) {&#xD;&#xA;          element&#xD;&#xA;            .parent()&#xD;&#xA;            .find(".dt-toolbar")&#xD;&#xA;            .append(&#xD;&#xA;              '<div class="text-right"><img src="assets/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>'&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        if (this.props.detailsFormat) {&#xD;&#xA;          const format = this.props.detailsFormat;&#xD;&#xA;          element.on("click", "td.details-control", function() {&#xD;&#xA;            const tr = $(this).closest("tr");&#xD;&#xA;            const row = _dataTable.row(tr);&#xD;&#xA;            if (row.child.isShown()) {&#xD;&#xA;              row.child.hide();&#xD;&#xA;              tr.removeClass("shown");&#xD;&#xA;            } else {&#xD;&#xA;              row.child(format(row.data())).show();&#xD;&#xA;              tr.addClass("shown");&#xD;&#xA;            }&#xD;&#xA;          });&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      render() {&#xD;&#xA;        let {&#xD;&#xA;          children,&#xD;&#xA;          options,&#xD;&#xA;          detailsFormat,&#xD;&#xA;          paginationLength,&#xD;&#xA;          ...props&#xD;&#xA;        } = this.props;&#xD;&#xA;        return (&#xD;&#xA;          <table {...props} ref="table">&#xD;&#xA;            {children}&#xD;&#xA;          </table>&#xD;&#xA;        );&#xD;&#xA;      }&#xD;&#xA;    }