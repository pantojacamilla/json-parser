    var text = g.selectAll("text")&#xD;&#xA;    .data(nodes)&#xD;&#xA;    .enter().append("text")&#xD;&#xA;    .attr("class", "label")&#xD;&#xA;    .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })&#xD;&#xA;    .style("display", function(d) { return d.parent === root ? "inline" : "none"; })&#xD;&#xA;    // ITEMS FONT SIZE HERE&#xD;&#xA;    .style("font-size", function(d) { if(d.parent) { console.log(d.depth, d.r);var size = (d.r * d.depth * 0.175) } return size + "px" ; })&#xD;&#xA;    .text(function(d) { return d.data.name; });&#xD;&#xA;    var node = g.selectAll("circle,text");&#xD;&#xA;    svg&#xD;&#xA;    .style("background", color(-1))&#xD;&#xA;    .on("click", function() { zoom(root); });&#xD;&#xA;    zoomTo([root.x, root.y, root.r * 2 + margin]);&#xD;&#xA;    function zoom(d) {&#xD;&#xA;    var focus0 = focus; focus = d;&#xD;&#xA;    var transition = d3.transition()&#xD;&#xA;    .duration(d3.event.altKey ? 7500 : 750)&#xD;&#xA;    .tween("zoom", function(d) {&#xD;&#xA;    var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);&#xD;&#xA;    return function(t) { zoomTo(i(t)); };&#xD;&#xA;    });&#xD;&#xA;    transition.selectAll("text")&#xD;&#xA;    .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })&#xD;&#xA;    .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })&#xD;&#xA;    .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })&#xD;&#xA;    .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });&#xD;&#xA;    }&#xD;&#xA;    function zoomTo(v) {&#xD;&#xA;    var k = diameter / v[2]; view = v;&#xD;&#xA;    node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });&#xD;&#xA;    circle.attr("r", function(d) { return d.r * k; });&#xD;&#xA;    }&#xD;&#xA;    });&#xD;&#xA;    </script>