    var React = require("react");&#xD;&#xA;    var ReactDOM = require("react-dom");&#xD;&#xA;    &#xD;&#xA;    import { SortableContainer, SortableElement, arrayMove, SortableHandle } from 'react-sortable-hoc';&#xD;&#xA;    &#xD;&#xA;    import GenericElement from './chatbot-card-generic-element';&#xD;&#xA;    import ActionCard from './chatbot-card-_master';&#xD;&#xA;    &#xD;&#xA;    const DragHandle = SortableHandle(() => <a href="javascrip:;" className="btn btn-circle btn-icon-only btn-default">&#xD;&#xA;        <i className="fa fa-arrows-h"></i></a>);&#xD;&#xA;    &#xD;&#xA;    const SortableItem = SortableElement(&#xD;&#xA;        ({value, onRemoveCard, onUpdateCard, disabled, refindex}) =>&#xD;&#xA;        <div className="col-md-4">        &#xD;&#xA;            <div className="actions">            &#xD;&#xA;                <a className="btn btn-circle btn-icon-only btn-default" href="javascript:;"&#xD;&#xA;                    onClick={onRemoveCard}>&#xD;&#xA;                    <i className="icon-trash"></i>&#xD;&#xA;                </a>&#xD;&#xA;                { (disabled == false || disabled == undefined) && <DragHandle /> }            &#xD;&#xA;            </div>&#xD;&#xA;            <GenericElement {...value} index={refindex} onUpdateCard={onUpdateCard}/>&#xD;&#xA;        </div>&#xD;&#xA;    );&#xD;&#xA;    &#xD;&#xA;    const SortableList = SortableContainer(&#xD;&#xA;        ({items, onAddNewCard, onRemoveCard, onUpdateCard}) => {&#xD;&#xA;            return (&#xD;&#xA;                // <ul style={{ listStyle: "none", padding: "0px", display: "inline-block" }}>&#xD;&#xA;                <div className="row generic-list-item">&#xD;&#xA;                    { items.map((item, index) => (&#xD;&#xA;                        <SortableItem &#xD;&#xA;                            key={ `gallery-${index}`} &#xD;&#xA;                            index={index} &#xD;&#xA;                            value={item} &#xD;&#xA;                            refindex={index}&#xD;&#xA;                            onUpdateCard={onUpdateCard}&#xD;&#xA;                            onRemoveCard={onRemoveCard}>&#xD;&#xA;                        </SortableItem>&#xD;&#xA;                    ))}&#xD;&#xA;                    <div className="col-md-4">&#xD;&#xA;                        <a href="javascript:;" onClick={onAddNewCard} className="btn btn-circle btn-icon-only btn-default">&#xD;&#xA;                                <i className="glyphicon glyphicon-plus"></i>&#xD;&#xA;                        </a>&#xD;&#xA;                    </div>&#xD;&#xA;                </div>&#xD;&#xA;                //</ul>&#xD;&#xA;            );&#xD;&#xA;        }&#xD;&#xA;    );&#xD;&#xA;    &#xD;&#xA;    export default class GenericCard extends React.Component {&#xD;&#xA;    &#xD;&#xA;        constructor(props) {&#xD;&#xA;            super(props);&#xD;&#xA;    &#xD;&#xA;            this.state = {&#xD;&#xA;                //items: this.props.message.attachment.payload.elements&#xD;&#xA;                elements: this.props.elements&#xD;&#xA;            };&#xD;&#xA;    &#xD;&#xA;            this.onSortEnd = this.onSortEnd.bind(this);&#xD;&#xA;            this.onAddNewCard = this.onAddNewCard.bind(this);&#xD;&#xA;            this.onRemoveCard = this.onRemoveCard.bind(this);&#xD;&#xA;            this.onUpdateCard = this.onUpdateCard.bind(this);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        componentWillReceiveProps(nextProps) {&#xD;&#xA;            this.setState({ elements: nextProps.elements });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        componentWillUpdate(nextProps, nextState) {&#xD;&#xA;            if(JSON.stringify({ elements: this.props.elements }) !== JSON.stringify(nextState)) {&#xD;&#xA;                if(this.props.onUpdateCard != undefined) {&#xD;&#xA;                    this.props.onUpdateCard(nextState);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        onSortEnd({oldIndex, newIndex, collection}, event) {&#xD;&#xA;            var elements = this.state.elements;&#xD;&#xA;    &#xD;&#xA;            var move = arrayMove(elements, oldIndex, newIndex);&#xD;&#xA;    &#xD;&#xA;            this.setState({&#xD;&#xA;                elements: move&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        onAddNewCard() {&#xD;&#xA;            let elements = this.state.elements;&#xD;&#xA;    &#xD;&#xA;            elements.push(GenericElement.defaultProps);&#xD;&#xA;    &#xD;&#xA;            this.setState({&#xD;&#xA;                elements: elements&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        onRemoveCard(index) {&#xD;&#xA;    &#xD;&#xA;            this.state.elements.splice(index, 1);&#xD;&#xA;    &#xD;&#xA;            this.setState({&#xD;&#xA;                elements: this.state.elements&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        onUpdateCard(cardData) {&#xD;&#xA;            // if(this.props.onUpdateCard != undefined) {&#xD;&#xA;            //     this.props.onUpdateCard(cardData, index);&#xD;&#xA;            // }&#xD;&#xA;    &#xD;&#xA;           if(cardData.index < 0) {&#xD;&#xA;                this.state.elements.push(cardData);&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                this.state.elements[cardData.index] = cardData;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            this.setState({&#xD;&#xA;                elements: this.state.elements&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        render() {&#xD;&#xA;            return (&#xD;&#xA;                    <SortableList &#xD;&#xA;                        axis="x"&#xD;&#xA;                        useDragHandle={true}&#xD;&#xA;                        lockToContainerEdges={true}&#xD;&#xA;                        items={this.state.elements} &#xD;&#xA;                        onSortEnd={this.onSortEnd}&#xD;&#xA;                        onAddNewCard={this.onAddNewCard}&#xD;&#xA;                        onRemoveCard={this.onRemoveCard}&#xD;&#xA;                        onUpdateCard={this.onUpdateCard}>&#xD;&#xA;                    </SortableList>);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    GenericCard.propTypes = {&#xD;&#xA;        template_type: React.PropTypes.oneOf(["generic"]),&#xD;&#xA;        image_aspect_ratio: React.PropTypes.oneOf(['horizontal', 'square']),&#xD;&#xA;        elements: React.PropTypes.arrayOf(&#xD;&#xA;            React.PropTypes.shape(GenericElement.propTypes)&#xD;&#xA;            )&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    GenericCard.defaultProps = {&#xD;&#xA;        template_type: "generic",&#xD;&#xA;        image_aspect_ratio: "horizontal",&#xD;&#xA;        elements: [ GenericElement.defaultProps ]&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    // ReactDOM.render(&#xD;&#xA;    //     <Gallery message={gallery}/>, &#xD;&#xA;    //     document.getElementById('root')&#xD;&#xA;    // );