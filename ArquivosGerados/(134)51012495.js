    function drawHighchart(timeFramUrl) {&#xD;&#xA;        $.ajax({url: timeFramUrl, success: function(data){&#xD;&#xA;            var currentValue = (data[data.length - 1][1]);&#xD;&#xA;            Highcharts.chart('container', {&#xD;&#xA;            chart: {&#xD;&#xA;              zoomType: 'x',&#xD;&#xA;              events: {&#xD;&#xA;                load: function() {&#xD;&#xA;                  var series = this.series[0];&#xD;&#xA;                  var chart  = this;&#xD;&#xA;                  var yAxis  = chart.yAxis[0],&#xD;&#xA;                               plotLine,&#xD;&#xA;                               d,&#xD;&#xA;                               newY;&#xD;&#xA;                  yAxis.addPlotLine({&#xD;&#xA;                    value: currentValue,&#xD;&#xA;                    color: '#ff5959',&#xD;&#xA;                    width: 2,&#xD;&#xA;                    zIndex: 5,&#xD;&#xA;                    id: 'plot-line-1',&#xD;&#xA;                    label: {&#xD;&#xA;                      text: currentValue,&#xD;&#xA;                      style: {&#xD;&#xA;                        color: '#ff5959',&#xD;&#xA;                        fontWeight: 'bold'&#xD;&#xA;                      }&#xD;&#xA;                    }&#xD;&#xA;                  });&#xD;&#xA;                  reload = setInterval(function() {&#xD;&#xA;                    $.getJSON(timeFramUrl + '?v=' + Math.random(), function(recData) {&#xD;&#xA;                        &#xD;&#xA;                      var currentValue = (recData[recData.length - 1][1]); &#xD;&#xA;                      var currenttime  = (recData[recData.length - 1][0]);&#xD;&#xA;                      series.setData(recData);&#xD;&#xA;                      var x = currenttime,&#xD;&#xA;                          y = currentValue;&#xD;&#xA;                      series.addPoint([x, y], true, true);    &#xD;&#xA;                      plotLine  = yAxis.plotLinesAndBands[0].svgElem;&#xD;&#xA;                      d         = plotLine.d.split(' ');&#xD;&#xA;                      newY      = yAxis.toPixels(y) - d[2];&#xD;&#xA;                      plotlabel = yAxis.plotLinesAndBands[0].label;&#xD;&#xA;                      plotlabel.animate({&#xD;&#xA;                      translateY: newY,&#xD;&#xA;                      text: Highcharts.numberFormat(y, 2)&#xD;&#xA;                      }, {&#xD;&#xA;                        duration: 400,&#xD;&#xA;                        step: function() {&#xD;&#xA;                          $(this.element).html(y);&#xD;&#xA;                        },&#xD;&#xA;                        complete: function() { }&#xD;&#xA;                      }),&#xD;&#xA;                      plotLine.animate({&#xD;&#xA;                        translateY: newY&#xD;&#xA;                      }, 400);&#xD;&#xA;                    });&#xD;&#xA;                  }, 5000);&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;        },  &#xD;&#xA;            title:         { text:        ''},&#xD;&#xA;            exporting:     { enabled: false },&#xD;&#xA;            credits:       { enabled: false },&#xD;&#xA;            xAxis:         { type: 'datetime'},&#xD;&#xA;            yAxis:         { opposite: true,&#xD;&#xA;                             labels: {&#xD;&#xA;                                align: 'left',&#xD;&#xA;                             },&#xD;&#xA;                             gridLineWidth: 0, &#xD;&#xA;                             title: {&#xD;&#xA;                                text: 'Exchange rate'&#xD;&#xA;                            }, &#xD;&#xA;            },&#xD;&#xA;            plotOptions: {&#xD;&#xA;              areaspline: { &#xD;&#xA;                marker: {&#xD;&#xA;                  enabled: false&#xD;&#xA;                }&#xD;&#xA;              }&#xD;&#xA;            },&#xD;&#xA;            series: [{&#xD;&#xA;                name: 'Exchange BTC to EUR',&#xD;&#xA;                data: data,&#xD;&#xA;                type: 'areaspline',&#xD;&#xA;                threshold: null,&#xD;&#xA;                animation: true,&#xD;&#xA;                tooltip: {&#xD;&#xA;                    valueDecimals: 2&#xD;&#xA;                },&#xD;&#xA;                fillColor: {&#xD;&#xA;                    linearGradient: { x1: 5, y1: 0, x2: 0, y2: 0&#xD;&#xA;                },&#xD;&#xA;                stops: [ [0, Highcharts.getOptions().colors[0]], [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')] ]&#xD;&#xA;                }&#xD;&#xA;            }]&#xD;&#xA;        });&#xD;&#xA;        }});&#xD;&#xA;    }&#xD;&#xA;// To save as cookie&#xD;&#xA;    $(document).ready(function() {&#xD;&#xA;        var srcURL = $(':selected', '#timePeriod').data('url');&#xD;&#xA;        drawHighchart(srcURL);&#xD;&#xA;        $('#timePeriod').change(function(){&#xD;&#xA;            var srcURL = $(':selected', this).data('url');&#xD;&#xA;            drawHighchart(srcURL);&#xD;&#xA;        });&#xD;&#xA;    });&#xD;&#xA;    $('#timePeriod').change(function(){&#xD;&#xA;         clearInterval(reload); &#xD;&#xA;    });