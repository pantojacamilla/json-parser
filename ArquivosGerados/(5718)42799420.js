    // default alpha for bars&#xD;&#xA;    var alpha = 0.6&#xD;&#xA;    // fake data&#xD;&#xA;    var data = [19, 80, 30, 15, 55, 35, 40,&#xD;&#xA;      45, 50, 70, 109, 35, 78,&#xD;&#xA;      87, 76, 22, 2, 33, 44, 59, 200&#xD;&#xA;    ]&#xD;&#xA;    var animals = ['Bobcat', 'Dog', 'Cat', 'Boar', 'Cheetah', 'Chimp', 'Dragon',&#xD;&#xA;      'Elephant', 'Human', 'Elf', 'Giant', 'Batman', 'Donkey',&#xD;&#xA;      'Henry', 'Face', 'Funny', 'Kitty', 'Doggy', 'Joker', 'Alf', 'Earth'&#xD;&#xA;    ]&#xD;&#xA;    // we scale the height of our bars using d3's linear scale&#xD;&#xA;    var hscale = d3.scale.linear()&#xD;&#xA;      .domain([0, d3.max(data)])&#xD;&#xA;      .range([0, 3])&#xD;&#xA;    // we select the scene object just like an svg&#xD;&#xA;    var scene = d3.select("a-scene")&#xD;&#xA;    // we use d3's enter/update/exit pattern to draw and bind our dom elements&#xD;&#xA;    var bars = scene.selectAll("a-box.bar").data(data)&#xD;&#xA;    bars.enter().append("a-box").classed("bar", true)&#xD;&#xA;    $(".bar").append("<a-text> </a-text>");&#xD;&#xA;    // we set attributes on our cubes to determine how they are rendered&#xD;&#xA;    bars.attr({&#xD;&#xA;        position: function(d, i) {&#xD;&#xA;          var x = i * .75&#xD;&#xA;          var y = hscale(d) / 2;&#xD;&#xA;          var z = 1&#xD;&#xA;          return x + " " + y + " " + z&#xD;&#xA;        },&#xD;&#xA;        width: function(d) {&#xD;&#xA;          return 0.5&#xD;&#xA;        },&#xD;&#xA;        depth: function(d) {&#xD;&#xA;          return 0.9&#xD;&#xA;        },&#xD;&#xA;        height: function(d) {&#xD;&#xA;          return hscale(d)&#xD;&#xA;        },&#xD;&#xA;        opacity: alpha,&#xD;&#xA;        color: 'blue'&#xD;&#xA;      })&#xD;&#xA;      .on("click", function(d, i) {&#xD;&#xA;        console.log("click", i, d)&#xD;&#xA;      })&#xD;&#xA;      .on("mouseenter", function(d, i) {&#xD;&#xA;        // this event gets fired continuously as long as the cursor&#xD;&#xA;        // is over the element. we only want trigger our animation the first time&#xD;&#xA;        if (this.hovering) return;&#xD;&#xA;        console.log("hover", i, d)&#xD;&#xA;        this.hovering = true;&#xD;&#xA;        d3.select(this).transition().duration(10)&#xD;&#xA;          .attr({&#xD;&#xA;            metalness: 0.8,&#xD;&#xA;            opacity: .9&#xD;&#xA;          })&#xD;&#xA;        d3.select(this).select("a-text")&#xD;&#xA;          .attr({&#xD;&#xA;            'color': 'hsla(240, 100%, 25%, 0.6)',&#xD;&#xA;            'align': 'center',&#xD;&#xA;            'position': '0 ' + (hscale(d) / 2 + .5) + ' 0',&#xD;&#xA;            'scale': '1 1 1',&#xD;&#xA;            'value': animals[i] + ', ' + d&#xD;&#xA;          })&#xD;&#xA;      })&#xD;&#xA;      .on("mouseleave", function(d, i) {&#xD;&#xA;        console.log("leave", i, d)&#xD;&#xA;        this.hovering = false;&#xD;&#xA;        d3.select(this).transition().duration(500)&#xD;&#xA;          .attr({&#xD;&#xA;            metalness: 0,&#xD;&#xA;            opacity: alpha&#xD;&#xA;          })&#xD;&#xA;        d3.select(this).select("a-text")&#xD;&#xA;          .attr({&#xD;&#xA;            'color': 'blue',&#xD;&#xA;            'align': 'center',&#xD;&#xA;            'position': '0 ' + (hscale(d) / 2 + .5) + ' 0',&#xD;&#xA;            'scale': '.01 .01 .01',&#xD;&#xA;            'value': d&#xD;&#xA;          })&#xD;&#xA;      })