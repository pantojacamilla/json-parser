    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();&#xD;&#xA;    // create Oscillator node&#xD;&#xA;    var oscillator = audioCtx.createOscillator();&#xD;&#xA;    var osc_arr = [];&#xD;&#xA;    function purgeSound(){&#xD;&#xA;      osc_arr.forEach(function(v){&#xD;&#xA;        try {&#xD;&#xA;          v.stop();&#xD;&#xA;          v.disconnect(audioCtx.destination);&#xD;&#xA;        } catch (e) {}&#xD;&#xA;      })&#xD;&#xA;    }&#xD;&#xA;    function playSoundAtFreq(fq){&#xD;&#xA;      purgeSound();&#xD;&#xA;      var osc = audioCtx.createOscillator();&#xD;&#xA;      osc_arr.push(osc);&#xD;&#xA;      osc.type = 'square';&#xD;&#xA;      osc.frequency.setValueAtTime(fq, audioCtx.currentTime); // value in hertz&#xD;&#xA;      $('#fff').val(fq);&#xD;&#xA;      osc.connect(audioCtx.destination);&#xD;&#xA;      osc.start();&#xD;&#xA;    }&#xD;&#xA;    $('#stop').click(function(){&#xD;&#xA;      purgeSound();&#xD;&#xA;      _break = true;&#xD;&#xA;    })&#xD;&#xA;    var _break = false;&#xD;&#xA;    function sleep(ms) {&#xD;&#xA;      return new Promise(resolve => setTimeout(resolve, ms));&#xD;&#xA;    }&#xD;&#xA;    var pointer = 0;&#xD;&#xA;    var go = appendAttemptAsync(10000);&#xD;&#xA;    async function appendAttemptAsync(range) {&#xD;&#xA;      if(_break) return;&#xD;&#xA;      var target = pointer+range;&#xD;&#xA;      for (pointer; pointer<range; pointer++) {&#xD;&#xA;        playSoundAtFreq(pointer);&#xD;&#xA;        console.log(pointer)&#xD;&#xA;        //if(pointer % 1 == 0) {&#xD;&#xA;          await sleep(100)&#xD;&#xA;        //}&#xD;&#xA;      }&#xD;&#xA;      return 5221;&#xD;&#xA;    }