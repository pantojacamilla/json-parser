    // set the dimensions and margins of the graph&#xD;&#xA;    var margin = {top: 10, right: 30, bottom: 30, left: 40},&#xD;&#xA;        width = 460 - margin.left - margin.right,&#xD;&#xA;        height = 400 - margin.top - margin.bottom;&#xD;&#xA;    // append the svg object to the body of the page&#xD;&#xA;    var svg = d3.select("#my_dataviz")&#xD;&#xA;      .append("svg")&#xD;&#xA;        .attr("width", width + margin.left + margin.right)&#xD;&#xA;        .attr("height", height + margin.top + margin.bottom)&#xD;&#xA;      .append("g")&#xD;&#xA;        .attr("transform",&#xD;&#xA;              "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;    // Read the data and compute summary statistics for each specie&#xD;&#xA;    d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/iris.csv", function(data) {&#xD;&#xA;      // Compute quartiles, median, inter quantile range min and max --> these info are then used to draw the box.&#xD;&#xA;      var sumstat = d3.nest() // nest function allows to group the calculation per level of a factor&#xD;&#xA;        .key(function(d) { return d.Species;})&#xD;&#xA;        .rollup(function(d) {&#xD;&#xA;          q1 = d3.quantile(d.map(function(g) { return g.Sepal_Length;}).sort(d3.ascending),.25)&#xD;&#xA;          median = d3.quantile(d.map(function(g) { return g.Sepal_Length;}).sort(d3.ascending),.5)&#xD;&#xA;          q3 = d3.quantile(d.map(function(g) { return g.Sepal_Length;}).sort(d3.ascending),.75)&#xD;&#xA;          interQuantileRange = q3 - q1&#xD;&#xA;          min = q1 - 1.5 * interQuantileRange&#xD;&#xA;          max = q3 + 1.5 * interQuantileRange&#xD;&#xA;          return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})&#xD;&#xA;        })&#xD;&#xA;        .entries(data)&#xD;&#xA;      // Show the X scale&#xD;&#xA;      var x = d3.scaleBand()&#xD;&#xA;        .range([ 0, width ])&#xD;&#xA;        .domain(["setosa", "versicolor", "virginica"])&#xD;&#xA;        .paddingInner(1)&#xD;&#xA;        .paddingOuter(.5)&#xD;&#xA;      svg.append("g")&#xD;&#xA;        .attr("transform", "translate(0," + height + ")")&#xD;&#xA;        .call(d3.axisBottom(x))&#xD;&#xA;      // Show the Y scale&#xD;&#xA;      var y = d3.scaleLinear()&#xD;&#xA;        .domain([3,9])&#xD;&#xA;        .range([height, 0])&#xD;&#xA;      svg.append("g").call(d3.axisLeft(y))&#xD;&#xA;      // Show the main vertical line&#xD;&#xA;      svg&#xD;&#xA;        .selectAll("vertLines")&#xD;&#xA;        .data(sumstat)&#xD;&#xA;        .enter()&#xD;&#xA;        .append("line")&#xD;&#xA;          .attr("x1", function(d){return(x(d.key))})&#xD;&#xA;          .attr("x2", function(d){return(x(d.key))})&#xD;&#xA;          .attr("y1", function(d){return(y(d.value.min))})&#xD;&#xA;          .attr("y2", function(d){return(y(d.value.max))})&#xD;&#xA;          .attr("stroke", "black")&#xD;&#xA;          .style("width", 40)&#xD;&#xA;      // rectangle for the main box&#xD;&#xA;      var boxWidth = 100&#xD;&#xA;      svg&#xD;&#xA;        .selectAll("boxes")&#xD;&#xA;        .data(sumstat)&#xD;&#xA;        .enter()&#xD;&#xA;        .append("rect")&#xD;&#xA;            .attr("x", function(d){return(x(d.key)-boxWidth/2)})&#xD;&#xA;            .attr("y", function(d){return(y(d.value.q3))})&#xD;&#xA;            .attr("height", function(d){return(y(d.value.q1)-y(d.value.q3))})&#xD;&#xA;            .attr("width", boxWidth )&#xD;&#xA;            .attr("stroke", "black")&#xD;&#xA;            .style("fill", "#69b3a2")&#xD;&#xA;      // Show the median&#xD;&#xA;      svg&#xD;&#xA;        .selectAll("medianLines")&#xD;&#xA;        .data(sumstat)&#xD;&#xA;        .enter()&#xD;&#xA;        .append("line")&#xD;&#xA;          .attr("x1", function(d){return(x(d.key)-boxWidth/2) })&#xD;&#xA;          .attr("x2", function(d){return(x(d.key)+boxWidth/2) })&#xD;&#xA;          .attr("y1", function(d){return(y(d.value.median))})&#xD;&#xA;          .attr("y2", function(d){return(y(d.value.median))})&#xD;&#xA;          .attr("stroke", "black")&#xD;&#xA;          .style("width", 80)&#xD;&#xA;    // Add individual points with jitter&#xD;&#xA;    var jitterWidth = 50&#xD;&#xA;    svg&#xD;&#xA;      .selectAll("indPoints")&#xD;&#xA;      .data(data)&#xD;&#xA;      .enter()&#xD;&#xA;      .append("circle")&#xD;&#xA;        .attr("cx", function(d){return(x(d.Species) - jitterWidth/2 + Math.random()*jitterWidth )})&#xD;&#xA;        .attr("cy", function(d){return(y(d.Sepal_Length))})&#xD;&#xA;        .attr("r", 4)&#xD;&#xA;        .style("fill", "white")&#xD;&#xA;        .attr("stroke", "black")&#xD;&#xA;    })