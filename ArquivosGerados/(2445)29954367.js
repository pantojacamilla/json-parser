            var options = { limit: 1, duration: 10 };&#xD;&#xA;            console.log(options);&#xD;&#xA;            $cordovaCapture.captureAudio(options).then(function(audioData) &#xD;&#xA;            {&#xD;&#xA;              //  alert("Record was success");&#xD;&#xA;             &#xD;&#xA;                console.log("in $cordovaCapture.captureAudio function")&#xD;&#xA;                var path = audioData[0].fullPath;&#xD;&#xA;                console.log(path + "   var path")&#xD;&#xA;                window.localStorage['tmpRecord'] = path;&#xD;&#xA;                console.log(window.localStorage['tmpRecord'] + " window.localStorage")&#xD;&#xA;                window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, gotFS, fail);&#xD;&#xA;                function gotFS(fileSystem) {&#xD;&#xA;                    console.log(fileSystem + " gotFS function");&#xD;&#xA;                    fileSystem.root.getFile(audioData[0].name, {create : true}, gotFileEntry, fail);&#xD;&#xA;                }&#xD;&#xA;                function gotFileEntry(fileEntry) {&#xD;&#xA;                    console.log("gotFileEntry:" + fileEntry);&#xD;&#xA;                    fileEntry.file(gotFile, fail);&#xD;&#xA;                }&#xD;&#xA;                function gotFile(file){&#xD;&#xA;                    console.log("gotFile");&#xD;&#xA;                    //readBinaryString(file);&#xD;&#xA;                    readArrayBuffer(file);&#xD;&#xA;                }&#xD;&#xA;                /* GET TIMESTAMP */&#xD;&#xA;                function checkTime(i) {&#xD;&#xA;                    if (i < 10) {&#xD;&#xA;                        i = "0" + i;&#xD;&#xA;                    }&#xD;&#xA;                    return i;&#xD;&#xA;                }&#xD;&#xA;                function getHHMMSS(){&#xD;&#xA;                    var today = new Date();&#xD;&#xA;                    var h = today.getHours();&#xD;&#xA;                    var m = today.getMinutes();&#xD;&#xA;                    var s = today.getSeconds();&#xD;&#xA;                    // add a zero in front of numbers<10&#xD;&#xA;                    m = checkTime(m);&#xD;&#xA;                    s = checkTime(s);&#xD;&#xA;                    return h + ":" + m + ":" + s;&#xD;&#xA;                }&#xD;&#xA;           &#xD;&#xA;                /************* SAVE THE FILE *************/&#xD;&#xA;                function readArrayBuffer(file){&#xD;&#xA;                    var reader = new FileReader();&#xD;&#xA;                    console.log(reader + "   var reader is here");&#xD;&#xA;                    reader.onloadend = function(evt) {&#xD;&#xA;                        console.log("readArrayBuffer : " + evt.target.result);&#xD;&#xA;                        &#xD;&#xA;                        var ParseFile = new Parse.File("recording.wav", file);&#xD;&#xA;                        console.log(ParseFile + "    var Parsefile is here")&#xD;&#xA;                        ParseFile.save().then(function() &#xD;&#xA;                        {&#xD;&#xA;                           // alert('Inside ParseFile.save()');&#xD;&#xA;                            var myPoint = new Parse.GeoPoint({latitude: $scope.currentLiveLatitude, longitude: $scope.currentLiveLongitude});&#xD;&#xA;                            console.log(myPoint)&#xD;&#xA;                            var recording = new Parse.Object("Recordings");&#xD;&#xA;                            console.log(recording)&#xD;&#xA;                            /*Set variables */&#xD;&#xA;                            recording.set("username", "Sasstic Plurgery");&#xD;&#xA;                            recording.set("latitude", $scope.currentLiveLatitude.toString());&#xD;&#xA;                            recording.set("longitude", $scope.currentLiveLongitude.toString());&#xD;&#xA;                            recording.set("geoLocation", myPoint);&#xD;&#xA;                            recording.set("dateTime", getHHMMSS());&#xD;&#xA;                            recording.set("recording", ParseFile);&#xD;&#xA;                            /*Save to server */&#xD;&#xA;                            recording.save({&#xD;&#xA;                                success: function(recording) {&#xD;&#xA;                                    alert("Recordings saved successfully");&#xD;&#xA;                                },&#xD;&#xA;                                error: function(recording, error){&#xD;&#xA;                                    alert("Recordings save failure, error = " + error + " error msg: " + error.message);&#xD;&#xA;                                }&#xD;&#xA;                            });&#xD;&#xA;                        },function(error) {&#xD;&#xA;                            alert("File save failure");&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;                  reader.readAsArrayBuffer(file);&#xD;&#xA;                }