    function getRandom(min, max) {&#xD;&#xA;      const first = Math.ceil(min)&#xD;&#xA;      const last = Math.floor(max)&#xD;&#xA;      return Math.floor(Math.random() * (last - first + 1)) + first&#xD;&#xA;    }&#xD;&#xA;    function replaceWithRandom(someData) {&#xD;&#xA;      let newData = {}&#xD;&#xA;      for (let d in someData) {&#xD;&#xA;        newData[d] = getRandom(someData[d], someData[d] + 500)&#xD;&#xA;      }&#xD;&#xA;      return newData&#xD;&#xA;    }&#xD;&#xA;    const PopupWindowWithHooks = props => {&#xD;&#xA;      const containerEl = document.createElement('div')&#xD;&#xA;      let externalWindow = null&#xD;&#xA;      useEffect(&#xD;&#xA;        () => {&#xD;&#xA;          externalWindow = window.open(&#xD;&#xA;            '',&#xD;&#xA;            '',&#xD;&#xA;width=600,height=400,left=200,top=200&#xD;&#xA;          )&#xD;&#xA;          externalWindow.document.body.appendChild(containerEl)&#xD;&#xA;          externalWindow.addEventListener('beforeunload', () => {&#xD;&#xA;            props.closePopupWindowWithHooks()&#xD;&#xA;          })&#xD;&#xA;          console.log('Created Popup Window')&#xD;&#xA;          return function cleanup() {&#xD;&#xA;            console.log('Cleaned up Popup Window')&#xD;&#xA;            externalWindow.close()&#xD;&#xA;            externalWindow = null&#xD;&#xA;          }&#xD;&#xA;        },&#xD;&#xA;        // Only re-renders this component if the variable changes&#xD;&#xA;        []&#xD;&#xA;      )&#xD;&#xA;      return ReactDOM.createPortal(props.children, containerEl)&#xD;&#xA;    }&#xD;&#xA;    class PopupWindow extends React.Component {&#xD;&#xA;      containerEl = document.createElement('div')&#xD;&#xA;      externalWindow = null&#xD;&#xA;      componentDidMount() {&#xD;&#xA;        this.externalWindow = window.open(&#xD;&#xA;          '',&#xD;&#xA;          '',&#xD;&#xA;width=600,height=400,left=200,top=200&#xD;&#xA;        )&#xD;&#xA;        this.externalWindow.document.body.appendChild(this.containerEl)&#xD;&#xA;        this.externalWindow.addEventListener('beforeunload', () => {&#xD;&#xA;          this.props.closePopupWindow()&#xD;&#xA;        })&#xD;&#xA;        console.log('Created Popup Window')&#xD;&#xA;      }&#xD;&#xA;      componentWillUnmount() {&#xD;&#xA;        console.log('Cleaned up Popup Window')&#xD;&#xA;        this.externalWindow.close()&#xD;&#xA;      }&#xD;&#xA;      render() {&#xD;&#xA;        return ReactDOM.createPortal(&#xD;&#xA;          this.props.children,&#xD;&#xA;          this.containerEl&#xD;&#xA;        )&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    function App() {&#xD;&#xA;      let data = {&#xD;&#xA;        something: 600,&#xD;&#xA;        other: 200&#xD;&#xA;      }&#xD;&#xA;      let [dataState, setDataState] = useState(data)&#xD;&#xA;      useEffect(() => {&#xD;&#xA;        let interval = setInterval(() => {&#xD;&#xA;          setDataState(replaceWithRandom(dataState))&#xD;&#xA;          const event = new CustomEvent('onOverlayDataUpdate', {&#xD;&#xA;            detail: dataState&#xD;&#xA;          })&#xD;&#xA;          document.dispatchEvent(event)&#xD;&#xA;        }, 5000)&#xD;&#xA;        return function clear() {&#xD;&#xA;          clearInterval(interval)&#xD;&#xA;        }&#xD;&#xA;      }, [])&#xD;&#xA;      useEffect(&#xD;&#xA;        function getData() {&#xD;&#xA;          document.addEventListener('onOverlayDataUpdate', e => {&#xD;&#xA;            setDataState(e.detail)&#xD;&#xA;          })&#xD;&#xA;          return function cleanup() {&#xD;&#xA;            document.removeEventListener(&#xD;&#xA;              'onOverlayDataUpdate',&#xD;&#xA;              document&#xD;&#xA;            )&#xD;&#xA;          }&#xD;&#xA;        },&#xD;&#xA;        [dataState]&#xD;&#xA;      )&#xD;&#xA;      console.log(dataState)&#xD;&#xA;      // State handling&#xD;&#xA;      const [isPopupWindowOpen, setIsPopupWindowOpen] = useState(false)&#xD;&#xA;      const [&#xD;&#xA;        isPopupWindowWithHooksOpen,&#xD;&#xA;        setIsPopupWindowWithHooksOpen&#xD;&#xA;      ] = useState(false)&#xD;&#xA;      const togglePopupWindow = () =>&#xD;&#xA;        setIsPopupWindowOpen(!isPopupWindowOpen)&#xD;&#xA;      const togglePopupWindowWithHooks = () =>&#xD;&#xA;        setIsPopupWindowWithHooksOpen(!isPopupWindowWithHooksOpen)&#xD;&#xA;      const closePopupWindow = () => setIsPopupWindowOpen(false)&#xD;&#xA;      const closePopupWindowWithHooks = () =>&#xD;&#xA;        setIsPopupWindowWithHooksOpen(false)&#xD;&#xA;      // Side Effect&#xD;&#xA;      useEffect(() =>&#xD;&#xA;        window.addEventListener('beforeunload', () => {&#xD;&#xA;          closePopupWindow()&#xD;&#xA;          closePopupWindowWithHooks()&#xD;&#xA;        })&#xD;&#xA;      )&#xD;&#xA;      return (&#xD;&#xA;        <div>&#xD;&#xA;          <button type="buton" onClick={togglePopupWindow}>&#xD;&#xA;            Toggle Window&#xD;&#xA;          </button>&#xD;&#xA;          <button type="buton" onClick={togglePopupWindowWithHooks}>&#xD;&#xA;            Toggle Window With Hooks&#xD;&#xA;          </button>&#xD;&#xA;          {isPopupWindowOpen && (&#xD;&#xA;            <PopupWindow closePopupWindow={closePopupWindow}>&#xD;&#xA;              <div>What is going on here?</div>&#xD;&#xA;              <div>I should be here always!</div>&#xD;&#xA;            </PopupWindow>&#xD;&#xA;          )}&#xD;&#xA;          {isPopupWindowWithHooksOpen && (&#xD;&#xA;            <PopupWindowWithHooks&#xD;&#xA;              closePopupWindowWithHooks={closePopupWindowWithHooks}&#xD;&#xA;            >&#xD;&#xA;              <div>What is going on here?</div>&#xD;&#xA;              <div>I should be here always!</div>&#xD;&#xA;            </PopupWindowWithHooks>&#xD;&#xA;          )}&#xD;&#xA;        </div>&#xD;&#xA;      )&#xD;&#xA;    }&#xD;&#xA;    const rootElement = document.getElementById('root')&#xD;&#xA;    ReactDOM.render(<App />, rootElement)