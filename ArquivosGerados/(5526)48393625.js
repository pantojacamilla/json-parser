        var treeData =&#xD;&#xA;        {&#xD;&#xA;          "value": "+",&#xD;&#xA;          "children": [&#xD;&#xA;            {&#xD;&#xA;              "value": "/",&#xD;&#xA;              "children": [&#xD;&#xA;                { "value": "4" },&#xD;&#xA;                { &#xD;&#xA;                  "value": "7",&#xD;&#xA;                }&#xD;&#xA;              ]              &#xD;&#xA;            },&#xD;&#xA;            { &#xD;&#xA;              "value": "/",&#xD;&#xA;              "children": [&#xD;&#xA;                { "value": "2" },&#xD;&#xA;                { &#xD;&#xA;                  "value": "7",&#xD;&#xA;                }&#xD;&#xA;              ]   &#xD;&#xA;            }&#xD;&#xA;          ]&#xD;&#xA;        };&#xD;&#xA;        // set the dimensions and margins of the diagram&#xD;&#xA;        var margin = {top: 40, right: 40, bottom: 40, left: 40},&#xD;&#xA;        width = 600 - margin.left - margin.right,&#xD;&#xA;        height = 600 - margin.top - margin.bottom;&#xD;&#xA;        // declares a tree layout and assigns the size&#xD;&#xA;        var treemap = d3.tree()&#xD;&#xA;        .size([width, height]);&#xD;&#xA;        //  assigns the data to a hierarchy using parent-child relationships&#xD;&#xA;        var nodes = d3.hierarchy(treeData);&#xD;&#xA;        // maps the node data to the tree layout&#xD;&#xA;        nodes = treemap(nodes);&#xD;&#xA;        // append the svg obgect to the body of the page&#xD;&#xA;        // appends a 'group' element to 'svg'&#xD;&#xA;        // moves the 'group' element to the top left margin&#xD;&#xA;        var svg = d3.select(".xTree").append("svg")&#xD;&#xA;        .attr("width", width + margin.left + margin.right)&#xD;&#xA;        .attr("height", height + margin.top + margin.bottom),&#xD;&#xA;        g = svg.append("g")&#xD;&#xA;        .attr("transform",&#xD;&#xA;        "translate(" + margin.left + "," + margin.top + ")");&#xD;&#xA;        // adds the links between the nodes&#xD;&#xA;        var link = g.selectAll(".bbTreeLink")&#xD;&#xA;        .data( nodes.descendants().slice(1))&#xD;&#xA;        .enter().append("path")&#xD;&#xA;        .attr("class", "bbTreeLink")&#xD;&#xA;        .attr("d", function(d) {&#xD;&#xA;          return "M" + d.x + "," + d.y&#xD;&#xA;          + "C" + d.x + "," + (d.y + d.parent.y) / 2&#xD;&#xA;          + " " + d.parent.x + "," +  (d.y + d.parent.y) / 2&#xD;&#xA;          + " " + d.parent.x + "," + d.parent.y;&#xD;&#xA;        });&#xD;&#xA;        // adds each node as a group&#xD;&#xA;        var node = g.selectAll(".bbTreeNode")&#xD;&#xA;        .data(nodes.descendants())&#xD;&#xA;        .enter().append("g")&#xD;&#xA;        .attr("class", function(d) {&#xD;&#xA;          return "bbTreeNode" +&#xD;&#xA;          (d.children ? " bbTreeNode--internal" : " bbTreeNode--leaf"); })&#xD;&#xA;        .attr("transform", function(d) {&#xD;&#xA;          return "translate(" + d.x + "," + d.y + ")"; });&#xD;&#xA;          // adds the circle to the node&#xD;&#xA;          node.append("circle")&#xD;&#xA;          .attr("r", 26);&#xD;&#xA;          // adds the text to the node&#xD;&#xA;          node.append("text")&#xD;&#xA;          .attr("dy", ".35em")&#xD;&#xA;          .attr('class', 'bbTreeText')&#xD;&#xA;          //- .attr("y", function(d) { return d.children ? -20 : 20; })&#xD;&#xA;          .style("text-anchor", "middle")      &#xD;&#xA;          .text(function(d) { return d.data.value; });