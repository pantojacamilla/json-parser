    var mycanvas = document.getElementById('mycanvas');&#xD;&#xA;    var ctx = mycanvas.getContext('2d');&#xD;&#xA;    var snakeSize = 50; &#xD;&#xA;    var w = 565;&#xD;&#xA;    var h = 380;&#xD;&#xA;    var score = 0;&#xD;&#xA;    var snake;&#xD;&#xA;    var snakeSize = 10;&#xD;&#xA;    var food;&#xD;&#xA;    var drawModule = (function () { &#xD;&#xA;    var bodySnake = function(x, y) {&#xD;&#xA;        ctx.fillStyle = 'lightgreen';&#xD;&#xA;        ctx.fillRect(x*snakeSize, y*snakeSize, snakeSize, snakeSize);&#xD;&#xA;        ctx.strokeStyle = 'darkgreen';&#xD;&#xA;        ctx.strokeRect(x*snakeSize, y*snakeSize, snakeSize, snakeSize);&#xD;&#xA;     }&#xD;&#xA;    var pizza = function(x, y) {&#xD;&#xA;        ctx.fillStyle = 'yellow';&#xD;&#xA;        ctx.fillRect(x*snakeSize, y*snakeSize, snakeSize, snakeSize);&#xD;&#xA;        ctx.fillStyle = 'green';&#xD;&#xA;        ctx.fillRect(x*snakeSize+1, y*snakeSize+1, snakeSize-2, snakeSize-2);&#xD;&#xA;      }&#xD;&#xA;    var scoreText = function() {&#xD;&#xA;    var score_text = "Your Score: " + score;&#xD;&#xA;    ctx.fillStyle = 'purple';&#xD;&#xA;    ctx.fillText(score_text, 10, h-5);&#xD;&#xA;      }&#xD;&#xA;     var drawSnake = function() {&#xD;&#xA;      var length = 5;&#xD;&#xA;      snake = [];&#xD;&#xA;      for (var i = length-1; i>=0; i--) {&#xD;&#xA;          snake.push({x:i, y:0});&#xD;&#xA;      }  &#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;      var paint = function(){&#xD;&#xA;      ctx.fillStyle = 'lightblue';&#xD;&#xA;      ctx.fillRect(0, 0, w, h);&#xD;&#xA;      ctx.strokeStyle = 'black';&#xD;&#xA;      ctx.strokeRect(0, 0, w, h);&#xD;&#xA;      btn.setAttribute('disabled', true);&#xD;&#xA;	  btn2.setAttribute('disabled', true);&#xD;&#xA;	  btn3.setAttribute('disabled', true);&#xD;&#xA;	  &#xD;&#xA;      var snakeX = snake[0].x;&#xD;&#xA;      var snakeY = snake[0].y;&#xD;&#xA;      if (direction == 'right') { &#xD;&#xA;        snakeX++; }&#xD;&#xA;      else if (direction == 'left') { &#xD;&#xA;        snakeX--; }&#xD;&#xA;      else if (direction == 'up') { &#xD;&#xA;        snakeY--; &#xD;&#xA;      } else if(direction == 'down') { &#xD;&#xA;        snakeY++; }&#xD;&#xA;        if (snakeX == -1 || snakeX == w/snakeSize || snakeY == -1 || snakeY == h/snakeSize || checkCollision(snakeX, snakeY, snake)) {&#xD;&#xA;          //restart game&#xD;&#xA;          btn.removeAttribute('disabled', true);&#xD;&#xA;		  btn2.removeAttribute('disabled', true);&#xD;&#xA;		  btn3.removeAttribute('disabled', true);&#xD;&#xA;          ctx.clearRect(0,0,w,h);&#xD;&#xA;          gameloop = clearInterval(gameloop);&#xD;&#xA;          return;          &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;           if(snakeX == food.x && snakeY == food.y) {&#xD;&#xA;          var tail = {x: snakeX, y: snakeY}; //Create a new head instead of moving the tail&#xD;&#xA;          score ++;&#xD;&#xA;          &#xD;&#xA;          cFood(); //Create new food&#xD;&#xA;        } else {&#xD;&#xA;          var tail = snake.pop(); //pops out the last cell&#xD;&#xA;          tail.x = snakeX; &#xD;&#xA;          tail.y = snakeY;&#xD;&#xA;        }&#xD;&#xA;        //The snake can now eat the food.&#xD;&#xA;        snake.unshift(tail); //puts back the tail as the first cell&#xD;&#xA;        for(var i = 0; i < snake.length; i++) {&#xD;&#xA;          bodySnake(snake[i].x, snake[i].y);&#xD;&#xA;        } &#xD;&#xA;        &#xD;&#xA;        pizza(food.x, food.y); &#xD;&#xA;        scoreText();&#xD;&#xA;       }&#xD;&#xA;       var cFood = function() {&#xD;&#xA;      food = {&#xD;&#xA;        x: Math.floor((Math.random() * 30) + 1),&#xD;&#xA;        y: Math.floor((Math.random() * 30) + 1)&#xD;&#xA;        }&#xD;&#xA;        for (var i=0; i>snake.length; i++) {&#xD;&#xA;        var snakeX = snake[i].x;&#xD;&#xA;        var snakeY = snake[i].y;&#xD;&#xA;      &#xD;&#xA;          if (food.x===snakeX && food.y === snakeY || food.y === snakeY && food.x===snakeX) {&#xD;&#xA;          food.x = Math.floor((Math.random() * 30) + 1);&#xD;&#xA;          food.y = Math.floor((Math.random() * 30) + 1);&#xD;&#xA;          } &#xD;&#xA;         }&#xD;&#xA;        }&#xD;&#xA;        var checkCollision = function(x, y, array) {&#xD;&#xA;      for(var i = 0; i < array.length; i++) {&#xD;&#xA;        if(array[i].x === x && array[i].y === y)&#xD;&#xA;        return true;&#xD;&#xA;         } &#xD;&#xA;          return false;&#xD;&#xA;        }&#xD;&#xA;         var init = function(){&#xD;&#xA;         direction = 'down';&#xD;&#xA;         drawSnake();&#xD;&#xA;         cFood();&#xD;&#xA;	     score = 0;&#xD;&#xA;         gameloop = setInterval(paint, 100);&#xD;&#xA;        }&#xD;&#xA;       return {&#xD;&#xA;        init : init&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;       }());&#xD;&#xA; &#xD;&#xA;        (function (window, document, drawModule, undefined) {&#xD;&#xA;         var btn = document.getElementById('btn');&#xD;&#xA;         btn.addEventListener("click", function(){ drawModule.init();});&#xD;&#xA;	      document.onkeydown = function(event) {&#xD;&#xA;           keyCode = window.event.keyCode; &#xD;&#xA;           keyCode = event.keyCode;&#xD;&#xA;           switch(keyCode) {&#xD;&#xA;        &#xD;&#xA;           case 37: &#xD;&#xA;            if (direction != 'right') {&#xD;&#xA;            direction = 'left';&#xD;&#xA;			console.log('left'); &#xD;&#xA;             }&#xD;&#xA;          &#xD;&#xA;             break;&#xD;&#xA;             case 39:&#xD;&#xA;          if (direction != 'left') {&#xD;&#xA;          direction = 'right';&#xD;&#xA;          console.log('right');&#xD;&#xA;          }&#xD;&#xA;          break;&#xD;&#xA;        case 38:&#xD;&#xA;          if (direction != 'down') {&#xD;&#xA;          direction = 'up';&#xD;&#xA;          console.log('up');&#xD;&#xA;          }&#xD;&#xA;          break;&#xD;&#xA;        case 40:&#xD;&#xA;          if (direction != 'up') {&#xD;&#xA;          direction = 'down';&#xD;&#xA;          console.log('down');&#xD;&#xA;          }&#xD;&#xA;          break;&#xD;&#xA;		  &#xD;&#xA;          }&#xD;&#xA;      }&#xD;&#xA;    })(window, document, drawModule);