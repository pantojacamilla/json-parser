    submitOfflineForm(data){//inside of Class&#xD;&#xA;          var data = data;&#xD;&#xA;          var length:number = data.length;&#xD;&#xA;          var secondLength = data.length;&#xD;&#xA;          var testLength = data.length;&#xD;&#xA;          var count=0;&#xD;&#xA;        //console.log(formLength);&#xD;&#xA;        /*** Need to create function per form&#xD;&#xA;             submittion to go to right  API call **/&#xD;&#xA;      while(length--){//starts from the end of the queue&#xD;&#xA;          //console.log(length);&#xD;&#xA;          this.doScaledTimeout(testLength,secondLength,data[secondLength],data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    doScaledTimeout(testLength,i,data,allData) {&#xD;&#xA;      const loading = this.loadingCtrl.create({&#xD;&#xA;        content: 'Retrying Form Submission...'&#xD;&#xA;      });&#xD;&#xA;        loading.present();&#xD;&#xA;      var allData = allData;&#xD;&#xA;      var submit = this.stemAPI;&#xD;&#xA;      var token = this.token;&#xD;&#xA;      var offline = this.offlineFormSubmissions;&#xD;&#xA;      var storage = this.storage;&#xD;&#xA;      var submitted:boolean;&#xD;&#xA;      var i = i;&#xD;&#xA;      //set timeout reverses values of iterations for some reason&#xD;&#xA;    //setTimeout(function() {&#xD;&#xA;        //console.log(data["Info"]);&#xD;&#xA;        //console.log(data);&#xD;&#xA;        //console.log(token);&#xD;&#xA;        //console.log(offline);&#xD;&#xA;        //console.log(submitted);&#xD;&#xA;      switch(data["Type"]){&#xD;&#xA;       &#xD;&#xA;         case "Batch": {&#xD;&#xA;            //console.log("Here in Batch");&#xD;&#xA;          submit.submitBatchData(data["Info"],token).subscribe(async(result)=>{&#xD;&#xA;              //console.log(result["Status"]);&#xD;&#xA;                if(result["Status"]==true){&#xD;&#xA;                  console.log(i);&#xD;&#xA;                  console.log('Before: ' + allData);&#xD;&#xA;                  await allData.splice(i,1)//I want to splice current value of Array that has been submitted. The issue is here&#xD;&#xA;                  console.log('After: ' + allData);&#xD;&#xA;                  isEmpty(i,allData,storage,offline,loading);&#xD;&#xA;                }&#xD;&#xA;                else{&#xD;&#xA;                   this.presentToast('Batch Treatment not submitted with location!');&#xD;&#xA;                }&#xD;&#xA;            }, (err)=>{&#xD;&#xA;               this.presentToast('Could not submit Batch Location!');&#xD;&#xA;           });&#xD;&#xA;            break;&#xD;&#xA;         }&#xD;&#xA;       //gets called before API requests finish&#xD;&#xA;     //},(i * 1000) + 1000);&#xD;&#xA;    }&#xD;&#xA;    //handles updated array data and stores globally and to storage &#xD;&#xA;    function isEmpty(i,allData,storage,offline,loading){&#xD;&#xA;        // console.log('Here');&#xD;&#xA;        console.log("Current length of array after splicing: " + allData.length)&#xD;&#xA;         console.log(allData);&#xD;&#xA;        // console.log(offline);&#xD;&#xA;         console.log(allData);&#xD;&#xA;        if(allData.length==0){&#xD;&#xA;          console.log("Data empty");&#xD;&#xA;           storage.remove('offlineSubmission');&#xD;&#xA;           offline = [];&#xD;&#xA;           loading.dismiss();&#xD;&#xA;        }&#xD;&#xA;        else if(allData.length!=0){&#xD;&#xA;          console.log("Data not empty");&#xD;&#xA;           storage.set('offlineSubmission',allData);&#xD;&#xA;           offline = allData;&#xD;&#xA;           loading.dismiss();&#xD;&#xA;        }