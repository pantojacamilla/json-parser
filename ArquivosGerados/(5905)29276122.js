    package com.example.oliver.blebuch;&#xD;&#xA;    import java.text.SimpleDateFormat;&#xD;&#xA;    import java.util.Date;&#xD;&#xA;    import java.util.List;&#xD;&#xA;    import java.util.Locale;&#xD;&#xA;    import java.util.UUID;&#xD;&#xA;    import android.app.Activity;&#xD;&#xA;    import android.bluetooth.BluetoothAdapter;&#xD;&#xA;    import android.bluetooth.BluetoothDevice;&#xD;&#xA;    import android.bluetooth.BluetoothGatt;&#xD;&#xA;    import android.bluetooth.BluetoothGattCallback;&#xD;&#xA;    import android.bluetooth.BluetoothGattCharacteristic;&#xD;&#xA;    import android.bluetooth.BluetoothGattDescriptor;&#xD;&#xA;    import android.bluetooth.BluetoothGattService;&#xD;&#xA;    import android.bluetooth.BluetoothManager;&#xD;&#xA;    import android.bluetooth.BluetoothProfile;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.content.pm.PackageManager;&#xD;&#xA;    import android.os.Handler;&#xD;&#xA;    import android.util.Log;&#xD;&#xA;    public class BleWrapper {&#xD;&#xA;    	/* defines (in milliseconds) how often RSSI should be updated */&#xD;&#xA;        private static final int RSSI_UPDATE_TIME_INTERVAL = 1500; // 1.5 seconds&#xD;&#xA;        /* callback object through which we are returning results to the caller */&#xD;&#xA;        private BleWrapperUiCallbacks mUiCallback = null;&#xD;&#xA;        /* define NULL object for UI callbacks */&#xD;&#xA;        private static final BleWrapperUiCallbacks NULL_CALLBACK = new BleWrapperUiCallbacks.Null(); &#xD;&#xA;        &#xD;&#xA;        /* creates BleWrapper object, set its parent activity and callback object */&#xD;&#xA;        public BleWrapper(Activity parent, BleWrapperUiCallbacks callback) {&#xD;&#xA;        	this.mParent = parent;&#xD;&#xA;        	mUiCallback = callback;&#xD;&#xA;        	if(mUiCallback == null) mUiCallback = NULL_CALLBACK;&#xD;&#xA;        }&#xD;&#xA;        public BluetoothManager           getManager() { return mBluetoothManager; }&#xD;&#xA;        public BluetoothAdapter           getAdapter() { return mBluetoothAdapter; }&#xD;&#xA;        public BluetoothDevice            getDevice()  { return mBluetoothDevice; }&#xD;&#xA;        public BluetoothGatt              getGatt()    { return mBluetoothGatt; }&#xD;&#xA;        public BluetoothGattService       getCachedService() { return mBluetoothSelectedService; }&#xD;&#xA;        public List<BluetoothGattService> getCachedServices() { return mBluetoothGattServices; }&#xD;&#xA;        public boolean                    isConnected() { return mConnected; }&#xD;&#xA;    	/* run test and check if this device has BT and BLE hardware available */&#xD;&#xA;    	public boolean checkBleHardwareAvailable() {&#xD;&#xA;    		// First check general Bluetooth Hardware:&#xD;&#xA;    		// get BluetoothManager...&#xD;&#xA;    		final BluetoothManager manager = (BluetoothManager) mParent.getSystemService(Context.BLUETOOTH_SERVICE);&#xD;&#xA;    		if(manager == null) return false;&#xD;&#xA;    		// .. and then get adapter from manager&#xD;&#xA;    		final BluetoothAdapter adapter = manager.getAdapter();&#xD;&#xA;    		if(adapter == null) return false;&#xD;&#xA;    		&#xD;&#xA;    		// and then check if BT LE is also available&#xD;&#xA;    		boolean hasBle = mParent.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);&#xD;&#xA;    		return hasBle;&#xD;&#xA;    	}    &#xD;&#xA;    	&#xD;&#xA;    	/* before any action check if BT is turned ON and enabled for us &#xD;&#xA;    	 * call this in onResume to be always sure that BT is ON when Your&#xD;&#xA;    	 * application is put into the foreground */&#xD;&#xA;    	public boolean isBtEnabled() {&#xD;&#xA;    		final BluetoothManager manager = (BluetoothManager) mParent.getSystemService(Context.BLUETOOTH_SERVICE);&#xD;&#xA;    		if(manager == null) return false;&#xD;&#xA;    		&#xD;&#xA;    		final BluetoothAdapter adapter = manager.getAdapter();&#xD;&#xA;    		if(adapter == null) return false;&#xD;&#xA;    		&#xD;&#xA;    		return adapter.isEnabled();&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/* start scanning for BT LE devices around */&#xD;&#xA;    	public void startScanning() {&#xD;&#xA;            mBluetoothAdapter.startLeScan(mDeviceFoundCallback);&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/* stops current scanning */&#xD;&#xA;    	public void stopScanning() {&#xD;&#xA;    		mBluetoothAdapter.stopLeScan(mDeviceFoundCallback);	&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;        /* initialize BLE and get BT Manager & Adapter */&#xD;&#xA;        public boolean initialize() {&#xD;&#xA;            if (mBluetoothManager == null) {&#xD;&#xA;                mBluetoothManager = (BluetoothManager) mParent.getSystemService(Context.BLUETOOTH_SERVICE);&#xD;&#xA;                if (mBluetoothManager == null) {&#xD;&#xA;                    return false;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if(mBluetoothAdapter == null) mBluetoothAdapter = mBluetoothManager.getAdapter();&#xD;&#xA;            if (mBluetoothAdapter == null) {&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;            return true;    	&#xD;&#xA;        }&#xD;&#xA;        /* connect to the device with specified address */&#xD;&#xA;        public boolean connect(final String deviceAddress) {&#xD;&#xA;            if (mBluetoothAdapter == null || deviceAddress == null) return false;&#xD;&#xA;            mDeviceAddress = deviceAddress;&#xD;&#xA;            &#xD;&#xA;            // check if we need to connect from scratch or just reconnect to previous device&#xD;&#xA;            if(mBluetoothGatt != null && mBluetoothGatt.getDevice().getAddress().equals(deviceAddress)) {&#xD;&#xA;            	// just reconnect&#xD;&#xA;            	return mBluetoothGatt.connect();&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;            	// connect from scratch&#xD;&#xA;                // get BluetoothDevice object for specified address&#xD;&#xA;                mBluetoothDevice = mBluetoothAdapter.getRemoteDevice(mDeviceAddress);&#xD;&#xA;                if (mBluetoothDevice == null) {&#xD;&#xA;                    // we got wrong address - that device is not available!&#xD;&#xA;                    return false;&#xD;&#xA;                }&#xD;&#xA;                // connect with remote device&#xD;&#xA;            	mBluetoothGatt = mBluetoothDevice.connectGatt(mParent, false, mBleCallback);&#xD;&#xA;            }&#xD;&#xA;            return true;&#xD;&#xA;        }  &#xD;&#xA;        &#xD;&#xA;        /* disconnect the device. It is still possible to reconnect to it later with this Gatt client */&#xD;&#xA;        public void disconnect() {&#xD;&#xA;        	if(mBluetoothGatt != null) mBluetoothGatt.disconnect();&#xD;&#xA;        	 mUiCallback.uiDeviceDisconnected(mBluetoothGatt, mBluetoothDevice);&#xD;&#xA;        }&#xD;&#xA;        /* close GATT client completely */&#xD;&#xA;        public void close() {&#xD;&#xA;        	if(mBluetoothGatt != null) mBluetoothGatt.close();&#xD;&#xA;        	mBluetoothGatt = null;&#xD;&#xA;        }    &#xD;&#xA;        /* request new RSSi value for the connection*/&#xD;&#xA;        public void readPeriodicalyRssiValue(final boolean repeat) {&#xD;&#xA;        	mTimerEnabled = repeat;&#xD;&#xA;        	// check if we should stop checking RSSI value&#xD;&#xA;        	if(mConnected == false || mBluetoothGatt == null || mTimerEnabled == false) {&#xD;&#xA;        		mTimerEnabled = false;&#xD;&#xA;        		return;&#xD;&#xA;        	}&#xD;&#xA;        	&#xD;&#xA;        	mTimerHandler.postDelayed(new Runnable() {&#xD;&#xA;    			@Override&#xD;&#xA;    			public void run() {&#xD;&#xA;    				if(mBluetoothGatt == null ||&#xD;&#xA;    				   mBluetoothAdapter == null ||&#xD;&#xA;    				   mConnected == false)&#xD;&#xA;    				{&#xD;&#xA;    					mTimerEnabled = false;&#xD;&#xA;    					return;&#xD;&#xA;    				}&#xD;&#xA;    				&#xD;&#xA;    				// request RSSI value&#xD;&#xA;    				mBluetoothGatt.readRemoteRssi();&#xD;&#xA;    				// add call it once more in the future&#xD;&#xA;    				readPeriodicalyRssiValue(mTimerEnabled);&#xD;&#xA;    			}&#xD;&#xA;        	}, RSSI_UPDATE_TIME_INTERVAL);&#xD;&#xA;        }    &#xD;&#xA;        &#xD;&#xA;        /* starts monitoring RSSI value */&#xD;&#xA;        public void startMonitoringRssiValue() {&#xD;&#xA;        	readPeriodicalyRssiValue(true);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* stops monitoring of RSSI value */&#xD;&#xA;        public void stopMonitoringRssiValue() {&#xD;&#xA;        	readPeriodicalyRssiValue(false);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* request to discover all services available on the remote devices&#xD;&#xA;         * results are delivered through callback object */&#xD;&#xA;        public void startServicesDiscovery() {&#xD;&#xA;        	if(mBluetoothGatt != null) mBluetoothGatt.discoverServices();&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* gets services and calls UI callback to handle them&#xD;&#xA;         * before calling getServices() make sure service discovery is finished! */&#xD;&#xA;        public void getSupportedServices() {&#xD;&#xA;        	if(mBluetoothGattServices != null && mBluetoothGattServices.size() > 0) mBluetoothGattServices.clear();&#xD;&#xA;        	// keep reference to all services in local array:&#xD;&#xA;            if(mBluetoothGatt != null) mBluetoothGattServices = mBluetoothGatt.getServices();&#xD;&#xA;            &#xD;&#xA;            mUiCallback.uiAvailableServices(mBluetoothGatt, mBluetoothDevice, mBluetoothGattServices);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* get all characteristic for particular service and pass them to the UI callback */&#xD;&#xA;        public void getCharacteristicsForService(final BluetoothGattService service) {&#xD;&#xA;        	if(service == null) return;&#xD;&#xA;        	List<BluetoothGattCharacteristic> chars = null;&#xD;&#xA;        	&#xD;&#xA;        	chars = service.getCharacteristics();   	&#xD;&#xA;        	mUiCallback.uiCharacteristicForService(mBluetoothGatt, mBluetoothDevice, service, chars);&#xD;&#xA;        	// keep reference to the last selected service&#xD;&#xA;        	mBluetoothSelectedService = service;&#xD;&#xA;        }&#xD;&#xA;        /* request to fetch newest value stored on the remote device for particular characteristic */&#xD;&#xA;        public void requestCharacteristicValue(BluetoothGattCharacteristic ch) {&#xD;&#xA;            if (mBluetoothAdapter == null || mBluetoothGatt == null) return;&#xD;&#xA;            &#xD;&#xA;            mBluetoothGatt.readCharacteristic(ch);&#xD;&#xA;            // new value available will be notified in Callback Object&#xD;&#xA;        }&#xD;&#xA;        /* get characteristic's value (and parse it for some types of characteristics) &#xD;&#xA;         * before calling this You should always update the value by calling requestCharacteristicValue() */&#xD;&#xA;        public void getCharacteristicValue(BluetoothGattCharacteristic ch) {&#xD;&#xA;            if (mBluetoothAdapter == null || mBluetoothGatt == null || ch == null) return;&#xD;&#xA;            &#xD;&#xA;            byte[] rawValue = ch.getValue();&#xD;&#xA;            String strValue = null;&#xD;&#xA;            int intValue = 0;&#xD;&#xA;            &#xD;&#xA;            // lets read and do real parsing of some characteristic to get meaningful value from it &#xD;&#xA;            UUID uuid = ch.getUuid();&#xD;&#xA;            &#xD;&#xA;            if(uuid.equals(BleDefinedUUIDs.Characteristic.HEART_RATE_MEASUREMENT)) { // heart rate&#xD;&#xA;            	// follow https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml&#xD;&#xA;            	// first check format used by the device - it is specified in bit 0 and tells us if we should ask for index 1 (and uint8) or index 2 (and uint16)&#xD;&#xA;            	int index = ((rawValue[0] & 0x01) == 1) ? 2 : 1;&#xD;&#xA;            	// also we need to define format&#xD;&#xA;            	int format = (index == 1) ? BluetoothGattCharacteristic.FORMAT_UINT8 : BluetoothGattCharacteristic.FORMAT_UINT16;&#xD;&#xA;            	// now we have everything, get the value&#xD;&#xA;            	intValue = ch.getIntValue(format, index);&#xD;&#xA;            	strValue = intValue + " bpm"; // it is always in bpm units&#xD;&#xA;            }&#xD;&#xA;            else if (uuid.equals(BleDefinedUUIDs.Characteristic.HEART_RATE_MEASUREMENT) || // manufacturer name string&#xD;&#xA;            		 uuid.equals(BleDefinedUUIDs.Characteristic.MODEL_NUMBER_STRING) || // model number string)&#xD;&#xA;            		 uuid.equals(BleDefinedUUIDs.Characteristic.FIRMWARE_REVISION_STRING)) // firmware revision string&#xD;&#xA;            {&#xD;&#xA;            	// follow https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.manufacturer_name_string.xml etc.&#xD;&#xA;            	// string value are usually simple utf8s string at index 0&#xD;&#xA;            	strValue = ch.getStringValue(0);&#xD;&#xA;            }&#xD;&#xA;            else if(uuid.equals(BleDefinedUUIDs.Characteristic.APPEARANCE)) { // appearance&#xD;&#xA;            	// follow: https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.appearance.xml&#xD;&#xA;            	intValue  = ((int)rawValue[1]) << 8;&#xD;&#xA;            	intValue += rawValue[0];&#xD;&#xA;            	strValue = BleNamesResolver.resolveAppearance(intValue);&#xD;&#xA;            }&#xD;&#xA;            else if(uuid.equals(BleDefinedUUIDs.Characteristic.BODY_SENSOR_LOCATION)) { // body sensor location&#xD;&#xA;            	// follow: https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.body_sensor_location.xml&#xD;&#xA;            	intValue = rawValue[0];&#xD;&#xA;            	strValue = BleNamesResolver.resolveHeartRateSensorLocation(intValue);&#xD;&#xA;            }&#xD;&#xA;            else if(uuid.equals(BleDefinedUUIDs.Characteristic.BATTERY_LEVEL)) { // battery level&#xD;&#xA;            	// follow: https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.battery_level.xml&#xD;&#xA;            	intValue = rawValue[0];&#xD;&#xA;            	strValue = "" + intValue + "% battery level";&#xD;&#xA;            }        &#xD;&#xA;            else {&#xD;&#xA;            	// not known type of characteristic, so we need to handle this in "general" way&#xD;&#xA;            	// get first four bytes and transform it to integer&#xD;&#xA;            	intValue = 0;&#xD;&#xA;            	if(rawValue.length > 0) intValue = (int)rawValue[0];&#xD;&#xA;            	if(rawValue.length > 1) intValue = intValue + ((int)rawValue[1] << 8); &#xD;&#xA;            	if(rawValue.length > 2) intValue = intValue + ((int)rawValue[2] << 8); &#xD;&#xA;            	if(rawValue.length > 3) intValue = intValue + ((int)rawValue[3] << 8); &#xD;&#xA;            	&#xD;&#xA;                if (rawValue.length > 0) {&#xD;&#xA;                    final StringBuilder stringBuilder = new StringBuilder(rawValue.length);&#xD;&#xA;                    for(byte byteChar : rawValue) {&#xD;&#xA;                        stringBuilder.append(String.format("%c", byteChar));&#xD;&#xA;                    }&#xD;&#xA;                    strValue = stringBuilder.toString();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            String timestamp = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss.SSS").format(new Date());&#xD;&#xA;            mUiCallback.uiNewValueForCharacteristic(mBluetoothGatt,&#xD;&#xA;                                                    mBluetoothDevice,&#xD;&#xA;                                                    mBluetoothSelectedService,&#xD;&#xA;            		                                ch,&#xD;&#xA;            		                                strValue,&#xD;&#xA;            		                                intValue,&#xD;&#xA;            		                                rawValue,&#xD;&#xA;            		                                timestamp);&#xD;&#xA;        }    &#xD;&#xA;        &#xD;&#xA;        /* reads and return what what FORMAT is indicated by characteristic's properties&#xD;&#xA;         * seems that value makes no sense in most cases */&#xD;&#xA;        public int getValueFormat(BluetoothGattCharacteristic ch) {&#xD;&#xA;        	int properties = ch.getProperties();&#xD;&#xA;        	&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_FLOAT & properties) != 0) return BluetoothGattCharacteristic.FORMAT_FLOAT;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_SFLOAT & properties) != 0) return BluetoothGattCharacteristic.FORMAT_SFLOAT;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_SINT16 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_SINT16;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_SINT32 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_SINT32;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_SINT8 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_SINT8;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_UINT16 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_UINT16;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_UINT32 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_UINT32;&#xD;&#xA;        	if((BluetoothGattCharacteristic.FORMAT_UINT8 & properties) != 0) return BluetoothGattCharacteristic.FORMAT_UINT8;&#xD;&#xA;        	&#xD;&#xA;        	return 0;&#xD;&#xA;        }&#xD;&#xA;        /* set new value for particular characteristic */&#xD;&#xA;        public void writeDataToCharacteristic(final BluetoothGattCharacteristic ch, final byte[] dataToWrite) {&#xD;&#xA;        	if (mBluetoothAdapter == null || mBluetoothGatt == null || ch == null) return;&#xD;&#xA;        	&#xD;&#xA;        	// first set it locally....&#xD;&#xA;        	ch.setValue(dataToWrite);&#xD;&#xA;        	// ... and then "commit" changes to the peripheral&#xD;&#xA;        	mBluetoothGatt.writeCharacteristic(ch);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* enables/disables notification for characteristic */&#xD;&#xA;        public void setNotificationForCharacteristic(BluetoothGattCharacteristic ch, boolean enabled) {&#xD;&#xA;            if (mBluetoothAdapter == null || mBluetoothGatt == null) return;&#xD;&#xA;            &#xD;&#xA;            boolean success = mBluetoothGatt.setCharacteristicNotification(ch, enabled);&#xD;&#xA;            if(!success) {&#xD;&#xA;            	Log.e("------", "Seting proper notification status for characteristic failed!");&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            // This is also sometimes required (e.g. for heart rate monitors) to enable notifications/indications&#xD;&#xA;            // see: https://developer.bluetooth.org/gatt/descriptors/Pages/DescriptorViewer.aspx?u=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml&#xD;&#xA;            BluetoothGattDescriptor descriptor = ch.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"));&#xD;&#xA;            if(descriptor != null) {&#xD;&#xA;            	byte[] val = enabled ? BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE : BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE;&#xD;&#xA;    	        descriptor.setValue(val);&#xD;&#xA;    	        mBluetoothGatt.writeDescriptor(descriptor);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /* defines callback for scanning results */&#xD;&#xA;        private BluetoothAdapter.LeScanCallback mDeviceFoundCallback = new BluetoothAdapter.LeScanCallback() {&#xD;&#xA;            @Override&#xD;&#xA;            public void onLeScan(final BluetoothDevice device, final int rssi, final byte[] scanRecord) {&#xD;&#xA;            	mUiCallback.uiDeviceFound(device, rssi, scanRecord);&#xD;&#xA;            }&#xD;&#xA;        };	    &#xD;&#xA;        &#xD;&#xA;        /* callbacks called for any action on particular Ble Device */&#xD;&#xA;        private final BluetoothGattCallback mBleCallback = new BluetoothGattCallback() {&#xD;&#xA;            @Override&#xD;&#xA;            public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {&#xD;&#xA;                if (newState == BluetoothProfile.STATE_CONNECTED) {&#xD;&#xA;                	mConnected = true;&#xD;&#xA;                	mUiCallback.uiDeviceConnected(mBluetoothGatt, mBluetoothDevice);&#xD;&#xA;                	&#xD;&#xA;                	// now we can start talking with the device, e.g.&#xD;&#xA;                	mBluetoothGatt.readRemoteRssi();&#xD;&#xA;                	// response will be delivered to callback object!&#xD;&#xA;                	&#xD;&#xA;                	// in our case we would also like automatically to call for services discovery&#xD;&#xA;                	startServicesDiscovery();&#xD;&#xA;                	&#xD;&#xA;                	// and we also want to get RSSI value to be updated periodically&#xD;&#xA;                	startMonitoringRssiValue();&#xD;&#xA;                }&#xD;&#xA;                else if (newState == BluetoothProfile.STATE_DISCONNECTED) {&#xD;&#xA;                	mConnected = false;&#xD;&#xA;                	mUiCallback.uiDeviceDisconnected(mBluetoothGatt, mBluetoothDevice);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            @Override&#xD;&#xA;            public void onServicesDiscovered(BluetoothGatt gatt, int status) {&#xD;&#xA;                if (status == BluetoothGatt.GATT_SUCCESS) {&#xD;&#xA;                	// now, when services discovery is finished, we can call getServices() for Gatt&#xD;&#xA;                	getSupportedServices();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            @Override&#xD;&#xA;            public void onCharacteristicRead(BluetoothGatt gatt,&#xD;&#xA;                                             BluetoothGattCharacteristic characteristic,&#xD;&#xA;                                             int status)&#xD;&#xA;            {&#xD;&#xA;            	// we got response regarding our request to fetch characteristic value&#xD;&#xA;                if (status == BluetoothGatt.GATT_SUCCESS) {&#xD;&#xA;                	// and it success, so we can get the value&#xD;&#xA;                	getCharacteristicValue(characteristic);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            @Override&#xD;&#xA;            public void onCharacteristicChanged(BluetoothGatt gatt,&#xD;&#xA;                                                BluetoothGattCharacteristic characteristic)&#xD;&#xA;            {&#xD;&#xA;            	// characteristic's value was updated due to enabled notification, lets get this value&#xD;&#xA;            	// the value itself will be reported to the UI inside getCharacteristicValue&#xD;&#xA;            	getCharacteristicValue(characteristic);&#xD;&#xA;            	// also, notify UI that notification are enabled for particular characteristic&#xD;&#xA;            	mUiCallback.uiGotNotification(mBluetoothGatt, mBluetoothDevice, mBluetoothSelectedService, characteristic);&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            @Override&#xD;&#xA;            public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {&#xD;&#xA;            	String deviceName = gatt.getDevice().getName();&#xD;&#xA;            	String serviceName = BleNamesResolver.resolveServiceName(characteristic.getService().getUuid().toString().toLowerCase(Locale.getDefault()));&#xD;&#xA;            	String charName = BleNamesResolver.resolveCharacteristicName(characteristic.getUuid().toString().toLowerCase(Locale.getDefault()));&#xD;&#xA;            	String description = "Device: " + deviceName + " Service: " + serviceName + " Characteristic: " + charName;&#xD;&#xA;            	&#xD;&#xA;            	// we got response regarding our request to write new value to the characteristic&#xD;&#xA;            	// let see if it failed or not&#xD;&#xA;            	if(status == BluetoothGatt.GATT_SUCCESS) {&#xD;&#xA;            		 mUiCallback.uiSuccessfulWrite(mBluetoothGatt, mBluetoothDevice, mBluetoothSelectedService, characteristic, description);&#xD;&#xA;            	}&#xD;&#xA;            	else {&#xD;&#xA;            		 mUiCallback.uiFailedWrite(mBluetoothGatt, mBluetoothDevice, mBluetoothSelectedService, characteristic, description + " STATUS = " + status);&#xD;&#xA;            	}&#xD;&#xA;            };&#xD;&#xA;            &#xD;&#xA;            @Override&#xD;&#xA;            public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {&#xD;&#xA;            	if(status == BluetoothGatt.GATT_SUCCESS) {&#xD;&#xA;            		// we got new value of RSSI of the connection, pass it to the UI&#xD;&#xA;            		 mUiCallback.uiNewRssiAvailable(mBluetoothGatt, mBluetoothDevice, rssi);&#xD;&#xA;            	}&#xD;&#xA;            };&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;    	private Activity mParent = null;    &#xD;&#xA;    	private boolean mConnected = false;&#xD;&#xA;    	private String mDeviceAddress = "";&#xD;&#xA;        private BluetoothManager mBluetoothManager = null;&#xD;&#xA;        private BluetoothAdapter mBluetoothAdapter = null;&#xD;&#xA;        private BluetoothDevice  mBluetoothDevice = null;&#xD;&#xA;        private BluetoothGatt    mBluetoothGatt = null;&#xD;&#xA;        private BluetoothGattService mBluetoothSelectedService = null;&#xD;&#xA;        private List<BluetoothGattService> mBluetoothGattServices = null;	&#xD;&#xA;        &#xD;&#xA;        private Handler mTimerHandler = new Handler();&#xD;&#xA;        private boolean mTimerEnabled = false;&#xD;&#xA;    }