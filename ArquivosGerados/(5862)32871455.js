    console.clear();&#xD;&#xA;    var hierarchyNode = function (parent) {&#xD;&#xA;        var self = this;&#xD;&#xA;        this.name = "Node Name";&#xD;&#xA;        this.hasChildren = ko.observable(true);&#xD;&#xA;        this.childNodes = ko.observableArray();&#xD;&#xA;        this.expanded = ko.observable(false);&#xD;&#xA;    };&#xD;&#xA;    hierarchyNode.prototype = {&#xD;&#xA;        name: null,&#xD;&#xA;        hasChildren: null,&#xD;&#xA;        childNodes: null,&#xD;&#xA;        getChildNodes: function (element, event) {&#xD;&#xA;            if (element.hasChildren() === true && element.childNodes().length === 0) {&#xD;&#xA;                element.childNodes.push(new hierarchyNode(element));&#xD;&#xA;            }&#xD;&#xA;            element.expanded(!element.expanded());&#xD;&#xA;        }    &#xD;&#xA;    };&#xD;&#xA;    var hierarchyVM = function () {&#xD;&#xA;        var self = this;&#xD;&#xA;        self.hierarchyNodes = ko.observableArray();&#xD;&#xA;        self.selectItem = function () {};&#xD;&#xA;    };&#xD;&#xA;    var vm = new hierarchyVM();&#xD;&#xA;    vm.hierarchyNodes.push(new hierarchyNode(null));&#xD;&#xA;    console.log(vm.hierarchyNodes()[0]);&#xD;&#xA;    ko.applyBindings(vm);