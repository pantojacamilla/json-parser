var str = "x^3-999x^2+x-0";&#xD;&#xA;function getCoeff(string) {&#xD;&#xA;    if ( string.charAt(0) === 'x' ) { // If the first term is x, because of my regex it needs a space to match it&#xD;&#xA;        string = ' ' + string;&#xD;&#xA;    }&#xD;&#xA;    for ( var i = 0; i < 10; i++ ) { // ==> Loop true the regexs to replace all ‘x^n’ to ‘1x^n’&#xD;&#xA;        var re = new RegExp('[^0-9|\-]x\\^' + i);&#xD;&#xA;        var re2 = new RegExp('[^0-9|]x\\^' + i);&#xD;&#xA;        string = (string.replace(re,"+1x^" + i)).replace(re2," -1x^" + i); } &#xD;&#xA;    var final = string.replace(/-/g,'+-'); // ==> Spilt(‘x’) later so to retain the -ve sign&#xD;&#xA;    final = (final.replace(/[^0-9|-]x(?!\^)/g,"+1x")).replace(/[^0-9|+]x(?!\^)/g,"-1x");  // ==> Replace ‘-/x’ with ‘-/1x’&#xD;&#xA;    final = final.replace(/[^\^](\d+(?!\d|x))/g,'+$1x^0'); // ==> Replace ‘c’ with ‘cx^0’&#xD;&#xA;    final = final.replace(/x(?!\^)/g, "x^1"); // ==> Replace ‘x’ with ‘x^1’&#xD;&#xA;    final = final.split('+'); // ==> Right now array looks something like this [ ax^(n), bx^(n-1), … yx^1,  zx^0]&#xD;&#xA;    final = final.filter(function(entry) { return entry.trim() !== ''; }); // Sorts array by the number behind in descending order&#xD;&#xA;    var reS = /^-?\d+/,&#xD;&#xA;        reE = /\d+$/;&#xD;&#xA;    var result = final.sort(function(a, b) {&#xD;&#xA;        a = reE.exec(a);&#xD;&#xA;        b = reE.exec(b);&#xD;&#xA;        return b - a;&#xD;&#xA;    }).reduce(function(res, str, i) {&#xD;&#xA;        var gap = reE.exec(final[i - 1]) - reE.exec(str);&#xD;&#xA;        if(gap > 0)&#xD;&#xA;            while(--gap) res.push(0);&#xD;&#xA;        res.push(+reS.exec(str));&#xD;&#xA;        return res;&#xD;&#xA;    }, []); // Return the coefficients&#xD;&#xA;    console.log("Result:", result); &#xD;&#xA;}&#xD;&#xA;getCoeff(str);&#xD;&#xA; 