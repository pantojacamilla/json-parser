    function Promise() {&#xD;&#xA;      this.stack = [];&#xD;&#xA;      this.then = function(fn) {&#xD;&#xA;        this.stack.push(fn);&#xD;&#xA;        return this;&#xD;&#xA;      }&#xD;&#xA;      this.resolve = function(data) {&#xD;&#xA;        var cb = this.stack[0];&#xD;&#xA;        this.stack.shift();&#xD;&#xA;        cb.call(this, data);&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;    //==== implementation  below ====//&#xD;&#xA;    var bar = function() {&#xD;&#xA;      var promise = new Promise();&#xD;&#xA;      setTimeout(function() {&#xD;&#xA;        console.log("1");&#xD;&#xA;        promise.resolve();&#xD;&#xA;      }, 2000);&#xD;&#xA;      return promise;&#xD;&#xA;    }&#xD;&#xA;    bar().then(function() {&#xD;&#xA;      var p = this;&#xD;&#xA;      setTimeout(function() {&#xD;&#xA;        console.log("2");&#xD;&#xA;        p.resolve();&#xD;&#xA;      }, 1000);&#xD;&#xA;    }).then(function() {&#xD;&#xA;      var p = this;&#xD;&#xA;      setTimeout(function() {&#xD;&#xA;        console.log("3");&#xD;&#xA;        p.resolve();&#xD;&#xA;      }, 500);&#xD;&#xA;    }).then(function() {&#xD;&#xA;      console.log("4")&#xD;&#xA;    });