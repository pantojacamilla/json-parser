    import datetime&#xD;&#xA;    import MPU6050&#xD;&#xA;    import math&#xD;&#xA;    import time&#xD;&#xA;    import numpy&#xD;&#xA;    import RPi.GPIO as GPIO&#xD;&#xA;    import time&#xD;&#xA;    import sys&#xD;&#xA;    GPIO.setmode(GPIO.BCM)&#xD;&#xA;    TargetSampleTime= 20 #int(sys.argv[1])&#xD;&#xA;    TargetRate= 500 #float(sys.argv[2])&#xD;&#xA;    GPIO.setup(24,GPIO.IN,pull_up_down=GPIO.PUD_DOWN)&#xD;&#xA;    mpu6050 = MPU6050.MPU6050()&#xD;&#xA;    mpu6050.setup()&#xD;&#xA;    mpu6050.setGResolution(2)&#xD;&#xA;    mpu6050.setSampleRate(TargetRate)&#xD;&#xA;    mpu6050.enableFifo(False)&#xD;&#xA;    time.sleep(0.01)&#xD;&#xA;    print "Capturing in {0} ms at {1} samples/sec".format(TargetSampleTime, mpu6050.SampleRate)&#xD;&#xA;    mpu6050.resetFifo()&#xD;&#xA;    mpu6050.enableFifo(True)&#xD;&#xA;    time.sleep(0.01)&#xD;&#xA;    Values = []&#xD;&#xA;    Total = 0&#xD;&#xA;    def my_callback(channel):&#xD;&#xA;          print "Rising edge detected on 24"&#xD;&#xA;          GPIO.remove_event_detect(24)&#xD;&#xA;          GPIO.cleanup()&#xD;&#xA;          a = datetime.datetime.now()&#xD;&#xA;          # read MPU6050 from FIFO&#xD;&#xA;          while True:&#xD;&#xA;           Values.extend(mpu6050.readDataFromFifo())&#xD;&#xA;           b = datetime.datetime.now()&#xD;&#xA;           dt = int((b-a).microseconds/1000)&#xD;&#xA;           if dt >= TargetSampleTime:&#xD;&#xA;               break;&#xD;&#xA;          b = datetime.datetime.now()&#xD;&#xA;          Total = len(Values)/14&#xD;&#xA;          print "Capture in {0} ms".format((b-a).microseconds/1000)&#xD;&#xA;          print "Captured {0} samples".format(Total)&#xD;&#xA;          if Total > 0:&#xD;&#xA;           Status = mpu6050.readStatus()&#xD;&#xA;           if (Status & 0x10) == 0x10 :&#xD;&#xA;            print "Overrun Error! Quitting.\n"&#xD;&#xA;            quit()&#xD;&#xA;           # writing IMU data to txt&#xD;&#xA;           print "Saving RawData.txt  file."  &#xD;&#xA;           FO = open("RawData.txt","w")&#xD;&#xA;           FO.write("GT\tGx\tGy\tGz\tTemperature\tGyrox\tGyroy\tGyroz\n")&#xD;&#xA;           fftdata = []&#xD;&#xA;           for loop in range (Total):&#xD;&#xA;            SimpleSample = Values[loop*14 : loop*14+14]&#xD;&#xA;            I = mpu6050.convertData(SimpleSample)&#xD;&#xA;            CurrentForce = math.sqrt( (I.Gx * I.Gx) + (I.Gy * I.Gy) +(I.Gz * I.Gz))&#xD;&#xA;            fftdata.append(CurrentForce)&#xD;&#xA;            FO.write("{0:6.3f}\t{1:6.3f}\t{2:6.3f}\t{3:6.3f}\t".format(CurrentForce, I.Gx , I.Gy, I.Gz))&#xD;&#xA;            FO.write("{0:5.1f}\t{1:6.3f}\t{2:6.3f}\t{3:6.3f}\n".format(I.Temperature,I.Gyrox,I.Gyroy,I.Gyroz))&#xD;&#xA;           FO.close()&#xD;&#xA;          quit()&#xD;&#xA;    # detect shutter button press&#xD;&#xA;    GPIO.add_event_detect(24, GPIO.RISING, callback=my_callback, bouncetime=100)&#xD;&#xA;    raw_input("Listening...")