    var fabric;&#xD;&#xA;    (function (fabric) {&#xD;&#xA;    })(fabric || (fabric = {}));&#xD;&#xA;    fabric.Background = fabric.util.createClass(fabric.Rect, {&#xD;&#xA;        type: "background",&#xD;&#xA;        initialize: function (options) {&#xD;&#xA;            options = options || {};&#xD;&#xA;            this.callSuper("initialize", options);&#xD;&#xA;        },&#xD;&#xA;        _render: function (ctx) {&#xD;&#xA;            this.callSuper("_render", ctx);&#xD;&#xA;        }&#xD;&#xA;    });&#xD;&#xA;    var Ys = (function () {&#xD;&#xA;        function Ys() {&#xD;&#xA;            var _this = this;&#xD;&#xA;            this.app = new fabric.Canvas(document.getElementById("c"));&#xD;&#xA;            this.renderHexagram = function () {&#xD;&#xA;            };&#xD;&#xA;            this.resize = function () {&#xD;&#xA;                var w = (window.innerWidth > 0) ? window.innerWidth : screen.width;&#xD;&#xA;                var h = (window.innerHeight > 0) ? window.innerHeight : screen.height;&#xD;&#xA;                var width = w;&#xD;&#xA;                var height = h;&#xD;&#xA;                _this.app.setDimensions({&#xD;&#xA;                    width: width,&#xD;&#xA;                    height: height&#xD;&#xA;                });&#xD;&#xA;            };&#xD;&#xA;            this.drawBackground = function () {&#xD;&#xA;                var backgroundOptions = {};&#xD;&#xA;                backgroundOptions.width = _this.app.getWidth();&#xD;&#xA;                backgroundOptions.height = _this.app.getHeight();&#xD;&#xA;                backgroundOptions.selectable = false;&#xD;&#xA;                var background = new fabric.Background(backgroundOptions);&#xD;&#xA;                var gradientOptions = _this.createVerticalGradientOptions("linear", _this.app.getHeight(), { 0: "#333333", 1: "#222222" });&#xD;&#xA;                background.setGradient("fill", gradientOptions);&#xD;&#xA;                _this.background = background;&#xD;&#xA;                _this.app.add(background);&#xD;&#xA;            };&#xD;&#xA;            this.drawToss = function () {&#xD;&#xA;                [1, 1, 1].forEach(function (item, idx) {&#xD;&#xA;                    setTimeout(function () {&#xD;&#xA;                        _this.toss(idx);&#xD;&#xA;                    }, _this.getRandom(1, 10) * 100);&#xD;&#xA;                });&#xD;&#xA;            };&#xD;&#xA;            this.toss = function (idx) {&#xD;&#xA;                var canvas = _this.app;&#xD;&#xA;                var circle = new fabric.Circle({&#xD;&#xA;                    left: 0,&#xD;&#xA;                    top: 0,&#xD;&#xA;                    radius: (_this.app.getWidth() / 5) / 2,&#xD;&#xA;                    fill: "#FFE600",&#xD;&#xA;                    stroke: "#CACA3B",&#xD;&#xA;                    strokeWidth: 1,&#xD;&#xA;                    angle: 0,&#xD;&#xA;                    padding: 0,&#xD;&#xA;                    originX: "center",&#xD;&#xA;                    originY: "center"&#xD;&#xA;                });&#xD;&#xA;                var innerCircle = new fabric.Circle({&#xD;&#xA;                    left: 0,&#xD;&#xA;                    top: 0,&#xD;&#xA;                    radius: (_this.app.getWidth() / 6) / 2,&#xD;&#xA;                    fill: "#FFFF00",&#xD;&#xA;                    stroke: "#CACA3B",&#xD;&#xA;                    strokeWidth: 1.5,&#xD;&#xA;                    angle: 0,&#xD;&#xA;                    padding: 0,&#xD;&#xA;                    originX: "center",&#xD;&#xA;                    originY: "center"&#xD;&#xA;                });&#xD;&#xA;                var text = new fabric.Text("", {&#xD;&#xA;                    left: 0,&#xD;&#xA;                    top: 0,&#xD;&#xA;                    angle: 90,&#xD;&#xA;                    originX: "center",&#xD;&#xA;                    originY: "center",&#xD;&#xA;                    fill: "#fffdb5",&#xD;&#xA;                    stroke: "#CACA3B",&#xD;&#xA;                    fontSize: ((_this.app.getWidth() / 5)),&#xD;&#xA;                    fontWeight: 700,&#xD;&#xA;                    strokeWidth: 1&#xD;&#xA;                });&#xD;&#xA;                var group = new fabric.Group([circle, innerCircle, text], ({&#xD;&#xA;                    left: (_this.app.getWidth() / 6) + ((_this.app.getWidth() / 3) * idx),&#xD;&#xA;                    top: -((_this.app.getWidth() / 5) / 2),&#xD;&#xA;                    originX: "center",&#xD;&#xA;                    originY: "center",&#xD;&#xA;                    selectable: true,&#xD;&#xA;                    hasControl: true&#xD;&#xA;                }));&#xD;&#xA;                var rotateIntervall = setInterval((function () {&#xD;&#xA;                    var f = 0;&#xD;&#xA;                    return function () {&#xD;&#xA;                        group.angle = f;&#xD;&#xA;                        if (f > 180) {&#xD;&#xA;                            f = 0;&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            f += 1;&#xD;&#xA;                        }&#xD;&#xA;                        canvas.renderAll();&#xD;&#xA;                    };&#xD;&#xA;                })(), 0);&#xD;&#xA;                group.animate("top", _this.app.getHeight() - ((_this.app.getWidth() / 5) / 2), {&#xD;&#xA;                    duration: 600,&#xD;&#xA;                    onChange: canvas.renderAll.bind(canvas),&#xD;&#xA;                    easing: fabric.util.ease["easeOutBounce"]&#xD;&#xA;                });&#xD;&#xA;                (function rotate(f, count) {&#xD;&#xA;                    count += .01;&#xD;&#xA;                    console.log(Math.floor(count * 10));&#xD;&#xA;                    group.item(2).setText(Math.floor(count * 10) % 2 === 0 ? "O" : "X");&#xD;&#xA;                    var skewInterval = setInterval((function () {&#xD;&#xA;                        return function () {&#xD;&#xA;                            group.transformMatrix = [0, 1, f, 0, 0, 0];&#xD;&#xA;                            if (f > 1 && count >= 10) {&#xD;&#xA;                                clearInterval(skewInterval);&#xD;&#xA;                                clearInterval(rotateIntervall);&#xD;&#xA;                                return 0;&#xD;&#xA;                            }&#xD;&#xA;                            else if (f > 1) {&#xD;&#xA;                                f = 0;&#xD;&#xA;                            }&#xD;&#xA;                            else if (f > 0.8) {&#xD;&#xA;                                f += 0.03;&#xD;&#xA;                            }&#xD;&#xA;                            else if (f > 0.9) {&#xD;&#xA;                                if (f > 0.93) {&#xD;&#xA;                                    f += 0.04;&#xD;&#xA;                                }&#xD;&#xA;                                else if (f > 0.96) {&#xD;&#xA;                                    f += 0.05;&#xD;&#xA;                                }&#xD;&#xA;                                else {&#xD;&#xA;                                    f += 0.06;&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            else {&#xD;&#xA;                                f += 0.09;&#xD;&#xA;                            }&#xD;&#xA;                            canvas.renderAll();&#xD;&#xA;                            clearInterval(skewInterval);&#xD;&#xA;                            rotate(f, count);&#xD;&#xA;                            return 0;&#xD;&#xA;                        };&#xD;&#xA;                    })(), count);&#xD;&#xA;                })(0, 0);&#xD;&#xA;                canvas.add(group);&#xD;&#xA;            };&#xD;&#xA;            this.resize();&#xD;&#xA;            this.app.renderOnAddRemove = true;&#xD;&#xA;            this.headerHeight = this.app.getHeight() / 12;&#xD;&#xA;            this.drawBackground();&#xD;&#xA;            this.drawToss();&#xD;&#xA;        }&#xD;&#xA;        Ys.prototype.createVerticalGradientOptions = function (type, height, colorStops) {&#xD;&#xA;            return {&#xD;&#xA;                type: type,&#xD;&#xA;                x1: 0,&#xD;&#xA;                y1: 0,&#xD;&#xA;                x2: 0,&#xD;&#xA;                y2: height,&#xD;&#xA;                colorStops: colorStops&#xD;&#xA;            };&#xD;&#xA;        };&#xD;&#xA;        Ys.prototype.getRandom = function (min, max) {&#xD;&#xA;            return Math.random() * (max - min) + min;&#xD;&#xA;        };&#xD;&#xA;        return Ys;&#xD;&#xA;    }());&#xD;&#xA;    var ys = new Ys();&#xD;&#xA;    //# sourceMappingURL=application.js.map