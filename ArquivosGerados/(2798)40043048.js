    var plugin   = 'dropdown',&#xD;&#xA;        defaults = {&#xD;&#xA;            onOpened : function() {},&#xD;&#xA;            onClosed : function() {}&#xD;&#xA;        };&#xD;&#xA;    // Constructor&#xD;&#xA;    function Dropdown(element, options) {&#xD;&#xA;        this.element  = element;&#xD;&#xA;        this.settings = $.extend({}, defaults, options);&#xD;&#xA;        this.init();&#xD;&#xA;    }&#xD;&#xA;    // Instance&#xD;&#xA;    $.extend(Dropdown.prototype, {&#xD;&#xA;        init: function() {&#xD;&#xA;            var instance = this,&#xD;&#xA;                $element = $(instance.element);&#xD;&#xA;            // Bind listeners&#xD;&#xA;            $element.click(function() {&#xD;&#xA;                instance.toggle();&#xD;&#xA;            });&#xD;&#xA;            // PROBLEM HERE&#xD;&#xA;            $element.focus(function() {&#xD;&#xA;                instance.open();&#xD;&#xA;            }).focusout(function() {&#xD;&#xA;                instance.close();&#xD;&#xA;            });&#xD;&#xA;        },&#xD;&#xA;        /**&#xD;&#xA;         * Check the state of the dropdown.&#xD;&#xA;         *&#xD;&#xA;         * @param state&#xD;&#xA;         * @returns {*}&#xD;&#xA;         */&#xD;&#xA;        is: function(state) {&#xD;&#xA;            var $element = $(this.element);&#xD;&#xA;            return {&#xD;&#xA;                open: function() {&#xD;&#xA;                    return $element.hasClass('dropdown--open');&#xD;&#xA;                },&#xD;&#xA;                focused: function() {&#xD;&#xA;                    return document.activeElement === $element[0];&#xD;&#xA;                }&#xD;&#xA;            }[state].apply();&#xD;&#xA;        },&#xD;&#xA;        /**&#xD;&#xA;         * Toggles the dropdown.&#xD;&#xA;         */&#xD;&#xA;        toggle: function() {&#xD;&#xA;            if  (this.is('open')) this.close();&#xD;&#xA;            else this.open();&#xD;&#xA;        },&#xD;&#xA;        /**&#xD;&#xA;         * Open the dropdown.&#xD;&#xA;         */&#xD;&#xA;        open: function() {&#xD;&#xA;            var instance = this,&#xD;&#xA;                $element = $(instance.element);&#xD;&#xA;            if (instance.is('open')) {&#xD;&#xA;                return;&#xD;&#xA;            } else if ( ! instance.is('focused')) {&#xD;&#xA;                $element.focus(); // PROBLEM HERE&#xD;&#xA;            }&#xD;&#xA;            $element.addClass('dropdown--open');&#xD;&#xA;            this.callback(this.settings.onOpened, $element);&#xD;&#xA;        },&#xD;&#xA;        /**&#xD;&#xA;         * Close the dropdown.&#xD;&#xA;         */&#xD;&#xA;        close: function() {&#xD;&#xA;            var instance = this,&#xD;&#xA;                $element = $(this.element);&#xD;&#xA;            if ( ! instance.is('open')) {&#xD;&#xA;                return;&#xD;&#xA;            } else if ( instance.is('focused')) {&#xD;&#xA;                $element.focusout(); // PROBLEM HERE&#xD;&#xA;            }&#xD;&#xA;            $element.removeClass('dropdown--open');&#xD;&#xA;            this.callback(this.settings.onClosed, $element);&#xD;&#xA;        },&#xD;&#xA;        /**&#xD;&#xA;         * Make a callback.&#xD;&#xA;         *&#xD;&#xA;         * @param callback&#xD;&#xA;         * @param $element&#xD;&#xA;         */&#xD;&#xA;        callback: function(callback, $element) {&#xD;&#xA;            if (callback && typeof callback === 'function') {&#xD;&#xA;                callback($element);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    });