    /*&#xD;&#xA;    * Get conversations of user&#xD;&#xA;    * @param user {String}&#xD;&#xA;    */&#xD;&#xA;    function getConversations(user){&#xD;&#xA;    	return new Promise(function(resolve, reject){&#xD;&#xA;    		var conversations = user.Conversations&#xD;&#xA;    		var newConversations = []&#xD;&#xA;    		for(var conversation of conversations) {&#xD;&#xA;    			helperGetConvo(conversation.ConversID).then(function(convo){&#xD;&#xA;    				newConversations.push(createConversationObject({messages:[], name:convo.conversationName, users:["broulaye", "doumbia"], Id:convo.conversationID}))&#xD;&#xA;    			}).catch(function(reason) {&#xD;&#xA;    				console.log("failure when finding conversation 2: " + reason)&#xD;&#xA;    			})&#xD;&#xA;    		}&#xD;&#xA;    		resolve(newConversations)&#xD;&#xA;    	})&#xD;&#xA;    }&#xD;&#xA;    function helperGetConvo(convoId) {&#xD;&#xA;    	return new Promise (function(resolve, reject){&#xD;&#xA;    		query.findConversation(convoId).then(function(convers) {&#xD;&#xA;    			if(convers) {&#xD;&#xA;    				console.log("conversation was found: " + convers)&#xD;&#xA;    			}&#xD;&#xA;    			else {&#xD;&#xA;    				console.log("conversation was not found: " + convers)&#xD;&#xA;    			}&#xD;&#xA;    			resolve(convers)&#xD;&#xA;    		}).catch(function(reason) {&#xD;&#xA;    			console.log("failure when finding conversation: " + reason)&#xD;&#xA;    		})&#xD;&#xA;    	})&#xD;&#xA;    }